From jdoyon at berlios.de  Wed Mar  1 05:14:44 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Wed, 1 Mar 2006 05:14:44 +0100
Subject: [Mapnik-svn] r169 - trunk/bindings/python
Message-ID: <200603010414.k214Eiwe022106@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-01 05:14:41 +0100 (Wed, 01 Mar 2006)
New Revision: 169

Modified:
   trunk/bindings/python/mapnik_layer.cpp
Log:
Changed the layer constructor to use a more pythonic:

Layer(name, type, file)

Please review and comment!



Modified: trunk/bindings/python/mapnik_layer.cpp
===================================================================
--- trunk/bindings/python/mapnik_layer.cpp	2006-02-27 21:57:08 UTC (rev 168)
+++ trunk/bindings/python/mapnik_layer.cpp	2006-03-01 04:14:41 UTC (rev 169)
@@ -81,18 +81,13 @@
 
 namespace  
 {
-    //user-friendly wrapper that uses Python dictionary
     using namespace boost::python;
-    Layer create_layer(const dict& d)
+    Layer create_layer(const char* name, const char* type, const char* file)
     {
 	parameters params;
-	boost::python::list keys=d.keys();
-	for (int i=0;i<len(keys);++i)
-	{
-	    std::string key=extract<std::string>(keys[i]);
-            std::string value=extract<std::string>(d[key]);
-	    params[key] = value;
-	}
+	params["name"] = name;
+        params["type"] = type;
+        params["file"] = file;
 	return Layer(params);
     }
 }



From pavlenko at berlios.de  Wed Mar  1 16:15:39 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 1 Mar 2006 16:15:39 +0100
Subject: [Mapnik-svn] r170 - in trunk/bindings/python: . mapnik
Message-ID: <200603011515.k21FFdo8031033@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-01 16:15:37 +0100 (Wed, 01 Mar 2006)
New Revision: 170

Modified:
   trunk/bindings/python/mapnik/__init__.py
   trunk/bindings/python/mapnik_layer.cpp
   trunk/bindings/python/mapnik_text_symbolizer.cpp
Log:
keyword arguments for Layer factory

Modified: trunk/bindings/python/mapnik/__init__.py
===================================================================
--- trunk/bindings/python/mapnik/__init__.py	2006-03-01 04:14:41 UTC (rev 169)
+++ trunk/bindings/python/mapnik/__init__.py	2006-03-01 15:15:37 UTC (rev 170)
@@ -49,6 +49,10 @@
         return 'Envelope(%s,%s,%s,%s)' % \
                (self.minx,self.miny,self.maxx,self.maxy)
 
+def Layer (**keywords):
+    return _Layer(keywords)
+    
+    
 #register datasources
 from mapnik import DatasourceCache
 DatasourceCache.instance().register_datasources('%s' % inputpluginspath)

Modified: trunk/bindings/python/mapnik_layer.cpp
===================================================================
--- trunk/bindings/python/mapnik_layer.cpp	2006-03-01 04:14:41 UTC (rev 169)
+++ trunk/bindings/python/mapnik_layer.cpp	2006-03-01 15:15:37 UTC (rev 170)
@@ -81,13 +81,18 @@
 
 namespace  
 {
+    //user-friendly wrapper that uses Python dictionary
     using namespace boost::python;
-    Layer create_layer(const char* name, const char* type, const char* file)
+    _Layer create_layer(const dict& d)
     {
 	parameters params;
-	params["name"] = name;
-        params["type"] = type;
-        params["file"] = file;
+	boost::python::list keys=d.keys();
+	for (int i=0;i<len(keys);++i)
+	{
+	    std::string key=extract<std::string>(keys[i]);
+            std::string value=extract<std::string>(d[key]);
+	    params[key] = value;
+	}
 	return Layer(params);
     }
 }
@@ -109,5 +114,5 @@
 		      (&Layer::styles,return_value_policy<reference_existing_object>()))
         .def_pickle(layer_pickle_suite())
         ;
-    def("Layer",&create_layer);
+    def("_Layer",&create_layer);
 }

Modified: trunk/bindings/python/mapnik_text_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_text_symbolizer.cpp	2006-03-01 04:14:41 UTC (rev 169)
+++ trunk/bindings/python/mapnik_text_symbolizer.cpp	2006-03-01 15:15:37 UTC (rev 170)
@@ -29,6 +29,6 @@
     using namespace boost::python;
     
     class_<text_symbolizer>("TextSymbolizer",
-			    init<std::string const&,Color const&>("TODO"))
+			    init<std::string const&,unsigned,Color const&>("TODO"))
 	;
 }



From pavlenko at berlios.de  Wed Mar  1 16:16:46 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 1 Mar 2006 16:16:46 +0100
Subject: [Mapnik-svn] r171 - in trunk: include src
Message-ID: <200603011516.k21FGkp5031219@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-01 16:16:45 +0100 (Wed, 01 Mar 2006)
New Revision: 171

Modified:
   trunk/include/font_engine_freetype.hpp
   trunk/include/quad_tree.hpp
   trunk/include/text_symbolizer.hpp
   trunk/src/agg_renderer.cpp
Log:
updated text symboilizer
fixed memory leak in FT_Glyph



Modified: trunk/include/font_engine_freetype.hpp
===================================================================
--- trunk/include/font_engine_freetype.hpp	2006-03-01 15:15:37 UTC (rev 170)
+++ trunk/include/font_engine_freetype.hpp	2006-03-01 15:16:45 UTC (rev 171)
@@ -27,6 +27,7 @@
 
 #include <boost/shared_ptr.hpp>
 #include <boost/utility.hpp>
+#include <boost/ptr_container/ptr_vector.hpp>
 #include <boost/thread/mutex.hpp>
 
 #include <string>
@@ -65,35 +66,7 @@
 	{
 	    return face_->glyph;
 	}
-
-	/*
-	unsigned glyph_index(unsigned charcode) const
-	{
-	    return FT_Get_Char_Index(face_, charcode );
-	}
 	
-	void set_transform (FT_Matrix * m,FT_Vector *v)
-	{
-	    FT_Set_Transform(face_,m,v);
-	}
-	
-	bool render_glyph (unsigned charcode) const
-	{
-	    unsigned glyph_index = FT_Get_Char_Index(face_, charcode );
-	    FT_Error  error;
-	    error = FT_Load_Glyph(face_,glyph_index,FT_LOAD_DEFAULT);
-	    if (error == 0 )
-	    {
-		error = FT_Render_Glyph(face_->glyph, FT_RENDER_MODE_NORMAL );
-		if (error == 0)
-		{
-		    return true;
-		}
-	    }
-	    return false;
-	}
-	*/
-	
 	FT_Face get_face() const
 	{
 	    return face_;
@@ -273,8 +246,18 @@
     template <typename T>
     struct text_renderer : private boost::noncopyable
     {
+
+	struct glyph_t : boost::noncopyable
+	{
+	    FT_Glyph image;
+	    glyph_t(FT_Glyph image_) : image(image_) {}
+	    ~glyph_t ()	{ FT_Done_Glyph(image);}
+	};
+	
+	typedef boost::ptr_vector<glyph_t> glyphs_t;
+	typedef std::pair<unsigned,unsigned> dimension_t;
 	typedef T pixmap_type;
-    
+	
 	text_renderer (pixmap_type & pixmap, face_ptr face)
 	    : pixmap_(pixmap),
 	      face_(face),
@@ -307,41 +290,44 @@
 	{
 	    halo_radius_=radius;
 	}
-    
-	void render(std::string const& text, double x0, double y0)
+
+	dimension_t prepare_glyphs(std::string const& text)
 	{
+	    //clear glyphs
+	    glyphs_.clear();
+	    
 	    FT_Matrix matrix;
-	    FT_Vector origin;
 	    FT_Vector pen;
-	    FT_Error  error;	
-	    FT_Glyph glyph;
-	
+	    FT_Error  error;
+	    
 	    FT_Face face = face_->get_face();
 	    FT_GlyphSlot slot = face->glyph;
-	    FT_UInt glyph_index;
 	    FT_Bool use_kerning;
-	    FT_UInt previous = 0;
-	
-	    unsigned height = pixmap_.height();
-	
-	    origin.x = 0;
-	    origin.y = 0;
-	    pen.x = unsigned(x0 * 64);
-	    pen.y = unsigned((height - y0) * 64);
-        
+	    FT_UInt previous;
+	    
+	    pen.x = 0;
+	    pen.y = 0;
+	    
 	    use_kerning = FT_HAS_KERNING(face);
-
-	    std::string::const_iterator i;
-	    for (i=text.begin();i!=text.end();++i)
+	    
+	    FT_BBox bbox;   
+	    bbox.xMin = bbox.yMin = 32000; 
+	    bbox.xMax = bbox.yMax = -32000; //hmm?? 
+	    
+	    for (std::string::const_iterator i=text.begin();i!=text.end();++i)
 	    {
+		FT_BBox glyph_bbox; 
+		FT_Glyph image;
+		
 		matrix.xx = (FT_Fixed)( cos( angle_ ) * 0x10000L ); 
 		matrix.xy = (FT_Fixed)(-sin( angle_ ) * 0x10000L ); 
 		matrix.yx = (FT_Fixed)( sin( angle_ ) * 0x10000L ); 
 		matrix.yy = (FT_Fixed)( cos( angle_ ) * 0x10000L );
-	    	     
+	        	
 		FT_Set_Transform (face,&matrix,&pen);
-	    
-		glyph_index = FT_Get_Char_Index( face, unsigned(*i) & 0xff );
+		
+		FT_UInt glyph_index = FT_Get_Char_Index( face, unsigned(*i) & 0xff );
+		
 		if ( use_kerning && previous && glyph_index)
 		{
 		    FT_Vector delta;
@@ -350,42 +336,94 @@
 		    pen.x += delta.x;
 		    pen.y += delta.y;
 		}
-	    
+		
 		error = FT_Load_Glyph (face,glyph_index,FT_LOAD_DEFAULT); 
 		if ( error )
 		    continue;
-
-		error = FT_Get_Glyph( face->glyph, &glyph );
+		
+		error = FT_Get_Glyph( face->glyph, &image);
 		if ( error )
 		    continue;
-	  
-		//FT_Glyph_Transform(glyph,&matrix,&pen);
-	    
-		error = FT_Glyph_To_Bitmap( &glyph,FT_RENDER_MODE_NORMAL,0,1);
-		if ( error )
-		    continue;
-
-		FT_BitmapGlyph bit = (FT_BitmapGlyph)glyph;
-		if (halo_radius_)
+		
+		FT_Glyph_Get_CBox(image,ft_glyph_bbox_pixels, &glyph_bbox); 
+		if (glyph_bbox.xMin < bbox.xMin) 
+		    bbox.xMin = glyph_bbox.xMin; 
+		if (glyph_bbox.yMin < bbox.yMin) 
+		    bbox.yMin = glyph_bbox.yMin; 
+		if (glyph_bbox.xMax > bbox.xMax) 
+		    bbox.xMax = glyph_bbox.xMax; 
+		if (glyph_bbox.yMax > bbox.yMax) 
+		    bbox.yMax = glyph_bbox.yMax;
+		
+		if ( bbox.xMin > bbox.xMax )
 		{
-		    render_halo(&bit->bitmap, halo_fill_.rgba(), 
-				bit->left,
-				height - bit->top,halo_radius_);
+		    bbox.xMin = 0; 
+		    bbox.yMin = 0; 
+		    bbox.xMax = 0; 
+		    bbox.yMax = 0; 
 		}
-            	    
-		render_bitmap(&bit->bitmap, fill_.rgba(), 
-			      bit->left,
-			      height - bit->top);
-
-		FT_Done_Glyph(glyph);   
+		
 		pen.x += slot->advance.x;
 		pen.y += slot->advance.y;
-	    
+		
 		previous = glyph_index;
+		// take ownership of the glyph
+		glyphs_.push_back(new glyph_t(image));
+	    }
 	    
-		//angle_ = sin ( 0.1 * count++);
+	    unsigned string_width = (bbox.xMax - bbox.xMin); 
+	    unsigned string_height = (bbox.yMax - bbox.yMin);
+	    return dimension_t(string_width,string_height);
+	}
+	
+	void render(double x0, double y0)
+	{
+	    FT_Error  error;
+	    FT_Vector start;
+	    unsigned height = pixmap_.height();
+	    
+	    start.x = unsigned(x0 * (1 << 6)); 
+	    start.y = unsigned((height - y0) * (1 << 6));
+	    // now render transformed glyphs
+	    typename glyphs_t::iterator pos;
+
+	    if (halo_radius_ > 0)
+	    {
+		//render halo 
+		for ( pos = glyphs_.begin(); pos != glyphs_.end();++pos)
+		{
+	    
+		    FT_Glyph_Transform(pos->image,0,&start);
+	    
+		    error = FT_Glyph_To_Bitmap( &(pos->image),FT_RENDER_MODE_NORMAL,0,1);
+		    if ( ! error )
+		    {
+			
+			FT_BitmapGlyph bit = (FT_BitmapGlyph)pos->image;
+			render_halo(&bit->bitmap, halo_fill_.rgba(), 
+				    bit->left,
+				    height - bit->top,halo_radius_);
+		    }
+		}  
 	    }
+	    //render actual text
+	    for ( pos = glyphs_.begin(); pos != glyphs_.end();++pos)
+	    {
+	    
+		FT_Glyph_Transform(pos->image,0,&start);
+	    
+		error = FT_Glyph_To_Bitmap( &(pos->image),FT_RENDER_MODE_NORMAL,0,1);
+		if ( ! error )
+		{
+		   
+		    FT_BitmapGlyph bit = (FT_BitmapGlyph)pos->image;
+		    render_bitmap(&bit->bitmap, fill_.rgba(), 
+				  bit->left,
+				  height - bit->top);
+		}
+	    }  
 	}
+   	
     private:
     
 	void render_halo(FT_Bitmap *bitmap,unsigned rgba,int x,int y,int radius)
@@ -434,6 +472,7 @@
 	mapnik::Color halo_fill_;
 	int halo_radius_;
 	float angle_;
+	glyphs_t glyphs_;
     }; 
 }
 

Modified: trunk/include/quad_tree.hpp
===================================================================
--- trunk/include/quad_tree.hpp	2006-03-01 15:15:37 UTC (rev 170)
+++ trunk/include/quad_tree.hpp	2006-03-01 15:16:45 UTC (rev 171)
@@ -24,7 +24,7 @@
 #include <boost/ptr_container/ptr_vector.hpp>
 #include <boost/noncopyable.hpp>
 #include <vector>
-#include <mapnik/envelope.hpp>
+#include "envelope.hpp"
 
 
 namespace mapnik

Modified: trunk/include/text_symbolizer.hpp
===================================================================
--- trunk/include/text_symbolizer.hpp	2006-03-01 15:15:37 UTC (rev 170)
+++ trunk/include/text_symbolizer.hpp	2006-03-01 15:16:45 UTC (rev 171)
@@ -30,14 +30,20 @@
         
     struct text_symbolizer
     {		
-	text_symbolizer(std::string const& name,Color const& fill)
+	text_symbolizer(std::string const& name,unsigned size,Color const& fill)
 	    : name_(name),
+	      size_(size),
 	      fill_(fill),
-	      label_p_(point_placement){}
+	      halo_fill_(Color(255,255,255)),
+	      halo_radius_(0),
+	      label_p_(point_placement) {}
 	
 	text_symbolizer(text_symbolizer const& rhs)
 	    : name_(rhs.name_),
+	      size_(rhs.size_),
 	      fill_(rhs.fill_),
+	      halo_fill_(rhs.halo_fill_),
+	      halo_radius_(rhs.halo_radius_),
 	      label_p_(rhs.label_p_) {}
 	
 	~text_symbolizer()
@@ -48,11 +54,37 @@
 	{
 	    return name_;
 	}
+	
+	unsigned get_text_size() const
+	{
+	    return size_;
+	}
+	
 	Color const& get_fill() const
 	{
 	    return fill_;
 	}
 	
+	void set_halo_fill(Color const& fill)
+	{
+	    halo_fill_ = fill;
+	}
+
+	Color const& get_halo_fill() const
+	{
+	    return halo_fill_;
+	}
+	
+	void set_halo_radius(unsigned radius)
+	{
+	    halo_radius_ = radius;
+	}
+	
+	unsigned get_halo_radius() const
+	{
+	    return halo_radius_;
+	}
+	
 	void set_label_placement(label_placement_e label_p)
 	{
 	    label_p_ = label_p;
@@ -65,7 +97,10 @@
 	
     private:
 	std::string name_;
+	unsigned size_;
 	Color fill_;
+	Color halo_fill_;
+	unsigned halo_radius_;
 	label_placement_e label_p_;
     };
 }

Modified: trunk/src/agg_renderer.cpp
===================================================================
--- trunk/src/agg_renderer.cpp	2006-03-01 15:15:37 UTC (rev 170)
+++ trunk/src/agg_renderer.cpp	2006-03-01 15:16:45 UTC (rev 171)
@@ -83,7 +83,7 @@
 	: feature_style_processor<agg_renderer>(m),
 	  pixmap_(pixmap),
 	  t_(m.getWidth(),m.getHeight(),m.getCurrentExtent()),
-	  detector_(Envelope<double>(0,0,m.getWidth(),m.getHeight()))
+	  detector_(Envelope<double>(-64 ,-64, m.getWidth() + 64 ,m.getHeight() + 64))
     {
 	Color const& bg=m.getBackground();
 	pixmap_.setBackground(bg);
@@ -401,7 +401,8 @@
 		path.vertex(&x0,&y0);
 		path.vertex(&x1,&y1);
 		double dx = x1 - x0;
-		double dy = y1 - y0;
+		double dy = ( y1 - y0 > 1e-7 ) ?  y1 - y0 : 1.0;
+	        
 		angle = atan( dx/ dy ) - 0.5 * 3.1459;
 		
 		//TODO!!!!!!!!!!!!!!!!!!!!
@@ -417,17 +418,35 @@
 		geom->label_position(&x,&y);
 		t_.forward_x(&x);
 		t_.forward_y(&y);
-		
+
+		//x += 6; //TODO!!!
+		//y += 6; //TODO!!!
+
 		face_ptr face = font_manager_.get_face("Bitstream Vera Sans Roman");//TODO
 		//face_ptr face = font_manager_.get_face("Times New Roman Regular");//TODO
 		if (face)
 		{
 		    text_renderer<mapnik::Image32> ren(pixmap_,face);
-		    ren.set_pixel_size(12);
+		    ren.set_pixel_size(sym.get_text_size());
 		    ren.set_fill(fill);
-		    ren.set_halo_radius(1);
+		    ren.set_halo_fill(sym.get_halo_fill());
+		    ren.set_halo_radius(sym.get_halo_radius());
 		    ren.set_angle(angle);
-		    ren.render(text,x+6,y+6);
+
+		    std::pair<unsigned,unsigned> dim = ren.prepare_glyphs(text);
+		    Envelope<double> text_box(x - 0.5*dim.first,y - 0.5 * dim.second ,
+					      x + 0.5*dim.first,y + 0.5 * dim.second);
+		    
+		    if (sym.get_halo_radius() > 0)
+		    {
+			text_box.width(text_box.width() + sym.get_halo_radius()*2);
+			text_box.height(text_box.height() + sym.get_halo_radius()*2);
+		    }
+
+		    if (detector_.has_placement(text_box))
+		    {
+			ren.render(x - 0.5 * dim.first,y - 0.5 * dim.second);
+		    }
 		}
 	    }  
 	}



From pavlenko at berlios.de  Wed Mar  1 16:34:24 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 1 Mar 2006 16:34:24 +0100
Subject: [Mapnik-svn] r172 - in trunk/bindings/python: . mapnik
Message-ID: <200603011534.k21FYOdq001572@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-01 16:34:23 +0100 (Wed, 01 Mar 2006)
New Revision: 172

Modified:
   trunk/bindings/python/mapnik/__init__.py
   trunk/bindings/python/mapnik_layer.cpp
Log:
small correction:
1. Layer method takes named arguments
2. CreateLayer expects Python dictionary



Modified: trunk/bindings/python/mapnik/__init__.py
===================================================================
--- trunk/bindings/python/mapnik/__init__.py	2006-03-01 15:16:45 UTC (rev 171)
+++ trunk/bindings/python/mapnik/__init__.py	2006-03-01 15:34:23 UTC (rev 172)
@@ -50,7 +50,7 @@
                (self.minx,self.miny,self.maxx,self.maxy)
 
 def Layer (**keywords):
-    return _Layer(keywords)
+    return CreateLayer(keywords)
     
     
 #register datasources

Modified: trunk/bindings/python/mapnik_layer.cpp
===================================================================
--- trunk/bindings/python/mapnik_layer.cpp	2006-03-01 15:16:45 UTC (rev 171)
+++ trunk/bindings/python/mapnik_layer.cpp	2006-03-01 15:34:23 UTC (rev 172)
@@ -83,7 +83,7 @@
 {
     //user-friendly wrapper that uses Python dictionary
     using namespace boost::python;
-    _Layer create_layer(const dict& d)
+    Layer create_layer(const dict& d)
     {
 	parameters params;
 	boost::python::list keys=d.keys();
@@ -114,5 +114,5 @@
 		      (&Layer::styles,return_value_policy<reference_existing_object>()))
         .def_pickle(layer_pickle_suite())
         ;
-    def("_Layer",&create_layer);
+    def("CreateLayer",&create_layer);
 }



From jdoyon at berlios.de  Fri Mar  3 01:10:24 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Fri, 3 Mar 2006 01:10:24 +0100
Subject: [Mapnik-svn] r173 - in trunk: . fonts fonts/ttf-bitstream-vera-1.10
Message-ID: <200603030010.k230AO9a020839@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-03 01:10:10 +0100 (Fri, 03 Mar 2006)
New Revision: 173

Added:
   trunk/fonts/
   trunk/fonts/ttf-bitstream-vera-1.10/
   trunk/fonts/ttf-bitstream-vera-1.10/COPYRIGHT.TXT
   trunk/fonts/ttf-bitstream-vera-1.10/README.TXT
   trunk/fonts/ttf-bitstream-vera-1.10/RELEASENOTES.TXT
   trunk/fonts/ttf-bitstream-vera-1.10/Vera.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraBI.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraBd.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraIt.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraMoBI.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraMoBd.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraMoIt.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraMono.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraSe.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/VeraSeBd.ttf
   trunk/fonts/ttf-bitstream-vera-1.10/local.conf
Log:
Add some default fonts to the mapnik distribution.



Added: trunk/fonts/ttf-bitstream-vera-1.10/COPYRIGHT.TXT
===================================================================
--- trunk/fonts/ttf-bitstream-vera-1.10/COPYRIGHT.TXT	2006-03-01 15:34:23 UTC (rev 172)
+++ trunk/fonts/ttf-bitstream-vera-1.10/COPYRIGHT.TXT	2006-03-03 00:10:10 UTC (rev 173)
@@ -0,0 +1,124 @@
+Bitstream Vera Fonts Copyright
+
+The fonts have a generous copyright, allowing derivative works (as
+long as "Bitstream" or "Vera" are not in the names), and full
+redistribution (so long as they are not *sold* by themselves). They
+can be be bundled, redistributed and sold with any software.
+
+The fonts are distributed under the following copyright:
+
+Copyright
+=========
+
+Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved. Bitstream
+Vera is a trademark of Bitstream, Inc.
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of the fonts accompanying this license ("Fonts") and associated
+documentation files (the "Font Software"), to reproduce and distribute
+the Font Software, including without limitation the rights to use,
+copy, merge, publish, distribute, and/or sell copies of the Font
+Software, and to permit persons to whom the Font Software is furnished
+to do so, subject to the following conditions:
+
+The above copyright and trademark notices and this permission notice
+shall be included in all copies of one or more of the Font Software
+typefaces.
+
+The Font Software may be modified, altered, or added to, and in
+particular the designs of glyphs or characters in the Fonts may be
+modified and additional glyphs or characters may be added to the
+Fonts, only if the fonts are renamed to names not containing either
+the words "Bitstream" or the word "Vera".
+
+This License becomes null and void to the extent applicable to Fonts
+or Font Software that has been modified and is distributed under the
+"Bitstream Vera" names.
+
+The Font Software may be sold as part of a larger software package but
+no copy of one or more of the Font Software typefaces may be sold by
+itself.
+
+THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL
+BITSTREAM OR THE GNOME FOUNDATION BE LIABLE FOR ANY CLAIM, DAMAGES OR
+OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL,
+OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT
+SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.
+
+Except as contained in this notice, the names of Gnome, the Gnome
+Foundation, and Bitstream Inc., shall not be used in advertising or
+otherwise to promote the sale, use or other dealings in this Font
+Software without prior written authorization from the Gnome Foundation
+or Bitstream Inc., respectively. For further information, contact:
+fonts at gnome dot org.
+
+Copyright FAQ
+=============
+
+   1. I don't understand the resale restriction... What gives?
+
+      Bitstream is giving away these fonts, but wishes to ensure its
+      competitors can't just drop the fonts as is into a font sale system
+      and sell them as is. It seems fair that if Bitstream can't make money
+      from the Bitstream Vera fonts, their competitors should not be able to
+      do so either. You can sell the fonts as part of any software package,
+      however.
+
+   2. I want to package these fonts separately for distribution and
+      sale as part of a larger software package or system.  Can I do so?
+
+      Yes. A RPM or Debian package is a "larger software package" to begin 
+      with, and you aren't selling them independently by themselves. 
+      See 1. above.
+
+   3. Are derivative works allowed?
+      Yes!
+
+   4. Can I change or add to the font(s)?
+      Yes, but you must change the name(s) of the font(s).
+
+   5. Under what terms are derivative works allowed?
+
+      You must change the name(s) of the fonts. This is to ensure the
+      quality of the fonts, both to protect Bitstream and Gnome. We want to
+      ensure that if an application has opened a font specifically of these
+      names, it gets what it expects (though of course, using fontconfig,
+      substitutions could still could have occurred during font
+      opening). You must include the Bitstream copyright. Additional
+      copyrights can be added, as per copyright law. Happy Font Hacking!
+
+   6. If I have improvements for Bitstream Vera, is it possible they might get 
+       adopted in future versions?
+
+      Yes. The contract between the Gnome Foundation and Bitstream has
+      provisions for working with Bitstream to ensure quality additions to
+      the Bitstream Vera font family. Please contact us if you have such
+      additions. Note, that in general, we will want such additions for the
+      entire family, not just a single font, and that you'll have to keep
+      both Gnome and Jim Lyles, Vera's designer, happy! To make sense to add
+      glyphs to the font, they must be stylistically in keeping with Vera's
+      design. Vera cannot become a "ransom note" font. Jim Lyles will be
+      providing a document describing the design elements used in Vera, as a
+      guide and aid for people interested in contributing to Vera.
+
+   7. I want to sell a software package that uses these fonts: Can I do so?
+
+      Sure. Bundle the fonts with your software and sell your software
+      with the fonts. That is the intent of the copyright.
+
+   8. If applications have built the names "Bitstream Vera" into them, 
+      can I override this somehow to use fonts of my choosing?
+
+      This depends on exact details of the software. Most open source
+      systems and software (e.g., Gnome, KDE, etc.) are now converting to
+      use fontconfig (see www.fontconfig.org) to handle font configuration,
+      selection and substitution; it has provisions for overriding font
+      names and subsituting alternatives. An example is provided by the
+      supplied local.conf file, which chooses the family Bitstream Vera for
+      "sans", "serif" and "monospace".  Other software (e.g., the XFree86
+      core server) has other mechanisms for font substitution.
+

Added: trunk/fonts/ttf-bitstream-vera-1.10/README.TXT
===================================================================
--- trunk/fonts/ttf-bitstream-vera-1.10/README.TXT	2006-03-01 15:34:23 UTC (rev 172)
+++ trunk/fonts/ttf-bitstream-vera-1.10/README.TXT	2006-03-03 00:10:10 UTC (rev 173)
@@ -0,0 +1,11 @@
+Contained herin is the Bitstream Vera font family.
+
+The Copyright information is found in the COPYRIGHT.TXT file (along
+with being incoporated into the fonts themselves).
+
+The releases notes are found in the file "RELEASENOTES.TXT".
+
+We hope you enjoy Vera!
+
+                        Bitstream, Inc.
+			The Gnome Project

Added: trunk/fonts/ttf-bitstream-vera-1.10/RELEASENOTES.TXT
===================================================================
--- trunk/fonts/ttf-bitstream-vera-1.10/RELEASENOTES.TXT	2006-03-01 15:34:23 UTC (rev 172)
+++ trunk/fonts/ttf-bitstream-vera-1.10/RELEASENOTES.TXT	2006-03-03 00:10:10 UTC (rev 173)
@@ -0,0 +1,162 @@
+Bitstream Vera Fonts - April 16, 2003
+=====================================
+
+The version number of these fonts is 1.10 to distinguish them from the
+beta test fonts.
+
+Note that the Vera copyright is incorporated in the fonts themselves.
+The License field in the fonts contains the copyright license as it
+appears below. The TrueType copyright field is not large enough to
+contain the full license, so the license is incorporated (as you might
+think if you thought about it) into the license field, which
+unfortunately can be obscure to find.  (In pfaedit, see: Element->Font
+Info->TTFNames->License).
+
+Our apologies for it taking longer to complete the fonts than planned.
+Beta testers requested a tighter line spacing (less leading) and Jim
+Lyles redesigned Vera's accents to bring its line spacing to more
+typical of other fonts.  This took additional time and effort.  Our
+thanks to Jim for this effort above and beyond the call of duty.
+
+There are four monospace and sans faces (normal, oblique, bold, bold
+oblique) and two serif faces (normal and bold). Fontconfig/Xft2 (see
+www.fontconfig.org) can artificially oblique the serif faces for you:
+this loses hinting and distorts the faces slightly, but is visibly
+different than normal and bold, and reasonably pleasing.
+
+On systems with fontconfig 2.0 or 2.1 installed, making your sans,
+serif and monospace fonts default to these fonts is very easy.  Just
+drop the file local.conf into your /etc/fonts directory.  This will
+make the Bitstream fonts your default fonts for all applications using
+fontconfig (if sans, serif, or monospace names are used, as they often
+are as default values in many desktops). The XML in local.conf may
+need modification to enable subpixel decimation, if appropriate,
+however, the commented out phrase does so for XFree86 4.3, in the case
+that the server does not have sufficient information to identify the
+use of a flat panel.  Fontconfig 2.2 adds Vera to the list of font
+families and will, by default use it as the default sans, serif and
+monospace fonts.
+
+During the testing of the final Vera fonts, we learned that screen
+fonts in general are only typically hinted to work correctly at
+integer pixel sizes.  Vera is coded internally for integer sizes only.
+We need to investigate further to see if there are commonly used fonts
+that are hinted to be rounded but are not rounded to integer sizes due
+to oversights in their coding.
+
+Most fonts work best at 8 pixels and below if anti-aliased only, as
+the amount of work required to hint well at smaller and smaller sizes
+becomes astronomical.  GASP tables are typically used to control
+whether hinting is used or not, but Freetype/Xft does not currently
+support GASP tables (which are present in Vera).
+
+To mitigate this problem, both for Vera and other fonts, there will be
+(very shortly) a new fontconfig 2.2 release that will, by default not
+apply hints if the size is below 8 pixels. if you should have a font
+that in fact has been hinted more agressively, you can use fontconfig
+to note this exception. We believe this should improve many hinted
+fonts in addition to Vera, though implemeting GASP support is likely
+the right long term solution.
+
+Font rendering in Gnome or KDE is the combination of algorithms in
+Xft2 and Freetype, along with hinting in the fonts themselves. It is
+vital to have sufficient information to disentangle problems that you
+may observe.
+
+Note that having your font rendering system set up correctly is vital
+to proper judgement of problems of the fonts:
+
+    * Freetype may or may not be configured to in ways that may
+      implement execution of possibly patented (in some parts of the world)
+      TrueType hinting algorithms, particularly at small sizes.  Best
+      results are obtained while using these algorithms.
+
+    * The freetype autohinter (used when the possibly patented
+      algorithms are not used) continues to improve with each release. If
+      you are using the autohinter, please ensure you are using an up to
+      date version of freetype before reporting problems.
+
+    * Please identify what version of freetype you are using in any
+      bug reports, and how your freetype is configured.
+
+    * Make sure you are not using the freetype version included in
+      XFree86 4.3, as it has bugs that significantly degrade most fonts,
+      including Vera. if you build XFree86 4.3 from source yourself, you may
+      have installed this broken version without intending it (as I
+      did). Vera was verified with the recently released Freetype 2.1.4. On
+      many systems, 'ldd" can be used to see which freetype shared library
+      is actually being used.
+
+    * Xft/X Render does not (yet) implement gamma correction.  This
+      causes significant problems rendering white text on a black background
+      (causing partial pixels to be insufficiently shaded) if the gamma of
+      your monitor has not been compensated for, and minor problems with
+      black text on a while background.  The program "xgamma" can be used to
+      set a gamma correction value in the X server's color pallette. Most
+      monitors have a gamma near 2.
+
+    * Note that the Vera family uses minimal delta hinting. Your
+      results on other systems when not used anti-aliased may not be
+      entirely satisfying. We are primarily interested in reports of
+      problems on open source systems implementing Xft2/fontconfig/freetype
+      (which implements antialiasing and hinting adjustements, and
+      sophisticated subpixel decimation on flatpanels).  Also, the
+      algorithms used by Xft2 adjust the hints to integer widths and the
+      results are crisper on open source systems than on Windows or
+      MacIntosh.
+
+    * Your fontconfig may (probably does) predate the release of
+      fontconfig 2.2, and you may see artifacts not present when the font is
+      used at very small sizes with hinting enabled. "vc-list -V" can be
+      used to see what version you have installed.
+
+We believe and hope that these fonts will resolve the problems
+reported during beta test.  The largest change is the reduction of
+leading (interline spacing), which had annoyed a number of people, and
+reduced Vera's utility for some applcations.  The Vera monospace font
+should also now make '0' and 'O' and '1' and 'l' more clearly
+distinguishable.
+
+The version of these fonts is version 1.10.  Fontconfig should be
+choosing the new version of the fonts if both the released fonts and
+beta test fonts are installed (though please discard them: they have
+names of form tt20[1-12]gn.ttf).  Note that older versions of
+fontconfig sometimes did not rebuild their cache correctly when new
+fonts are installed: please upgrade to fontconfig 2.2. "fc-cache -f"
+can be used to force rebuilding fontconfig's cache files.
+
+If you note problems, please send them to fonts at gnome dot org, with
+exactly which face and size and unicode point you observe the problem
+at. The xfd utility from XFree86 CVS may be useful for this (e.g. "xfd
+-fa sans").  A possibly more useful program to examine fonts at a
+variety of sizes is the "waterfall" program found in Keith Packard's
+CVS.
+
+        $ cvs -d :pserver:anoncvs at keithp.com:/local/src/CVS login
+        Logging in to :pserver:anoncvs at keithp.com:2401/local/src/CVS
+        CVS password: <hit return>
+        $ cvs -d :pserver:anoncvs at keithp.com:/local/src/CVS co waterfall
+        $ cd waterfall
+        $ xmkmf -a
+        $ make
+        # make install
+        # make install.man
+
+Again, please make sure you are running an up-to-date freetype, and
+that you are only examining integer sizes.
+
+Reporting Problems
+==================
+
+Please send problem reports to fonts at gnome org, with the following
+information:
+
+   1. Version of Freetype, Xft2 and fontconfig
+   2. Whether TT hinting is being used, or the autohinter
+   3. Application being used
+   4. Character/Unicode code point that has problems (if applicable)
+   5. Version of which operating system
+   6. Please include a screenshot, when possible.
+
+Please check the fonts list archives before reporting problems to cut
+down on duplication.

Added: trunk/fonts/ttf-bitstream-vera-1.10/Vera.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/Vera.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraBI.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraBI.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraBd.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraBd.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraIt.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraIt.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraMoBI.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraMoBI.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraMoBd.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraMoBd.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraMoIt.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraMoIt.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraMono.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraMono.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraSe.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraSe.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/VeraSeBd.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10/VeraSeBd.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/fonts/ttf-bitstream-vera-1.10/local.conf
===================================================================
--- trunk/fonts/ttf-bitstream-vera-1.10/local.conf	2006-03-01 15:34:23 UTC (rev 172)
+++ trunk/fonts/ttf-bitstream-vera-1.10/local.conf	2006-03-03 00:10:10 UTC (rev 173)
@@ -0,0 +1,32 @@
+<?xml version="1.0"?>
+<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
+<!-- /etc/fonts.conf file to configure system font access -->
+<fontconfig>
+        <!--  Enable sub-pixel rendering
+        <match target="font">
+                <test qual="all" name="rgba">
+                        <const>unknown</const>
+                </test>
+                <edit name="rgba" mode="assign"><const>rgb</const></edit>
+        </match>
+         -->
+
+        <alias>
+                <family>serif</family>
+                <prefer>
+                        <family>Bitstream Vera Serif</family>
+                </prefer>
+        </alias>
+        <alias>
+                <family>sans-serif</family>
+                <prefer>
+                        <family>Bitstream Vera Sans</family>
+                </prefer>
+        </alias>
+        <alias>
+                <family>monospace</family>
+                <prefer>
+                        <family>Bitstream Vera Sans Mono</family>
+                </prefer>
+        </alias>
+</fontconfig>



From jdoyon at berlios.de  Fri Mar  3 01:19:31 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Fri, 3 Mar 2006 01:19:31 +0100
Subject: [Mapnik-svn] r174 - in trunk: . fonts
Message-ID: <200603030019.k230JVZP022740@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-03 01:18:08 +0100 (Fri, 03 Mar 2006)
New Revision: 174

Added:
   trunk/fonts/SConscript
Modified:
   trunk/SConstruct
Log:
Fix the build process to install the included free ttf fonts.



Modified: trunk/SConstruct
===================================================================
--- trunk/SConstruct	2006-03-03 00:10:10 UTC (rev 173)
+++ trunk/SConstruct	2006-03-03 00:18:08 UTC (rev 174)
@@ -156,3 +156,7 @@
 # Build the core library
 
 SConscript('src/SConscript')
+
+# Install some free default fonts
+
+SConscript('fonts/SConscript')

Added: trunk/fonts/SConscript
===================================================================
--- trunk/fonts/SConscript	2006-03-03 00:10:10 UTC (rev 173)
+++ trunk/fonts/SConscript	2006-03-03 00:18:08 UTC (rev 174)
@@ -0,0 +1,27 @@
+#  This file is part of Mapnik (c++ mapping toolkit)
+#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+#
+#  Mapnik is free software; you can redistribute it and/or
+#  modify it under the terms of the GNU General Public License
+#  as published by the Free Software Foundation; either version 2
+#  of the License, or any later version.
+# 
+#  This program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#  GNU General Public License for more details.
+# 
+#  You should have received a copy of the GNU General Public License
+#  along with this program; if not, write to the Free Software
+#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+# 
+# $Id$
+
+import glob
+
+Import('env')
+
+prefix = env['PREFIX']
+
+includes = glob.glob('*/*.ttf')
+env.Alias(target='install', source=env.Install(prefix+'/lib/mapnik/fonts', includes))



From pavlenko at berlios.de  Wed Mar  8 14:50:12 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 8 Mar 2006 14:50:12 +0100
Subject: [Mapnik-svn] r175 - trunk
Message-ID: <200603081350.k28DoCKc007004@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-08 14:49:59 +0100 (Wed, 08 Mar 2006)
New Revision: 175

Modified:
   trunk/SConstruct
Log:
link to boost_serialization lib



Modified: trunk/SConstruct
===================================================================
--- trunk/SConstruct	2006-03-03 00:18:08 UTC (rev 174)
+++ trunk/SConstruct	2006-03-08 13:49:59 UTC (rev 175)
@@ -70,7 +70,7 @@
 BOOST_LIBSHEADERS = [
     ['thread', 'boost/thread/mutex.hpp', True],
     ['filesystem', 'boost/filesystem/operations.hpp', True],
-    ['wserialization', ['boost/archive/text_oarchive.hpp',
+    ['serialization', ['boost/archive/text_oarchive.hpp',
                         'boost/archive/text_iarchive.hpp',
                         'boost/archive/xml_oarchive.hpp',
                         'boost/archive/xml_iarchive.hpp'], True
@@ -127,9 +127,9 @@
 # Setup the c++ args for our own codebase
 
 if env['DEBUG']:
-    env.Append(CXXFLAGS = '-Wall -ftemplate-depth-100 -O0 -fno-inline -g -pthread -DDEBUG')
+    env.Append(CXXFLAGS = '-ansi -Wall -ftemplate-depth-100 -O0 -fno-inline -g -pthread -DDEBUG')
 else:
-    env.Append(CXXFLAGS = '-Wall -ftemplate-depth-100 -O3 -finline-functions -Wno-inline -pthread -DNDEBUG')
+    env.Append(CXXFLAGS = '-ansi -Wall -ftemplate-depth-100 -O3 -finline-functions -Wno-inline -pthread -DNDEBUG')
 
 # Build agg first, doesn't need anything special
 



From pavlenko at berlios.de  Thu Mar  9 00:02:29 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Thu, 9 Mar 2006 00:02:29 +0100
Subject: [Mapnik-svn] r176 - in trunk: include plugins/input/postgis plugins/input/raster plugins/input/shape
Message-ID: <200603082302.k28N2TpR008831@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-09 00:02:28 +0100 (Thu, 09 Mar 2006)
New Revision: 176

Modified:
   trunk/include/geometry.hpp
   trunk/include/math_expr.hpp
   trunk/plugins/input/postgis/postgis.cpp
   trunk/plugins/input/raster/raster_datasource.cpp
   trunk/plugins/input/shape/shape.cpp
Log:
minor syntax corrections to comply with ansi c++



Modified: trunk/include/geometry.hpp
===================================================================
--- trunk/include/geometry.hpp	2006-03-08 13:49:59 UTC (rev 175)
+++ trunk/include/geometry.hpp	2006-03-08 23:02:28 UTC (rev 176)
@@ -33,7 +33,7 @@
     enum {
     	Point = 1,
     	LineString = 2,
-    	Polygon = 3,
+    	Polygon = 3
     };
              
     template <typename T>

Modified: trunk/include/math_expr.hpp
===================================================================
--- trunk/include/math_expr.hpp	2006-03-08 13:49:59 UTC (rev 175)
+++ trunk/include/math_expr.hpp	2006-03-08 23:02:28 UTC (rev 176)
@@ -120,7 +120,7 @@
 	expression<FeatureT>* left_;
 	expression<FeatureT>* right_;	
     }; 
-};
+}
 
 
 #endif //

Modified: trunk/plugins/input/postgis/postgis.cpp
===================================================================
--- trunk/plugins/input/postgis/postgis.cpp	2006-03-08 13:49:59 UTC (rev 175)
+++ trunk/plugins/input/postgis/postgis.cpp	2006-03-08 23:02:28 UTC (rev 176)
@@ -25,7 +25,7 @@
 #include <sstream>
 #include "connection_manager.hpp"
 
-DATASOURCE_PLUGIN(postgis_datasource);
+DATASOURCE_PLUGIN(postgis_datasource)
 
 const std::string postgis_datasource::GEOMETRY_COLUMNS="geometry_columns";
 const std::string postgis_datasource::SPATIAL_REF_SYS="spatial_ref_system";

Modified: trunk/plugins/input/raster/raster_datasource.cpp
===================================================================
--- trunk/plugins/input/raster/raster_datasource.cpp	2006-03-08 13:49:59 UTC (rev 175)
+++ trunk/plugins/input/raster/raster_datasource.cpp	2006-03-08 23:02:28 UTC (rev 176)
@@ -24,7 +24,7 @@
 #include "raster_info.hpp"
 #include <boost/lexical_cast.hpp>
 
-DATASOURCE_PLUGIN(raster_datasource);
+DATASOURCE_PLUGIN(raster_datasource)
 
 using std::cerr;
 using std::endl;

Modified: trunk/plugins/input/shape/shape.cpp
===================================================================
--- trunk/plugins/input/shape/shape.cpp	2006-03-08 13:49:59 UTC (rev 175)
+++ trunk/plugins/input/shape/shape.cpp	2006-03-08 23:02:28 UTC (rev 176)
@@ -24,7 +24,7 @@
 #include <iostream>
 #include <stdexcept>
 
-DATASOURCE_PLUGIN(shape_datasource);
+DATASOURCE_PLUGIN(shape_datasource)
 
 shape_datasource::shape_datasource(const parameters &params)
     : shape_name_(params.get("file")),



From pavlenko at berlios.de  Thu Mar  9 00:03:19 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Thu, 9 Mar 2006 00:03:19 +0100
Subject: [Mapnik-svn] r177 - trunk/src
Message-ID: <200603082303.k28N3JKZ008894@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-09 00:03:19 +0100 (Thu, 09 Mar 2006)
New Revision: 177

Modified:
   trunk/src/agg_renderer.cpp
Log:
fixed label bbox calc



Modified: trunk/src/agg_renderer.cpp
===================================================================
--- trunk/src/agg_renderer.cpp	2006-03-08 23:02:28 UTC (rev 176)
+++ trunk/src/agg_renderer.cpp	2006-03-08 23:03:19 UTC (rev 177)
@@ -277,13 +277,14 @@
 	    t_.forward_y(&y);
 	    int w=data.width();
 	    int h=data.height();
-	    if (detector_.has_placement(Envelope<double>(x - 0.5 * w,
-							     y - 0.5 * h,
-							     x + 0.5 * w,
-							     y + 0.5 * h)))
+	    
+	    if (detector_.has_placement(Envelope<double>(floor(x - 0.5 * w),
+							 floor(y - 0.5 * h),
+							 ceil (x + 0.5 * w),
+							 ceil (y + 0.5 * h))))
 	    {
-		int px=int(ceil(x - 0.5 * w));
-		int py=int(ceil(y - 0.5 * h));
+		int px=int(floor(x - 0.5 * w));
+		int py=int(floor(y - 0.5 * h));
 		pixmap_.set_rectangle_alpha(px,py,data);
 	    }
 	}
@@ -419,9 +420,6 @@
 		t_.forward_x(&x);
 		t_.forward_y(&y);
 
-		//x += 6; //TODO!!!
-		//y += 6; //TODO!!!
-
 		face_ptr face = font_manager_.get_face("Bitstream Vera Sans Roman");//TODO
 		//face_ptr face = font_manager_.get_face("Times New Roman Regular");//TODO
 		if (face)
@@ -445,7 +443,7 @@
 
 		    if (detector_.has_placement(text_box))
 		    {
-			ren.render(x - 0.5 * dim.first,y - 0.5 * dim.second);
+			ren.render(x - 0.5 * dim.first,y + 0.5 * dim.second);
 		    }
 		}
 	    }  



From pavlenko at berlios.de  Fri Mar 10 13:09:21 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Fri, 10 Mar 2006 13:09:21 +0100
Subject: [Mapnik-svn] r178 - in trunk: include src
Message-ID: <200603101209.k2AC9LAG015191@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-10 13:08:55 +0100 (Fri, 10 Mar 2006)
New Revision: 178

Added:
   trunk/src/text_symbolizer.cpp
Modified:
   trunk/include/line_symbolizer.hpp
   trunk/include/text_symbolizer.hpp
   trunk/src/SConscript
Log:
added anchor and displacement to text_symbolizer



Modified: trunk/include/line_symbolizer.hpp
===================================================================
--- trunk/include/line_symbolizer.hpp	2006-03-08 23:03:19 UTC (rev 177)
+++ trunk/include/line_symbolizer.hpp	2006-03-10 12:08:55 UTC (rev 178)
@@ -21,8 +21,6 @@
 #ifndef LINE_SYMBOLIZER_HPP
 #define LINE_SYMBOLIZER_HPP
 
-
-//#include "symbolizer.hpp"
 #include "stroke.hpp"
 
 namespace mapnik 

Modified: trunk/include/text_symbolizer.hpp
===================================================================
--- trunk/include/text_symbolizer.hpp	2006-03-08 23:03:19 UTC (rev 177)
+++ trunk/include/text_symbolizer.hpp	2006-03-10 12:08:55 UTC (rev 178)
@@ -21,6 +21,10 @@
 #ifndef TEXT_SYMBOLIZER_HPP
 #define TEXT_SYMBOLIZER_HPP
 
+#include <string>
+#include <boost/tuple/tuple.hpp>
+#include "color.hpp"
+
 namespace mapnik
 {
     enum label_placement_e {
@@ -28,73 +32,27 @@
 	line_placement=2
     };
         
+    typedef boost::tuple<double,double> position;
+    
     struct text_symbolizer
     {		
-	text_symbolizer(std::string const& name,unsigned size,Color const& fill)
-	    : name_(name),
-	      size_(size),
-	      fill_(fill),
-	      halo_fill_(Color(255,255,255)),
-	      halo_radius_(0),
-	      label_p_(point_placement) {}
+	text_symbolizer(std::string const& name,unsigned size,Color const& fill);	
+	text_symbolizer(text_symbolizer const& rhs);
+	text_symbolizer& operator=(text_symbolizer const& rhs);
+	std::string const& get_name() const;
+	unsigned get_text_size() const;
+	Color const& get_fill() const;
+	void set_halo_fill(Color const& fill);
+	Color const& get_halo_fill() const;
+	void set_halo_radius(unsigned radius);
+	unsigned get_halo_radius() const;
+	void set_label_placement(label_placement_e label_p);
+	label_placement_e get_label_placement() const;
+        void set_anchor(double x, double y);	
+	position const& get_anchor() const;	
+	void set_displacement(double x, double y);
+	position const& get_displacement() const;
 	
-	text_symbolizer(text_symbolizer const& rhs)
-	    : name_(rhs.name_),
-	      size_(rhs.size_),
-	      fill_(rhs.fill_),
-	      halo_fill_(rhs.halo_fill_),
-	      halo_radius_(rhs.halo_radius_),
-	      label_p_(rhs.label_p_) {}
-	
-	~text_symbolizer()
-	{
-	    //
-	}
-	std::string const& get_name() const
-	{
-	    return name_;
-	}
-	
-	unsigned get_text_size() const
-	{
-	    return size_;
-	}
-	
-	Color const& get_fill() const
-	{
-	    return fill_;
-	}
-	
-	void set_halo_fill(Color const& fill)
-	{
-	    halo_fill_ = fill;
-	}
-
-	Color const& get_halo_fill() const
-	{
-	    return halo_fill_;
-	}
-	
-	void set_halo_radius(unsigned radius)
-	{
-	    halo_radius_ = radius;
-	}
-	
-	unsigned get_halo_radius() const
-	{
-	    return halo_radius_;
-	}
-	
-	void set_label_placement(label_placement_e label_p)
-	{
-	    label_p_ = label_p;
-	}
-	
-	label_placement_e get_label_placement() const
-	{
-	    return label_p_;
-	}
-	
     private:
 	std::string name_;
 	unsigned size_;
@@ -102,6 +60,8 @@
 	Color halo_fill_;
 	unsigned halo_radius_;
 	label_placement_e label_p_;
+	position anchor_;
+	position displacement_;
     };
 }
 

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-03-08 23:03:19 UTC (rev 177)
+++ trunk/src/SConscript	2006-03-10 12:08:55 UTC (rev 178)
@@ -48,10 +48,11 @@
     point_symbolizer.cpp
     polygon_pattern_symbolizer.cpp
     line_pattern_symbolizer.cpp
+    text_symbolizer.cpp
     font_engine_freetype.cpp
     """
     )
-#render.cpp
+
 #line_symbolizer.cpp
 #    line_pattern_symbolizer.cpp
 #    polygon_symbolizer.cpp

Added: trunk/src/text_symbolizer.cpp
===================================================================
--- trunk/src/text_symbolizer.cpp	2006-03-08 23:03:19 UTC (rev 177)
+++ trunk/src/text_symbolizer.cpp	2006-03-10 12:08:55 UTC (rev 178)
@@ -0,0 +1,122 @@
+/* This file is part of Mapnik (c++ mapping toolkit)
+ * Copyright (C) 2005 Artem Pavlenko
+ *
+ * Mapnik is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+
+//$Id$
+
+#include "text_symbolizer.hpp"
+
+namespace mapnik
+{
+    text_symbolizer::text_symbolizer(std::string const& name,unsigned size,Color const& fill)
+	: name_(name),
+	  size_(size),
+	  fill_(fill),
+	  halo_fill_(Color(255,255,255)),
+	  halo_radius_(0),
+	  label_p_(point_placement),
+	  anchor_(0.0,0.5),
+	  displacement_(0.0,0.0)  {}
+           
+    text_symbolizer::text_symbolizer(text_symbolizer const& rhs)
+	: name_(rhs.name_),
+	  size_(rhs.size_),
+	  fill_(rhs.fill_),
+	  halo_fill_(rhs.halo_fill_),
+	  halo_radius_(rhs.halo_radius_),
+	  label_p_(rhs.label_p_),
+	  anchor_(rhs.anchor_),
+	  displacement_(rhs.displacement_) {}
+
+    text_symbolizer& text_symbolizer::operator=(text_symbolizer const& other)
+    {
+	if (this == &other)
+	    return *this;
+	name_ = other.name_;
+	size_ = other.size_;
+	fill_ = other.fill_;
+	halo_fill_ = other.halo_fill_;
+	label_p_ = other.label_p_;
+	anchor_ = other.anchor_;
+	displacement_ = other.displacement_; 
+	return *this;
+    } 
+
+    std::string const&  text_symbolizer::get_name() const
+    {
+	return name_;
+    }
+    
+    unsigned  text_symbolizer::get_text_size() const
+    {
+	return size_;
+    }
+	
+    Color const&  text_symbolizer::get_fill() const
+    {
+	return fill_;
+    }
+	
+    void  text_symbolizer::set_halo_fill(Color const& fill)
+    {
+	halo_fill_ = fill;
+    }
+
+    Color const&  text_symbolizer::get_halo_fill() const
+    {
+	return halo_fill_;
+    }
+	
+    void  text_symbolizer::set_halo_radius(unsigned radius)
+    {
+	halo_radius_ = radius;
+    }
+	
+    unsigned  text_symbolizer::get_halo_radius() const
+    {
+	return halo_radius_;
+    }
+	
+    void  text_symbolizer::set_label_placement(label_placement_e label_p)
+    {
+	label_p_ = label_p;
+    }
+	
+    label_placement_e  text_symbolizer::get_label_placement() const
+    {
+	return label_p_;
+    }
+
+    void  text_symbolizer::set_anchor(double x, double y)
+    {
+	anchor_ = boost::make_tuple(x,y);
+    }
+    
+    position const& text_symbolizer::get_anchor () const
+    {
+	return anchor_;
+    }
+    void  text_symbolizer::set_displacement(double x, double y)
+    {
+	displacement_ = boost::make_tuple(x,y);
+    }
+    
+    position const&  text_symbolizer::get_displacement() const
+    {
+	return displacement_;
+    }
+}



From pavlenko at berlios.de  Sun Mar 19 22:51:40 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Sun, 19 Mar 2006 22:51:40 +0100
Subject: [Mapnik-svn] r179 - in trunk: include src
Message-ID: <200603192151.k2JLpeah000165@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-19 22:51:40 +0100 (Sun, 19 Mar 2006)
New Revision: 179

Removed:
   trunk/include/text.hpp
   trunk/src/text.cpp
Log:
removed unused text.{hpp,cpp}

Deleted: trunk/include/text.hpp
===================================================================
--- trunk/include/text.hpp	2006-03-10 12:08:55 UTC (rev 178)
+++ trunk/include/text.hpp	2006-03-19 21:51:40 UTC (rev 179)
@@ -1,51 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: text.hpp 39 2005-04-10 20:39:53Z pavlenko $
-
-#ifndef TEXT_HPP
-#define TEXT_HPP
-
-#ifdef __HAVE_FREETYPE2__ //TODO:: fix configure.ac AP_CHECK_FREETYPE2
- 
-#include <ft2build.h>
-#include FT_FREETYPE_H
-#include <iostream>
-#include <string>
-#include "graphics.hpp"
-
-namespace mapnik
-{
-    template <typename PixBuffer> class TextRasterizer
-    {
-        private:
-            PixBuffer* pixbuf_;
-            std::string fontName_;
-        public:
-            TextRasterizer(PixBuffer& pixbuf,const char* fontName)
-		: pixbuf_(&pixbuf),
-		  fontName_(fontName) {}
-            void render(const char* text);
-        private:
-            TextRasterizer(const TextRasterizer&);
-            TextRasterizer& operator=(const TextRasterizer&);
-            void render_bitmap(FT_Bitmap *bitmap,int x,int y);
-    };
-}
-#endif
-#endif                                            //TEXT_HPP

Deleted: trunk/src/text.cpp
===================================================================
--- trunk/src/text.cpp	2006-03-10 12:08:55 UTC (rev 178)
+++ trunk/src/text.cpp	2006-03-19 21:51:40 UTC (rev 179)
@@ -1,95 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: text.cpp 17 2005-03-08 23:58:43Z pavlenko $
-
-#include "text.hpp"
-
-#ifdef __HAVE_FREETYPE2__
-namespace mapnik
-{
-    using namespace std;
-    template <class PixBuffer>
-        void TextRasterizer<PixBuffer>::render(const char* text)
-    {
-        FT_Library library;
-        FT_Face face;
-        FT_Error  error;
-        error = FT_Init_FreeType( &library );
-        if (error)
-        {
-            cout<<"an error occurred during library initialization\n";
-            return;
-        }
-        error = FT_New_Face( library, fontName_.c_str(), 0, &face );
-        if (error == FT_Err_Unknown_File_Format )
-        {
-            cout<<"the font file could be opened and read, but it appears\n";
-            cout<<"that its font format is unsupported"<<endl;
-            return;
-        }
-        else if ( error )
-        {
-            cout<<"font file could not be opened or read, or simply that it is broken\n";
-            return;
-        }
-        error = FT_Set_Pixel_Sizes(face,24,0);
-        FT_GlyphSlot slot = face->glyph;
-        int x=40,y=200;
-        int len=strlen(text);
-        for (int i=0;i<len;++i)
-        {
-            FT_UInt glyph_index;
-            glyph_index = FT_Get_Char_Index(face,text[i]);
-            error=FT_Load_Glyph(face,glyph_index,FT_LOAD_DEFAULT);
-            if (error) continue;
-            error=FT_Render_Glyph( face->glyph,FT_RENDER_MODE_NORMAL);
-            if (error) continue;
-            render_bitmap(&slot->bitmap,x+slot->bitmap_left,y-slot->bitmap_top);
-            x+=slot->advance.x>>6;
-            y+=slot->advance.y>>6;
-        }
-        FT_Done_Face(face);
-        FT_Done_FreeType(library);
-    }
-
-    template <class PixBuffer>
-    void TextRasterizer<PixBuffer>::render_bitmap(FT_Bitmap *bitmap,int x,int y)
-    {
-        int x_max=x+bitmap->width;
-        int y_max=y+bitmap->rows;
-        int i,p,j,q;
-
-        Color c(255,200,120);
-        for (i=x,p=0;i<x_max;++i,++p)
-        {
-            for (j=y,q=0;j<y_max;++j,++q)
-            {
-                int gray=bitmap->buffer[q*bitmap->width+p];
-                if (gray)
-                {
-                    pixbuf_->blendPixel(i,j,c.rgba(),gray);
-                }
-            }
-        }
-    }
-
-    template class TextRasterizer<Image32>;
-}
-
-#endif



From pavlenko at berlios.de  Sun Mar 19 22:53:48 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Sun, 19 Mar 2006 22:53:48 +0100
Subject: [Mapnik-svn] r180 - in trunk: include plugins/input/postgis plugins/input/raster plugins/input/shape src
Message-ID: <200603192153.k2JLrmqt000298@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-19 22:53:47 +0100 (Sun, 19 Mar 2006)
New Revision: 180

Modified:
   trunk/include/feature_layer_desc.hpp
   trunk/include/filter_factory.hpp
   trunk/include/filter_parser.hpp
   trunk/include/filter_parser_ast.hpp
   trunk/include/font_engine_freetype.hpp
   trunk/include/geometry.hpp
   trunk/include/pool.hpp
   trunk/include/utils.hpp
   trunk/plugins/input/postgis/connection.hpp
   trunk/plugins/input/postgis/postgis.cpp
   trunk/plugins/input/postgis/postgisfs.cpp
   trunk/plugins/input/raster/raster_datasource.cpp
   trunk/plugins/input/raster/raster_featureset.cpp
   trunk/plugins/input/shape/shape.cpp
   trunk/plugins/input/shape/shape_featureset.cpp
   trunk/plugins/input/shape/shape_index_featureset.cpp
   trunk/src/SConscript
   trunk/src/agg_renderer.cpp
   trunk/src/datasource_cache.cpp
   trunk/src/layer.cpp
   trunk/src/line_pattern_symbolizer.cpp
   trunk/src/memory.cpp
   trunk/src/png_reader.cpp
   trunk/src/point_symbolizer.cpp
   trunk/src/polygon_pattern_symbolizer.cpp
   trunk/src/render.cpp
   trunk/src/tiff_reader.cpp
Log:
replaced cout and cerr with clog (by default redirected to cerr)



Modified: trunk/include/feature_layer_desc.hpp
===================================================================
--- trunk/include/feature_layer_desc.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/feature_layer_desc.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -21,8 +21,6 @@
 #ifndef FEATURE_LAYER_DESC_HPP
 #define FEATURE_LAYER_DESC_HPP
 
-//#include "array.hpp"
-
 #include <string>
 #include <vector>
 #include <iostream>
@@ -32,8 +30,7 @@
     
     using std::string;
     using std::vector;
-    using std::cout;
-    using std::cerr;
+    using std::clog;
     using std::endl;
     
     enum {
@@ -231,7 +228,7 @@
 	{
 	    string name = wkb+pos;
 	    pos += name.size()+1;
-	    //std::cout<<"name="<<name<<"\n";
+	    //std::clog<<"name="<<name<<"\n";
 	    
 	    int type;
 	    memcpy(&type,wkb+pos,sizeof(int));

Modified: trunk/include/filter_factory.hpp
===================================================================
--- trunk/include/filter_factory.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/filter_factory.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -16,6 +16,8 @@
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
 
+//#include "array.hpp"
+
 //$Id$
 
 #ifndef FILTER_FACTORY_HPP
@@ -44,7 +46,7 @@
 	    }
 	    else 
 	    {
-		cerr << "failed at :" << info.stop << "\n";
+		clog << "failed at :" << info.stop << "\n";
 		return filter_ptr(new none_filter<FeatureT>());
 	    }  
 	}

Modified: trunk/include/filter_parser.hpp
===================================================================
--- trunk/include/filter_parser.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/filter_parser.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -39,7 +39,7 @@
 
 using namespace boost::spirit;
 using std::string;
-using std::cerr;
+using std::clog;
 using std::stack;
 
 namespace mapnik
@@ -154,7 +154,7 @@
 		    }
 		    catch (...)//boost::regex_error& ex)
 		    {
-		      cerr<<"error\n";//ex.what()<<"\n";
+		      clog<<"error\n";//ex.what()<<"\n";
 		    }
 		    
 		}

Modified: trunk/include/filter_parser_ast.hpp
===================================================================
--- trunk/include/filter_parser_ast.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/filter_parser_ast.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -162,10 +162,10 @@
     
     void process_node(iter_t const& i,string& text)
     {
-	//cout << "In eval_expression. i->value = " <<
+	//clog << "In eval_expression. i->value = " <<
 	//   string(i->value.begin(), i->value.end()) <<
 	//   " i->children.size() = " << i->children.size() << endl;
-	//std::cout<<typeid(*i).name()<<"\n";
+	//std::clog<<typeid(*i).name()<<"\n";
 
 	if (i->value.id() == filter_grammar_ast::integerID)
 	{	

Modified: trunk/include/font_engine_freetype.hpp
===================================================================
--- trunk/include/font_engine_freetype.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/font_engine_freetype.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -82,7 +82,7 @@
 	
     	~font_face()
     	{
-    	    std::cout << "clean up face:" << family_name()<<":" << style_name() << std::endl;
+    	    std::clog << "clean up face:" << family_name()<<":" << style_name() << std::endl;
     	    FT_Done_Face(face_);
     	}
 	

Modified: trunk/include/geometry.hpp
===================================================================
--- trunk/include/geometry.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/geometry.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -53,8 +53,27 @@
 	    return srid_;
 	}
 	
+	Envelope<double> envelope()
+	{
+	    Envelope<double> result;		
+	    double x,y;
+	    for (unsigned i=0;i<num_points();++i)
+	    {
+		vertex(&x,&y);
+		if (i==0)
+		{
+		    result.init(x,y,x,y);
+		}
+		else
+		{
+		    result.expand_to_include(x,y);
+		}
+	    }
+	    return result;
+	}
+
 	virtual int type() const=0;
-	virtual bool hit_test(value_type x,value_type y) const=0;
+	virtual bool hit_test(value_type x,value_type y) const=0;	
 	virtual void label_position(double *x, double *y) const=0;
 	virtual void move_to(value_type x,value_type y)=0;
 	virtual void line_to(value_type x,value_type y)=0;
@@ -148,21 +167,27 @@
 	
 	void label_position(double *x, double *y) const
 	{
+	    
 	    unsigned size = cont_.size();
 	    if (size < 3) 
 	    {
 		cont_.get_vertex(0,x,y);
 		return;
 	    }
-	    
-	    value_type x0,y0,x1,y1;
+	      
 	    double ai;
 	    double atmp = 0;
 	    double xtmp = 0;
 	    double ytmp = 0;
+	    double x0 =0;
+	    double y0 =0;
+	    double x1 =0;
+	    double y1 =0;
+	    
 	    unsigned i,j;
 	    for (i = size-1,j = 0; j < size; i = j, ++j)
 	    {
+		
 		cont_.get_vertex(i,&x0,&y0);
 		cont_.get_vertex(j,&x1,&y1);
 		ai = x0 * y1 - x1 * y0;
@@ -248,6 +273,11 @@
         void label_position(double *x, double *y) const
 	{
 	    // calculate mid point on line string
+	    double x0=0;
+	    double y0=0;
+	    double x1=0;
+	    double y1=0;
+	    
 	    unsigned size = cont_.size();
 	    if (size == 1)
 	    {
@@ -255,10 +285,7 @@
 	    }
 	    else if (size == 2)
 	    {
-		double x0;
-		double y0;
-		double x1;
-		double y1;
+
 		cont_.get_vertex(0,&x0,&y0);
 		cont_.get_vertex(1,&x1,&y1);
 		*x = 0.5 * (x1 + x0);
@@ -266,10 +293,6 @@
 	    }
 	    else
 	    {
-		double x0;
-		double y0;
-		double x1;
-		double y1;
 		double len=0.0;
 		for (unsigned pos = 1; pos < size; ++pos)
 		{

Modified: trunk/include/pool.hpp
===================================================================
--- trunk/include/pool.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/pool.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -85,7 +85,7 @@
 	    typename ContType::iterator itr=unusedPool_.begin();
 	    if (itr!=unusedPool_.end())
 	    {  
-		std::cout<<"borrow "<<(*itr).get()<<"\n";
+		std::clog<<"borrow "<<(*itr).get()<<"\n";
 		usedPool_.push_back(*itr);
 		itr=unusedPool_.erase(itr);
 		return usedPool_[usedPool_.size()-1];
@@ -102,7 +102,7 @@
 	    {
 		if (obj.get()==(*itr).get()) 
 		{
-		    std::cout<<"return "<<(*itr).get()<<"\n";
+		    std::clog<<"return "<<(*itr).get()<<"\n";
 		    unusedPool_.push_back(*itr);
 		    usedPool_.erase(itr);
 		    return;

Modified: trunk/include/utils.hpp
===================================================================
--- trunk/include/utils.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/include/utils.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -184,7 +184,7 @@
             long sec=1000*(tv.tv_sec-tv_.tv_sec);
             long total_ms=sec+static_cast<long>(0.001*(tv.tv_usec-tv_.tv_usec));
             s << "elapsed time is "<<total_ms<<" ms";
-            std::cout<<s.str()<<std::endl;
+            std::clog<<s.str()<<std::endl;
         }
     };
     

Modified: trunk/plugins/input/postgis/connection.hpp
===================================================================
--- trunk/plugins/input/postgis/connection.hpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/postgis/connection.hpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -41,12 +41,12 @@
 	conn_=PQconnectdb(connStr.c_str());
 	if (PQstatus(conn_) == CONNECTION_BAD)
 	{
-	    std::cerr << "connection to "<< connStr << " failed\n"
+	    std::clog << "connection to "<< connStr << " failed\n"
 		      << PQerrorMessage(conn_)<< std::endl;
 	}
 	else
 	{
-	    std::cout <<"connected ok "<<std::endl;
+	    std::clog <<"connected ok "<<std::endl;
 	}
     }
     bool execute(const std::string& sql) const

Modified: trunk/plugins/input/postgis/postgis.cpp
===================================================================
--- trunk/plugins/input/postgis/postgis.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/postgis/postgis.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -30,8 +30,8 @@
 const std::string postgis_datasource::GEOMETRY_COLUMNS="geometry_columns";
 const std::string postgis_datasource::SPATIAL_REF_SYS="spatial_ref_system";
 
-using std::cerr;
-using std::cout;
+using std::clog;
+using std::clog;
 using std::endl;
 
 using boost::lexical_cast;
@@ -76,7 +76,7 @@
 		}
 		catch (bad_lexical_cast &ex)
 		{
-		    cerr << ex.what() << endl;
+		    clog << ex.what() << endl;
 		}
 		geometryColumn_=rs->getValue("f_geometry_column");
 		std::string postgisType=rs->getValue("type");
@@ -99,7 +99,7 @@
 		}
 		catch (bad_lexical_cast &ex)
 		{
-		    cerr << ex.what() << endl;
+		    clog << ex.what() << endl;
 		}
 	    }
 	    rs->close();
@@ -133,7 +133,7 @@
 			desc_.add_descriptor(attribute_descriptor(fld_name,String));
 			break;
 		    default: // shouldn't get here
-			cout << "unknown type_oid="<<type_oid<<endl;
+			clog << "unknown type_oid="<<type_oid<<endl;
 			desc_.add_descriptor(attribute_descriptor(fld_name,String));
 			break;
 		    }	  
@@ -201,7 +201,7 @@
 	    s << " from " << table_<<" where "<<geometryColumn_<<" && setSRID('BOX3D(";
 	    s << box.minx() << " " << box.miny() << ",";
 	    s << box.maxx() << " " << box.maxy() << ")'::box3d,"<<srid_<<")";
-	    cout << s.str() << endl;
+	    clog << s.str() << endl;
 	    shared_ptr<ResultSet> rs=conn->executeQuery(s.str(),1);
 	    fs=new postgis_featureset(rs,props.size());
 	}

Modified: trunk/plugins/input/postgis/postgisfs.cpp
===================================================================
--- trunk/plugins/input/postgis/postgisfs.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/postgis/postgisfs.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -95,8 +95,8 @@
     else
     {
         rs_->close();
-        std::cout << "totalGeomSize="<<totalGeomSize_<<" bytes"<<std::endl;
-        std::cout << "count="<<count_<<std::endl;
+        std::clog << "totalGeomSize="<<totalGeomSize_<<" bytes"<<std::endl;
+        std::clog << "count="<<count_<<std::endl;
 	return feature_ptr();
     }
 }

Modified: trunk/plugins/input/raster/raster_datasource.cpp
===================================================================
--- trunk/plugins/input/raster/raster_datasource.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/raster/raster_datasource.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -26,7 +26,7 @@
 
 DATASOURCE_PLUGIN(raster_datasource)
 
-using std::cerr;
+using std::clog;
 using std::endl;
 using boost::lexical_cast;
 using boost::bad_lexical_cast;
@@ -47,7 +47,7 @@
     }
     catch (bad_lexical_cast& ex)
     {
-	cerr << ex.what() << endl;
+	clog << ex.what() << endl;
     }  
 }
 

Modified: trunk/plugins/input/raster/raster_featureset.cpp
===================================================================
--- trunk/plugins/input/raster/raster_featureset.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/raster/raster_featureset.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -42,9 +42,9 @@
 	feature_ptr feature(new Feature(+id_));
         try
         {
-	    std::cout<<"raster_featureset "<<curIter_->format()<<" "<<curIter_->file()<<std::endl;
+	    std::clog<<"raster_featureset "<<curIter_->format()<<" "<<curIter_->file()<<std::endl;
             std::auto_ptr<ImageReader> reader(get_image_reader(curIter_->format(),curIter_->file()));
-	    std::cout<<reader.get()<<std::endl;
+	    std::clog<<reader.get()<<std::endl;
 	    if (reader.get())
             {
                 int image_width=reader->width();

Modified: trunk/plugins/input/shape/shape.cpp
===================================================================
--- trunk/plugins/input/shape/shape.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/shape/shape.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -65,7 +65,7 @@
 		}
 	    default:
 		//
-		std::cout << "uknown type "<<fd.type_<<"\n";
+		std::clog << "uknown type "<<fd.type_<<"\n";
 		break;
 		
 	    }
@@ -73,7 +73,7 @@
     }
     catch  (datasource_exception& ex)
     {
-        std::cerr<<ex.what()<<std::endl;
+        std::clog<<ex.what()<<std::endl;
         throw;
     }
 }
@@ -115,9 +115,9 @@
 	file.close();
     }
 
-    std::cout<<extent_<<std::endl;
-    std::cout<<"file_length="<<file_length_<<std::endl;
-    std::cout<<"shape_type="<<shape_type<<std::endl;
+    std::clog << extent_ << std::endl;
+    std::clog << "file_length=" << file_length_ << std::endl;
+    std::clog << "shape_type=" << shape_type << std::endl;
 }
 
 

Modified: trunk/plugins/input/shape/shape_featureset.cpp
===================================================================
--- trunk/plugins/input/shape/shape_featureset.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/shape/shape_featureset.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -166,7 +166,7 @@
 		}
 		catch (...)
 		{
-		    std::cerr << "error processing attributes " << std::endl;
+		    std::clog << "error processing attributes " << std::endl;
 		}
 		++pos;
 	    }
@@ -175,7 +175,7 @@
     }
     else
     {
-	std::cout<<" total shapes read="<<count_<<"\n";
+	std::clog<<" total shapes read="<<count_<<"\n";
 	return feature_ptr();
     }
 }

Modified: trunk/plugins/input/shape/shape_index_featureset.cpp
===================================================================
--- trunk/plugins/input/shape/shape_index_featureset.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/plugins/input/shape/shape_index_featureset.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -39,7 +39,7 @@
         shp_index<filterT>::query(filter,file,ids_);
         file.close();
     }
-    std::cout<< "query size=" << ids_.size() << "\n";
+    std::clog<< "query size=" << ids_.size() << "\n";
     itr_ = ids_.begin();
 
     // deal with attributes
@@ -168,7 +168,7 @@
 		}
 		catch (...)
 		{
-		    std::cerr<<"exception caught\n";
+		    std::clog<<"exception caught\n";
 		}
 		++pos;
 	    }
@@ -177,7 +177,7 @@
     }
     else
     {
-	std::cout<<count_<<" features\n";
+	std::clog<<count_<<" features\n";
 	return feature_ptr();
     }
 }

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/SConscript	2006-03-19 21:53:47 UTC (rev 180)
@@ -41,7 +41,6 @@
     params.cpp
     plugin.cpp
     png_reader.cpp
-    text.cpp
     tiff_reader.cpp
     wkb.cpp
     agg_renderer.cpp

Modified: trunk/src/agg_renderer.cpp
===================================================================
--- trunk/src/agg_renderer.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/agg_renderer.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -87,31 +87,31 @@
     {
 	Color const& bg=m.getBackground();
 	pixmap_.setBackground(bg);
-	std::cout << "scale="<<m.scale()<<std::endl;
+	std::clog << "scale="<<m.scale()<<std::endl;
     }
     
     template <typename T>
     void agg_renderer<T>::start_map_processing(Map const& map)
     {
-	std::cout << "start map processing bbox=" << map.getCurrentExtent() <<  std::endl;
+	std::clog << "start map processing bbox=" << map.getCurrentExtent() <<  std::endl;
     }
 
     template <typename T>
     void agg_renderer<T>::end_map_processing(Map const& )
     {
-	std::cout << "end map processing" << std::endl;
+	std::clog << "end map processing" << std::endl;
     }
     
     template <typename T>
     void agg_renderer<T>::start_layer_processing(Layer const& lay)
     {
-	std::cout << "start layer processing : " << lay.name()  << std::endl;
+	std::clog << "start layer processing : " << lay.name()  << std::endl;
     }
     
     template <typename T>
     void agg_renderer<T>::end_layer_processing(Layer const&)
     {
-	std::cout << "end layer processing" << std::endl;
+	std::clog << "end layer processing" << std::endl;
     }
     
     template <typename T>	
@@ -300,7 +300,7 @@
 	typedef agg::rasterizer_outline_aa<renderer_type> rasterizer_type;
 
 	geometry_ptr const& geom=feature.get_geometry();
-	if (geom)
+	if (geom && geom->num_points() > 1)
 	{
 	    unsigned width = pixmap_.width();
 	    unsigned height = pixmap_.height();
@@ -336,7 +336,7 @@
 	    agg::span_allocator<agg::rgba8>,
 	    span_gen_type> renderer_type;  
 	geometry_ptr const& geom=feature.get_geometry();
-	if (geom)
+	if (geom && geom->num_points() > 2)
 	{
 	    ImageData32 const& pattern = sym.get_pattern();
 	    

Modified: trunk/src/datasource_cache.cpp
===================================================================
--- trunk/src/datasource_cache.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/datasource_cache.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -1,4 +1,4 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
+ /* This file is part of Mapnik (c++ mapping toolkit)
  * Copyright (C) 2005 Artem Pavlenko
  *
  * Mapnik is free software; you can redistribute it and/or
@@ -58,7 +58,7 @@
                     create_ds* create_datasource = (create_ds*) lt_dlsym(itr->second->handle(), "create");
                     if (!create_datasource)
                     {
-                        std::cerr << "Cannot load symbols: " << lt_dlerror() << std::endl;
+                        std::clog << "Cannot load symbols: " << lt_dlerror() << std::endl;
                     }
                     else
                     {
@@ -67,18 +67,18 @@
                 }
                 else
                 {
-                    std::cerr << "Cannot load library: " << "  "<< lt_dlerror() << std::endl;
+                    std::clog << "Cannot load library: " << "  "<< lt_dlerror() << std::endl;
                 }
             }
-            std::cout<<"datasource="<<ds<<" type="<<type<<std::endl;
+            std::clog<<"datasource="<<ds<<" type="<<type<<std::endl;
         }
 	catch (datasource_exception& ex)
 	{
-	    std::cerr<<ex.what()<<std::endl;
+	    std::clog<<ex.what()<<std::endl;
 	}
         catch (...)
         {
-            std::cerr<<"exception caught "<<std::endl;
+            std::clog<<"exception caught "<<std::endl;
         }
         return ds;
     }
@@ -106,13 +106,13 @@
 			datasource_name* ds_name = (datasource_name*) lt_dlsym(module, "datasource_name");
 			if (ds_name && insert(ds_name(),module))
 			{                           
-			    std::cout<<"registered datasource : "<<ds_name()<<std::endl;
+			    std::clog<<"registered datasource : "<<ds_name()<<std::endl;
 			    registered_=true;
 			}
 		    }
 		    else
 		    {
-			std::cerr<<lt_dlerror()<<std::endl;
+			std::clog<<lt_dlerror()<<std::endl;
 		    }
                 }
             }   

Modified: trunk/src/layer.cpp
===================================================================
--- trunk/src/layer.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/layer.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -154,7 +154,7 @@
 	    }
 	    catch (...)
 	    {
-		std::cerr << "exception caught : can not create datasorce" << std::endl;  
+		std::clog << "exception caught : can not create datasorce" << std::endl;  
 	    }
 	}
 	return ds_;

Modified: trunk/src/line_pattern_symbolizer.cpp
===================================================================
--- trunk/src/line_pattern_symbolizer.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/line_pattern_symbolizer.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -37,7 +37,7 @@
 	} 
 	catch (...) 
 	{
-	    std::cerr << "exception caught..." << std::endl;
+	    std::clog << "exception caught..." << std::endl;
 	}
     }
 

Modified: trunk/src/memory.cpp
===================================================================
--- trunk/src/memory.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/memory.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -47,7 +47,7 @@
 
     void Object::operator delete(void* p, MemoryManager* manager)
     {
-        std::cout <<"operator delete with Manager "<<std::hex<<p<<" "<<manager<<std::endl;
+        std::clog <<"operator delete with Manager "<<std::hex<<p<<" "<<manager<<std::endl;
     }
 
     inline size_t MemoryUtils::alignPointerSize(size_t ptrSize)

Modified: trunk/src/png_reader.cpp
===================================================================
--- trunk/src/png_reader.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/png_reader.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -66,7 +66,7 @@
 	} 
 	catch (const ImageReaderException& e) 
 	{
-	    std::cerr<<e.what()<<std::endl;
+	    std::clog<<e.what()<<std::endl;
 	    throw;
 	}
     }
@@ -112,7 +112,7 @@
 	width_=width;
 	height_=height;
 	
-	std::cout<<"bit_depth="<<bit_depth_<<" color_type="<<color_type_<<std::endl;
+	std::clog<<"bit_depth="<<bit_depth_<<" color_type="<<color_type_<<std::endl;
 	png_destroy_read_struct(&png_ptr,&info_ptr,0);	
 	fclose(fp);
     }

Modified: trunk/src/point_symbolizer.cpp
===================================================================
--- trunk/src/point_symbolizer.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/point_symbolizer.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -36,7 +36,7 @@
 	} 
 	catch (...) 
 	{
-	    std::cerr<<"exception caught..." << std::endl;
+	    std::clog<<"exception caught..." << std::endl;
 	}
     }
     

Modified: trunk/src/polygon_pattern_symbolizer.cpp
===================================================================
--- trunk/src/polygon_pattern_symbolizer.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/polygon_pattern_symbolizer.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -36,7 +36,7 @@
 	} 
 	catch (...) 
 	{
-	    std::cerr<<"exception caught..."<<std::endl;
+	    std::clog<<"exception caught..."<<std::endl;
 	}
     }
     polygon_pattern_symbolizer::polygon_pattern_symbolizer(polygon_pattern_symbolizer const& rhs)

Modified: trunk/src/render.cpp
===================================================================
--- trunk/src/render.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/render.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -163,9 +163,9 @@
         timer clock;
         //////////////////////////////////////////////////////
 	Envelope<double> const& extent=map.getCurrentExtent();
-	std::cout<<"BBOX:"<<extent<<std::endl;
+	std::clog<<"BBOX:"<<extent<<std::endl;
         double scale=map.scale();
-        std::cout<<" scale="<<scale<<std::endl;
+        std::clog<<" scale="<<scale<<std::endl;
         
 	unsigned width=map.getWidth();
         unsigned height=map.getHeight();

Modified: trunk/src/tiff_reader.cpp
===================================================================
--- trunk/src/tiff_reader.cpp	2006-03-19 21:51:40 UTC (rev 179)
+++ trunk/src/tiff_reader.cpp	2006-03-19 21:53:47 UTC (rev 180)
@@ -81,7 +81,7 @@
 	}
 	catch (ImageReaderException& ex)
 	{
-	    std::cerr<<ex.what()<<std::endl;
+	    std::clog<<ex.what()<<std::endl;
 	    throw;
 	}
     }
@@ -157,7 +157,7 @@
 	TIFF* tif = TIFFOpen(file_name_.c_str(), "r");
 	if (tif)
 	{
-	    std::cerr<<"TODO:tiff is not stripped or tiled\n";
+	    std::clog<<"TODO:tiff is not stripped or tiled\n";
 	    TIFFClose(tif);
 	}
     }



From pavlenko at berlios.de  Sun Mar 19 22:54:40 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Sun, 19 Mar 2006 22:54:40 +0100
Subject: [Mapnik-svn] r181 - trunk/utils/shapeindex
Message-ID: <200603192154.k2JLseL9000408@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-19 22:54:40 +0100 (Sun, 19 Mar 2006)
New Revision: 181

Modified:
   trunk/utils/shapeindex/quadtree.hpp
   trunk/utils/shapeindex/shapeindex.cpp
Log:
replaced cerr and cout with clog ( redirected to cerr by default)



Modified: trunk/utils/shapeindex/quadtree.hpp
===================================================================
--- trunk/utils/shapeindex/quadtree.hpp	2006-03-19 21:53:47 UTC (rev 180)
+++ trunk/utils/shapeindex/quadtree.hpp	2006-03-19 21:54:40 UTC (rev 181)
@@ -230,14 +230,14 @@
 	    {
 		pad+=" ";
 	    }
-	    std::cout<<pad<<"node "<<node<<" extent:"<<node->ext_<<std::endl;
-	    std::cout<<pad;
+	    std::clog<<pad<<"node "<<node<<" extent:"<<node->ext_<<std::endl;
+	    std::clog<<pad;
 	    while(itr!=node->data_.end())
 	    {
-		std::cout<<*itr<<" ";
+		std::clog<<*itr<<" ";
 		++itr;
 	    }
-	    std::cout<<std::endl;
+	    std::clog<<std::endl;
 	    for (int i=0;i<4;++i)
 	    {
 		print(node->children_[i],level+4);

Modified: trunk/utils/shapeindex/shapeindex.cpp
===================================================================
--- trunk/utils/shapeindex/shapeindex.cpp	2006-03-19 21:53:47 UTC (rev 180)
+++ trunk/utils/shapeindex/shapeindex.cpp	2006-03-19 21:54:40 UTC (rev 181)
@@ -67,13 +67,13 @@
 	
 	if (vm.count("version"))
 	{
-	    cout<<"version 0.2.0a" <<endl;
+	    clog<<"version 0.2.0a" <<endl;
 	    return 1;
 	}
 
 	if (vm.count("help")) 
 	{
-	    cout << desc << "\n";
+	    clog << desc << "\n";
 	    return 1;
 	}
 	if (vm.count("depth"))
@@ -92,26 +92,26 @@
     }
     catch (...)
     {
-	cerr << "Exception of unknown type!"<<endl;
+	clog << "Exception of unknown type!"<<endl;
 	return -1;
     }
     
-    std::cout<<"max tree depth:"<<depth<<std::endl;
-    std::cout<<"split ratio:"<<ratio<<std::endl;
+    std::clog<<"max tree depth:"<<depth<<std::endl;
+    std::clog<<"split ratio:"<<ratio<<std::endl;
   
     vector<string>::const_iterator itr=shape_files.begin();
     if (itr==shape_files.end())
     {
-	std::cout << "no shape files to index"<<std::endl;
+	std::clog << "no shape files to index"<<std::endl;
 	return 0;
     }
     while (itr != shape_files.end())
     {
-	std::cout<<"processing "<<*itr << std::endl;
+	std::clog<<"processing "<<*itr << std::endl;
 	shape_file shp;
 	std::string shapename(*itr++);
 	if (!shp.open(shapename+".shp")) {
-	    std::cerr<<"error : cannot open "<< (shapename+".shp") <<"\n";
+	    std::clog<<"error : cannot open "<< (shapename+".shp") <<"\n";
 	    continue;
 	}
 
@@ -125,10 +125,10 @@
 	shp.read_envelope(extent);
 	
 	
-	std::cout<<"length="<<file_length<<std::endl;
-	std::cout<<"version="<<version<<std::endl;
-	std::cout<<"type="<<shape_type<<std::endl;
-	std::cout<<"extent:"<<extent<<std::endl;
+	std::clog<<"length="<<file_length<<std::endl;
+	std::clog<<"version="<<version<<std::endl;
+	std::clog<<"type="<<shape_type<<std::endl;
+	std::clog<<"extent:"<<extent<<std::endl;
 	  
 	int pos=50;
 	shp.seek(pos*2);  
@@ -169,7 +169,7 @@
 
 	    tree.insert(offset,item_ext);
 	    if (verbose) {
-		std::cout<<"record number "<<record_number<<" box="<<item_ext<<std::endl;
+		std::clog<<"record number "<<record_number<<" box="<<item_ext<<std::endl;
 	    }
 
 	    pos+=4+content_length;
@@ -181,20 +181,20 @@
 	} 
 	shp.close();
   
-	std::cout<<" number shapes="<<count<<std::endl;  
+	std::clog<<" number shapes="<<count<<std::endl;  
     
 	std::fstream file((shapename+".index").c_str(),
 			  std::ios::in | std::ios::out | std::ios::trunc | std::ios::binary);
 	if (!file) {
-	    std::cerr << "cannot open index file for writing file \""
+	    std::clog << "cannot open index file for writing file \""
 		      <<(shapename+".index")<<"\""<<std::endl;
 	} else {
 	    tree.trim();
-	    std::cout<<" number nodes="<<tree.count()<<std::endl;
+	    std::clog<<" number nodes="<<tree.count()<<std::endl;
 	    tree.write(file);
 	    file.close();
 	}
     }
-    std::cout<<"done!"<<std::endl;
+    std::clog<<"done!"<<std::endl;
     return 0;
 }



From pavlenko at berlios.de  Sun Mar 19 22:55:59 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Sun, 19 Mar 2006 22:55:59 +0100
Subject: [Mapnik-svn] r182 - in trunk/bindings/python: . mapnik
Message-ID: <200603192155.k2JLtxT5000513@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-19 22:55:59 +0100 (Sun, 19 Mar 2006)
New Revision: 182

Added:
   trunk/bindings/python/mapnik_font_engine.cpp
Modified:
   trunk/bindings/python/mapnik/__init__.py
   trunk/bindings/python/mapnik_python.cpp
Log:
added font_engine to python bindings (TODO!)




Modified: trunk/bindings/python/mapnik/__init__.py
===================================================================
--- trunk/bindings/python/mapnik/__init__.py	2006-03-19 21:54:40 UTC (rev 181)
+++ trunk/bindings/python/mapnik/__init__.py	2006-03-19 21:55:59 UTC (rev 182)
@@ -56,6 +56,9 @@
 #register datasources
 from mapnik import DatasourceCache
 DatasourceCache.instance().register_datasources('%s' % inputpluginspath)
+#register some fonts
+from mapnik import FontEngine
+FontEngine.instance().register_font('/usr/local/lib/mapnik/fonts/Vera.ttf')
 #set dlopen flags back to the original
 setdlopenflags(flags)
 

Added: trunk/bindings/python/mapnik_font_engine.cpp
===================================================================
--- trunk/bindings/python/mapnik_font_engine.cpp	2006-03-19 21:54:40 UTC (rev 181)
+++ trunk/bindings/python/mapnik_font_engine.cpp	2006-03-19 21:55:59 UTC (rev 182)
@@ -0,0 +1,41 @@
+/* This file is part of python_mapnik (c++/python mapping toolkit)
+ * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+ *
+ * Mapnik is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for moprovpoly_lyrre details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+ */
+
+//$Id$
+
+#include <boost/python.hpp>
+#include "font_engine_freetype.hpp"
+
+void export_font_engine()
+{
+    using mapnik::freetype_engine;
+    using mapnik::singleton;
+    using mapnik::CreateStatic;
+    using namespace boost::python;
+    class_<singleton<freetype_engine,CreateStatic>,boost::noncopyable>("Singleton",no_init)
+        .def("instance",&singleton<freetype_engine,CreateStatic>::instance,
+	     return_value_policy<reference_existing_object>())
+        .staticmethod("instance")
+        ;
+
+    class_<freetype_engine,bases<singleton<freetype_engine,CreateStatic> >,
+        boost::noncopyable>("FontEngine",no_init)
+	.def("register_font",&freetype_engine::register_font)
+	.staticmethod("register_font")
+        ;
+}

Modified: trunk/bindings/python/mapnik_python.cpp
===================================================================
--- trunk/bindings/python/mapnik_python.cpp	2006-03-19 21:54:40 UTC (rev 181)
+++ trunk/bindings/python/mapnik_python.cpp	2006-03-19 21:55:59 UTC (rev 182)
@@ -8,7 +8,8 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURP
+OSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
@@ -45,6 +46,7 @@
 void export_polygon_pattern_symbolizer();
 void export_raster_symbolizer();
 void export_text_symbolizer();
+void export_font_engine();
 
 void render_to_file(const Map& map,const std::string& file,const std::string& format)
 {
@@ -87,7 +89,7 @@
     export_polygon_pattern_symbolizer();
     export_raster_symbolizer();
     export_text_symbolizer();
-
+    export_font_engine();
     class_<coord<double,2> >("Coord",init<double,double>())
         .def_readwrite("x", &coord<double,2>::x)
         .def_readwrite("y", &coord<double,2>::y)



From pavlenko at berlios.de  Sun Mar 19 22:59:16 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Sun, 19 Mar 2006 22:59:16 +0100
Subject: [Mapnik-svn] r183 - in trunk: include src
Message-ID: <200603192159.k2JLxGm9000753@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-19 22:59:16 +0100 (Sun, 19 Mar 2006)
New Revision: 183

Modified:
   trunk/include/mapnik.hpp
   trunk/src/mapnik.cpp
Log:
removed save and load to text archive functionality to keep x86_64 build happy
 


Modified: trunk/include/mapnik.hpp
===================================================================
--- trunk/include/mapnik.hpp	2006-03-19 21:55:59 UTC (rev 182)
+++ trunk/include/mapnik.hpp	2006-03-19 21:59:16 UTC (rev 183)
@@ -74,10 +74,7 @@
 namespace mapnik
 {
     void save_to_xml(Map const& map,const char* filename);  
-    void save_to_text(Map const& map,const char* filename);
-
     void load_from_xml(Map & map, const char * filename);
-    void load_from_text(Map & map, const char * filename);
 }
 
 #endif //MAPNIK_HPP

Modified: trunk/src/mapnik.cpp
===================================================================
--- trunk/src/mapnik.cpp	2006-03-19 21:55:59 UTC (rev 182)
+++ trunk/src/mapnik.cpp	2006-03-19 21:59:16 UTC (rev 183)
@@ -19,8 +19,6 @@
 //$Id$
 
 #include <fstream>
-#include <boost/archive/text_oarchive.hpp>
-#include <boost/archive/text_iarchive.hpp>
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
 #include "mapnik.hpp"
@@ -34,14 +32,6 @@
 	boost::archive::xml_oarchive oa(ofs);
 	oa << boost::serialization::make_nvp("map",m);
     }
-    
-    void save_to_text(Map const& m,const char* filename)
-    {
-	std::ofstream ofs(filename);
-	assert(ofs.good());
-	boost::archive::text_oarchive oa(ofs);
-	oa << m;
-    }
 
     void load_from_xml(Map & m,const char* filename)
     {
@@ -50,14 +40,6 @@
 	boost::archive::xml_iarchive ia(ifs);
 	ia >> boost::serialization::make_nvp("map",m);
     }
-    
-    void load_from_text(Map & m,const char* filename)
-    {
-	std::ifstream ifs(filename);
-	assert(ifs.good());
-	boost::archive::text_iarchive ia(ifs);
-	ia >> m;
-    }
 }
 
 



From jdoyon at berlios.de  Wed Mar 22 01:11:23 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Wed, 22 Mar 2006 01:11:23 +0100
Subject: [Mapnik-svn] r184 - trunk/bindings/python
Message-ID: <200603220011.k2M0BNN0020475@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-22 01:11:01 +0100 (Wed, 22 Mar 2006)
New Revision: 184

Modified:
   trunk/bindings/python/mapnik_text_symbolizer.cpp
Log:
Add support for halo's to TextSymbolizer().



Modified: trunk/bindings/python/mapnik_text_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_text_symbolizer.cpp	2006-03-19 21:59:16 UTC (rev 183)
+++ trunk/bindings/python/mapnik_text_symbolizer.cpp	2006-03-22 00:11:01 UTC (rev 184)
@@ -29,6 +29,10 @@
     using namespace boost::python;
     
     class_<text_symbolizer>("TextSymbolizer",
-			    init<std::string const&,unsigned,Color const&>("TODO"))
+			    init<std::string const&,unsigned,Color const&>())
+        .add_property("halo_fill",make_function(
+                      &text_symbolizer::get_halo_fill,return_value_policy<copy_const_reference>()),
+                      &text_symbolizer::set_halo_fill)
+        .add_property("halo_radius",&text_symbolizer::get_halo_radius, &text_symbolizer::set_halo_radius)
 	;
 }



From jdoyon at berlios.de  Wed Mar 22 01:13:28 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Wed, 22 Mar 2006 01:13:28 +0100
Subject: [Mapnik-svn] r185 - trunk/bindings/python
Message-ID: <200603220013.k2M0DSXM021475@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-22 01:13:14 +0100 (Wed, 22 Mar 2006)
New Revision: 185

Modified:
   trunk/bindings/python/mapnik_layer.cpp
   trunk/bindings/python/mapnik_map.cpp
Log:
Add docstrings, and add support for setting the
map width and height after object creation.



Modified: trunk/bindings/python/mapnik_layer.cpp
===================================================================
--- trunk/bindings/python/mapnik_layer.cpp	2006-03-22 00:11:01 UTC (rev 184)
+++ trunk/bindings/python/mapnik_layer.cpp	2006-03-22 00:13:14 UTC (rev 185)
@@ -105,9 +105,9 @@
     	;
     
     class_<Layer>("Layer","A map layer.",no_init)
-        .def("name",&Layer::name,return_value_policy<copy_const_reference>())
+        .def("name",&Layer::name,return_value_policy<copy_const_reference>(), "Return the name of the layer.")
         .def("params",&Layer::params,return_value_policy<reference_existing_object>())
-        .def("envelope",&Layer::envelope)
+        .def("envelope",&Layer::envelope, "Return the geographic envelope/bounding box of the data in the layer.")
 	.add_property("minzoom",&Layer::getMinZoom,&Layer::setMinZoom)
 	.add_property("maxzoom",&Layer::getMaxZoom,&Layer::setMaxZoom)
 	.add_property("styles",make_function

Modified: trunk/bindings/python/mapnik_map.cpp
===================================================================
--- trunk/bindings/python/mapnik_map.cpp	2006-03-22 00:11:01 UTC (rev 184)
+++ trunk/bindings/python/mapnik_map.cpp	2006-03-22 00:13:14 UTC (rev 185)
@@ -80,8 +80,8 @@
     	.def(vector_indexing_suite<std::vector<Layer> >())
     	;
     class_<Map>("Map",init<int,int,boost::python::optional<int> >())
-        .add_property("width",&Map::getWidth)
-        .add_property("height",&Map::getHeight)
+        .add_property("width",&Map::getWidth,&Map::setWidth)
+        .add_property("height",&Map::getHeight,&Map::setHeight)
 	.add_property("srid",&Map::srid)
 	.add_property("background",make_function
 		      (&Map::getBackground,return_value_policy<copy_const_reference>()),



From jdoyon at berlios.de  Wed Mar 22 01:42:28 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Wed, 22 Mar 2006 01:42:28 +0100
Subject: [Mapnik-svn] r186 - trunk/bindings/python/mapnik
Message-ID: <200603220042.k2M0gSws032163@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-22 01:41:52 +0100 (Wed, 22 Mar 2006)
New Revision: 186

Modified:
   trunk/bindings/python/mapnik/
   trunk/bindings/python/mapnik/__init__.py
Log:
- Add .sconsign to svn:ignore ...
- Create a fontscollectionpath in paths.py and use it.




Property changes on: trunk/bindings/python/mapnik
___________________________________________________________________
Name: svn:ignore
   - *.pyc
paths.py

   + *.pyc
paths.py
.sconsign


Modified: trunk/bindings/python/mapnik/__init__.py
===================================================================
--- trunk/bindings/python/mapnik/__init__.py	2006-03-22 00:13:14 UTC (rev 185)
+++ trunk/bindings/python/mapnik/__init__.py	2006-03-22 00:41:52 UTC (rev 186)
@@ -26,7 +26,7 @@
 setdlopenflags(RTLD_NOW | RTLD_GLOBAL)
 
 from _mapnik import *
-from paths import inputpluginspath
+from paths import inputpluginspath, fontscollectionpath
 
 # The base Boost.Python class
 BoostPythonMetaclass = Coord.__class__
@@ -58,7 +58,7 @@
 DatasourceCache.instance().register_datasources('%s' % inputpluginspath)
 #register some fonts
 from mapnik import FontEngine
-FontEngine.instance().register_font('/usr/local/lib/mapnik/fonts/Vera.ttf')
+FontEngine.instance().register_font('%s/Vera.ttf' % fontscollectionpath)
 #set dlopen flags back to the original
 setdlopenflags(flags)
 



From jdoyon at berlios.de  Wed Mar 22 02:04:37 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Wed, 22 Mar 2006 02:04:37 +0100
Subject: [Mapnik-svn] r187 - in trunk: . demo demo/data
Message-ID: <200603220104.k2M14bra004373@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-22 02:03:22 +0100 (Wed, 22 Mar 2006)
New Revision: 187

Added:
   trunk/demo/
   trunk/demo/data/
   trunk/demo/data/COPYRIGHT.txt
   trunk/demo/data/boundaries.dbf
   trunk/demo/data/boundaries.shp
   trunk/demo/data/boundaries.shx
   trunk/demo/data/boundaries_l.dbf
   trunk/demo/data/boundaries_l.shp
   trunk/demo/data/boundaries_l.shx
   trunk/demo/data/ontdrainage.dbf
   trunk/demo/data/ontdrainage.shp
   trunk/demo/data/ontdrainage.shx
   trunk/demo/data/popplaces.dbf
   trunk/demo/data/popplaces.shp
   trunk/demo/data/popplaces.shx
   trunk/demo/data/qcdrainage.dbf
   trunk/demo/data/qcdrainage.shp
   trunk/demo/data/qcdrainage.shx
   trunk/demo/data/roads.dbf
   trunk/demo/data/roads.shp
   trunk/demo/data/roads.shx
Log:
Initial load of the data that can be used for the demo.



Added: trunk/demo/data/COPYRIGHT.txt
===================================================================
--- trunk/demo/data/COPYRIGHT.txt	2006-03-22 00:41:52 UTC (rev 186)
+++ trunk/demo/data/COPYRIGHT.txt	2006-03-22 01:03:22 UTC (rev 187)
@@ -0,0 +1,3 @@
+?? 2003. Government of Canada with permission from Natural Resources Canada
+
+Original License: http://geogratis.cgdi.gc.ca/e_license.html

Added: trunk/demo/data/boundaries.dbf
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries.dbf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/boundaries.shp
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries.shp
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/boundaries.shx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries.shx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/boundaries_l.dbf
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries_l.dbf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/boundaries_l.shp
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries_l.shp
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/boundaries_l.shx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries_l.shx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/ontdrainage.dbf
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/ontdrainage.dbf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/ontdrainage.shp
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/ontdrainage.shp
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/ontdrainage.shx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/ontdrainage.shx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/popplaces.dbf
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/popplaces.dbf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/popplaces.shp
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/popplaces.shp
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/popplaces.shx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/popplaces.shx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/qcdrainage.dbf
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/qcdrainage.dbf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/qcdrainage.shp
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/qcdrainage.shp
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/qcdrainage.shx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/qcdrainage.shx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/roads.dbf
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/roads.dbf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/roads.shp
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/roads.shp
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/roads.shx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/roads.shx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From jdoyon at berlios.de  Wed Mar 22 03:32:43 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Wed, 22 Mar 2006 03:32:43 +0100
Subject: [Mapnik-svn] r188 - in trunk/demo: . python
Message-ID: <200603220232.k2M2Wha9026249@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-22 03:32:38 +0100 (Wed, 22 Mar 2006)
New Revision: 188

Added:
   trunk/demo/python/
   trunk/demo/python/rundemo.py
Log:
Here is a first implementation of a working python demo!!

TODO:
  - Better/smarter labelling with forced positionning
  - Point symbology




Property changes on: trunk/demo/python
___________________________________________________________________
Name: svn:ignore
   + demo.png
demo.jpg


Added: trunk/demo/python/rundemo.py
===================================================================
--- trunk/demo/python/rundemo.py	2006-03-22 01:03:22 UTC (rev 187)
+++ trunk/demo/python/rundemo.py	2006-03-22 02:32:38 UTC (rev 188)
@@ -0,0 +1,296 @@
+#!/usr/bin/python2.3
+
+# This file is part of Mapnik (c++ mapping toolkit)
+# Copyright (C) 2005 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+# Import everything.  In this case this is safe, in more complex systems, you
+# will want to be more selective.
+
+try:
+    from mapnik import *
+except:
+    print '\n\nThe mapnik library and python bindings must have been compiled and \
+installed successfully before running this script.\n\n'
+    raise
+
+# Instanciate a map, giving it a width and height. Remember: the word "map" is
+# reserved in Python! :)
+
+m = Map(800,600)
+
+# Set its background colour. More on colours later ...
+
+m.background = Color('white')
+
+# Now we can start adding layers, in stacking order (i.e. bottom layer first)
+
+# Canadian Provinces (Polygons)
+
+# Instanciate a layer.  The parameters depend on the type of data:
+# shape:
+#     type='shape'
+#     file='/path/to/shape'
+# raster:
+#     type='raster'
+#     file='/path/to/raster'
+# postgis:
+#     type='postgis'
+#     host='127.0.0.1'
+#     dbname='mydatabase'
+#     user='myusername'
+#     password='mypassword'
+#     table= TODO
+
+provpoly_lyr = Layer(name='Provinces', type='shape', file='../data/boundaries')
+
+# We then define a style for the layer.  A layer can have one or many styles.
+# Styles are named, so they can be shared across different layers.
+# Multiple styles per layer behaves functionally like multiple layers.  The
+# data is completely re-scanned for each style within one layer, and a style
+# will be drawn entirely "above" the previous one.  Performance wise using
+# multiple styles in one layer is the same has having multiple layers.
+# The paradigm is useful mostly as a convenience.
+
+provpoly_style = Style()
+
+# A Style needs one or more rules.  A rule will normally consist of a filter
+# for feature selection, and one or more symbolizers.
+
+provpoly_rule_on = Rule()
+
+# A Filter() allows the selection of features to which the symbology will
+# be applied.  More on Mapnik expressions can be found in Tutorial #2.
+# A given feature can only match one filter per rule per style.
+
+provpoly_rule_on.filter = Filter("[NAME_EN] = 'Ontario'")
+
+# Here a symbolizer is defined.  Available are:
+#     - LineSymbolizer(Color(),<width>)
+#     - LineSymbolizer(Stroke())
+#     - PolygonSymbolizer(Color())
+#     - PointSymbolizer(<file>,<type>,<width>,<height>)
+
+# Some of them can accept a Color() instance, which can be created with:
+#     - Color(<red>, <green>, <blue>)
+#     - Color(<red>, <green>, <blue>, <alpha>)
+#     - Color(<string>) where <string> will be something like '#00FF00'
+#       or '#0f0' or 'green'
+
+provpoly_rule_on.symbols.append(PolygonSymbolizer(Color(250, 190, 183)))
+provpoly_style.rules.append(provpoly_rule_on)
+
+provpoly_rule_qc = Rule()
+provpoly_rule_qc.filter = Filter("[NAME_EN] = 'Quebec'")
+provpoly_rule_qc.symbols.append(PolygonSymbolizer(Color(217, 235, 203)))
+provpoly_style.rules.append(provpoly_rule_qc)
+
+# Add the style to the map, giving it a name.  This is the name that will be
+# used to refer to it from here on.  Having named styles allows them to be
+# re-used throughout the map.
+
+m.append_style('provinces', provpoly_style)
+
+# Then associate the style to the layer itself.
+
+provpoly_lyr.styles.append('provinces')
+
+# Then add the layer to the map.  In reality, it's the order in which you
+# append them to the map that will determine the drawing order, though by
+# convention it is recommended to define them in drawing order as well.
+
+m.layers.append(provpoly_lyr)
+
+# Drainage
+
+# A simple example ...
+
+qcdrain_lyr = Layer(name='Quebec Hydrography', type='shape',
+                    file='../data/qcdrainage')
+
+qcdrain_style = Style()
+qcdrain_rule = Rule()
+qcdrain_rule.filter = Filter('[HYC] = 8')
+qcdrain_rule.symbols.append(PolygonSymbolizer(Color(153, 204, 255)))
+qcdrain_style.rules.append(qcdrain_rule)
+
+m.append_style('drainage', qcdrain_style)
+qcdrain_lyr.styles.append('drainage')
+m.layers.append(qcdrain_lyr)
+
+# In this case, we have 2 data sets with similar schemas (same filtering
+# attributes, and same desired style), so we're going to
+# re-use the style defined in the above layer for the next one.
+
+ondrain_lyr = Layer(name='Ontario Hydrography', type='shape',
+                    file='../data/ontdrainage')
+ondrain_lyr.styles.append('drainage')
+m.layers.append(ondrain_lyr)
+
+# Provincial boundaries
+
+provlines_lyr = Layer(name='Provincial borders', type='shape',
+                      file='../data/boundaries_l')
+
+# Here we define a "dash dot dot dash" pattern for the provincial boundaries.
+
+provlines_stk = Stroke()
+provlines_stk.add_dash(8, 4)
+provlines_stk.add_dash(2, 2)
+provlines_stk.add_dash(2, 2)
+provlines_stk.color = Color('black')
+provlines_stk.width = 1.0
+
+provlines_style = Style()
+provlines_rule = Rule()
+provlines_rule.symbols.append(LineSymbolizer(provlines_stk))
+provlines_style.rules.append(provlines_rule)
+
+m.append_style('provlines', provlines_style)
+provlines_lyr.styles.append('provlines')
+m.layers.append(provlines_lyr)
+
+# Roads 3 and 4 (The "grey" roads)
+
+roads34_lyr = Layer(name='Roads', type='shape', file='../data/roads')
+
+roads34_style = Style()
+roads34_rule = Rule()
+roads34_rule.filter = Filter('[CLASS] = 3 or [CLASS] = 4')
+
+# With lines of a certain width, you can control how the ends
+# are closed off using line_cap as below.
+
+roads34_rule_stk = Stroke()
+roads34_rule_stk.color = Color(171,158,137)
+roads34_rule_stk.line_cap = line_cap.ROUND_CAP
+
+# Available options are:
+# line_cap: BUTT_CAP, SQUARE_CAP, ROUND_CAP
+# line_join: MITER_JOIN, MITER_REVERT_JOIN, ROUND_JOIN, BEVEL_JOIN
+
+# And one last Stroke() attribute not used here is "opacity", which
+# can be set to a numerical value.
+
+roads34_rule_stk.width = 2.0
+roads34_rule.symbols.append(LineSymbolizer(roads34_rule_stk))
+roads34_style.rules.append(roads34_rule)
+
+m.append_style('smallroads', roads34_style)
+roads34_lyr.styles.append('smallroads')
+m.layers.append(roads34_lyr)
+
+# Roads 2 (The thin yellow ones)
+
+roads2_lyr = Layer(name='Roads', type='shape', file='../data/roads')
+
+roads2_style_1 = Style()
+roads2_rule_1 = Rule()
+roads2_rule_1.filter = Filter('[CLASS] = 2')
+roads2_rule_stk_1 = Stroke()
+roads2_rule_stk_1.color = Color(171,158,137)
+roads2_rule_stk_1.line_cap = line_cap.ROUND_CAP
+roads2_rule_stk_1.width = 4.0
+roads2_rule_1.symbols.append(LineSymbolizer(roads2_rule_stk_1))
+roads2_style_1.rules.append(roads2_rule_1)
+
+m.append_style('road-border', roads2_style_1)
+
+roads2_style_2 = Style()
+roads2_rule_2 = Rule()
+roads2_rule_2.filter = Filter('[CLASS] = 2')
+roads2_rule_stk_2 = Stroke()
+roads2_rule_stk_2.color = Color(255,250,115)
+roads2_rule_stk_2.line_cap = line_cap.ROUND_CAP
+roads2_rule_stk_2.width = 2.0
+roads2_rule_2.symbols.append(LineSymbolizer(roads2_rule_stk_2))
+roads2_style_2.rules.append(roads2_rule_2)
+
+m.append_style('road-fill', roads2_style_2)
+
+roads2_lyr.styles.append('road-border')
+roads2_lyr.styles.append('road-fill')
+
+m.layers.append(roads2_lyr)
+
+# Roads 1 (The big orange ones, the highways)
+
+roads1_lyr = Layer(name='Roads', type='shape', file='../data/roads')
+
+roads1_style_1 = Style()
+roads1_rule_1 = Rule()
+roads1_rule_1.filter = Filter('[CLASS] = 1')
+roads1_rule_stk_1 = Stroke()
+roads1_rule_stk_1.color = Color(188,149,28)
+roads1_rule_stk_1.line_cap = line_cap.ROUND_CAP
+roads1_rule_stk_1.width = 7.0
+roads1_rule_1.symbols.append(LineSymbolizer(roads1_rule_stk_1))
+roads1_style_1.rules.append(roads1_rule_1)
+m.append_style('highway-border', roads1_style_1)
+
+roads1_style_2 = Style()
+roads1_rule_2 = Rule()
+roads1_rule_2.filter = Filter('[CLASS] = 1')
+roads1_rule_stk_2 = Stroke()
+roads1_rule_stk_2.color = Color(242,191,36)
+roads1_rule_stk_2.line_cap = line_cap.ROUND_CAP
+roads1_rule_stk_2.width = 5.0
+roads1_rule_2.symbols.append(LineSymbolizer(roads1_rule_stk_2))
+roads1_style_2.rules.append(roads1_rule_2)
+
+m.append_style('highway-fill', roads1_style_2)
+
+roads1_lyr.styles.append('highway-border')
+roads1_lyr.styles.append('highway-fill')
+
+m.layers.append(roads1_lyr)
+
+# Populated Places
+
+popplaces_lyr = Layer(name='Populated Places', type='shape',
+                      file='../data/popplaces')
+
+popplaces_style = Style()
+popplaces_rule = Rule()
+
+# And here we have a TextSymbolizer, used for labeling.
+# The first parameter is the name of the attribute to use as the source of the
+# text to label with.  Then there is font size in points (I think?), and colour.
+
+popplaces_text_symbolizer = TextSymbolizer('GEONAME', 10, Color('black'))
+
+# We set a "halo" around the text, which looks like an outline if thin enough,
+# or an outright background if large enough.
+
+popplaces_text_symbolizer.halo_fill = Color('white')
+popplaces_text_symbolizer.halo_radius = 1
+popplaces_rule.symbols.append(popplaces_text_symbolizer)
+popplaces_style.rules.append(popplaces_rule)
+
+m.append_style('popplaces', popplaces_style)
+popplaces_lyr.styles.append('popplaces')
+m.layers.append(popplaces_lyr)
+
+# Draw map
+
+# Set the initial extent of the map.
+
+m.zoom_to_box(Envelope(7622019.99659767, 2966323.17001496, 7909470.44644348, 2755360.15422466))
+
+# Render two maps, one PNG, one JPEG.
+
+render_to_file(m, 'demo.png', 'png')
+render_to_file(m, 'demo.jpg', 'jpeg')



From jdoyon at berlios.de  Wed Mar 22 03:41:24 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Wed, 22 Mar 2006 03:41:24 +0100
Subject: [Mapnik-svn] r189 - trunk/demo/python
Message-ID: <200603220241.k2M2fOaK028918@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-22 03:41:13 +0100 (Wed, 22 Mar 2006)
New Revision: 189

Added:
   trunk/demo/python/README.txt
Modified:
   trunk/demo/python/rundemo.py
Log:
- Remove the python interpreter from the script, have the user supply it instead
- Add a little README.txt

Added: trunk/demo/python/README.txt
===================================================================
--- trunk/demo/python/README.txt	2006-03-22 02:32:38 UTC (rev 188)
+++ trunk/demo/python/README.txt	2006-03-22 02:41:13 UTC (rev 189)
@@ -0,0 +1,22 @@
+# $Id$
+
+This directory contains a sample python script implementing the Mapnik API.
+
+The script is thoroughly commented and also acts as a mini tutorial.  Reading
+it should get you on your way, and you can use it as a base for your work.
+
+You must compile and install mapnik and the python bindings FIRST.
+
+Once this is done, run it:
+
+/path/to/python rundemo.py
+
+If all goes well, it should render 2 map images:
+
+demo.jpg
+demo.png
+
+Have a look!
+
+Cheers,
+J.F.


Property changes on: trunk/demo/python/README.txt
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/demo/python/rundemo.py
===================================================================
--- trunk/demo/python/rundemo.py	2006-03-22 02:32:38 UTC (rev 188)
+++ trunk/demo/python/rundemo.py	2006-03-22 02:41:13 UTC (rev 189)
@@ -1,5 +1,5 @@
-#!/usr/bin/python2.3
-
+# $Id$
+#
 # This file is part of Mapnik (c++ mapping toolkit)
 # Copyright (C) 2005 Jean-Francois Doyon
 #
@@ -294,3 +294,9 @@
 
 render_to_file(m, 'demo.png', 'png')
 render_to_file(m, 'demo.jpg', 'jpeg')
+
+print """\n\nTwo maps have been rendered in the current directory:
+- demo.jpg
+- demo.png
+
+Have a look!\n\n"""


Property changes on: trunk/demo/python/rundemo.py
___________________________________________________________________
Name: svn:keywords
   + Id



From pavlenko at berlios.de  Wed Mar 22 15:53:22 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 15:53:22 +0100
Subject: [Mapnik-svn] r190 - trunk/plugins/input/shape
Message-ID: <200603221453.k2MErM0W023853@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 15:52:32 +0100 (Wed, 22 Mar 2006)
New Revision: 190

Modified:
   trunk/plugins/input/shape/dbffile.cpp
Log:
added explicit flags ios::in|ios::binary for win32 compat

Modified: trunk/plugins/input/shape/dbffile.cpp
===================================================================
--- trunk/plugins/input/shape/dbffile.cpp	2006-03-22 02:41:13 UTC (rev 189)
+++ trunk/plugins/input/shape/dbffile.cpp	2006-03-22 14:52:32 UTC (rev 190)
@@ -18,7 +18,7 @@
 
 #include "dbffile.hpp"
 #include "utils.hpp"
-
+#include <boost/algorithm/string.hpp>
 #include <string>
 
 dbf_file::dbf_file()
@@ -50,7 +50,7 @@
 
 bool dbf_file::open(const std::string& file_name)
 {
-    file_.open(file_name.c_str());
+    file_.open(file_name.c_str(),std::ios::in|std::ios::binary);
     if (file_.is_open())
         read_header();
     return file_?true:false;
@@ -115,39 +115,39 @@
     if (col>=0 && col<num_fields_)
     {
         std::string name=fields_[col].name_;
-	std::string str=trim(std::string(record_+fields_[col].offset_,fields_[col].length_));
-        
+        std::string str=boost::trim_copy(std::string(record_+fields_[col].offset_,fields_[col].length_));
+
         switch (fields_[col].type_)
         {
-	case 'C':
-	case 'D'://todo handle date?
-	case 'M':
-	case 'L':
-	    f[name] = str; 
-	    break;
-	case 'N':
+        case 'C':
+        case 'D'://todo handle date?
+        case 'M':
+        case 'L':
+            f[name] = str; 
+            break;
+        case 'N':
         case 'F':
-	    {
-		if (str[0]=='*')
-		{
-		    boost::put(f,name,0);
-		    break;
-		}
-		if (fields_[col].dec_>0)
-		{   
-		    double d;
-		    fromString(str,d);
-		    boost::put(f,name,d);
-		}
-		else
-		{
-		    int i;
-		    fromString(str,i);
-		    boost::put(f,name,i);
-		}
-		break;
-	    }
-	}
+            {
+                if (str[0]=='*')
+                {
+                    boost::put(f,name,0);
+                    break;
+                }
+                if (fields_[col].dec_>0)
+                {   
+                    double d;
+                    fromString(str,d);
+                    boost::put(f,name,d);
+                }
+                else
+                {
+                    int i;
+                    fromString(str,i);
+                    boost::put(f,name,i);
+                }
+                break;
+            }
+        }
     }
 }
 
@@ -172,7 +172,8 @@
             field_descriptor desc;
             desc.index_=i;
             file_.read(name,10);
-            desc.name_=trim_left(name);
+            desc.name_=boost::trim_left_copy(std::string(name));
+            std::clog << "name=" << name << std::endl;
             skip(1);
             desc.type_=file_.get();
             skip(4);
@@ -205,7 +206,7 @@
     char b[4];
     file_.read(b,4);
     return (b[0] & 0xff) | (b[1] & 0xff) << 8 |
-	(b[2] & 0xff) << 16 | (b[3] & 0xff) <<24;
+        (b[2] & 0xff) << 16 | (b[3] & 0xff) <<24;
 }
 
 



From pavlenko at berlios.de  Wed Mar 22 15:57:53 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 22 Mar 2006 15:57:53 +0100
Subject: [Mapnik-svn] r191 - trunk/plugins/input/shape
Message-ID: <200603221457.k2MEvr8G027062@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 15:57:50 +0100 (Wed, 22 Mar 2006)
New Revision: 191

Modified:
   trunk/plugins/input/shape/dbffile.cpp
Log:
removed verbose output

Modified: trunk/plugins/input/shape/dbffile.cpp
===================================================================
--- trunk/plugins/input/shape/dbffile.cpp	2006-03-22 14:52:32 UTC (rev 190)
+++ trunk/plugins/input/shape/dbffile.cpp	2006-03-22 14:57:50 UTC (rev 191)
@@ -173,7 +173,6 @@
             desc.index_=i;
             file_.read(name,10);
             desc.name_=boost::trim_left_copy(std::string(name));
-            std::clog << "name=" << name << std::endl;
             skip(1);
             desc.type_=file_.get();
             skip(4);



From pavlenko at berlios.de  Wed Mar 22 16:46:07 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:46:07 +0100
Subject: [Mapnik-svn] r192 - trunk/include
Message-ID: <200603221546.k2MFk7rW009734@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:45:52 +0100 (Wed, 22 Mar 2006)
New Revision: 192

Removed:
   trunk/include/property_index.hpp
Log:
added __decl(dllexport) to exported symbols\n removed unused files

Deleted: trunk/include/property_index.hpp
===================================================================
--- trunk/include/property_index.hpp	2006-03-22 14:57:50 UTC (rev 191)
+++ trunk/include/property_index.hpp	2006-03-22 15:45:52 UTC (rev 192)
@@ -1,71 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id$
-
-#ifndef PROPERTY_INDEX_HPP
-#define PROPERTY_INDEX_HPP
-
-#include "filter.hpp"
-#include "expression.hpp"
-
-#include <set>
-
-namespace mapnik
-{
-
-    /*
-    template <typename FeatureT>
-    class property_index : public filter_visitor<FeatureT>
-    {
-    public:
-	property_index(std::set<std::string> const& names)
-	    : names_(names)  {}
-	
-	void visit(filter<FeatureT>& /*filter*/) 
-	{ 
-	    //not interested
-	}
-	void visit(expression<FeatureT>& exp)
-	{
-	    property<FeatureT>* pf;
-	    if ((pf = dynamic_cast<property<FeatureT>*>(&exp)))
-	    {
-		std::set<std::string>::iterator pos;
-		pos = names_.find(pf->name());
-		if (pos != names_.end())
-		{
-		    size_t idx = std::distance(names_.begin(),pos);
-		    pf->set_index(idx);
-		}	
-	    }
-	}	
-	virtual ~property_index() {}
-    private:
-	// no copying 
-	property_index(property_index const&);
-	property_index& operator=(property_index const&);
-
-    private:
-	std::set<std::string> const& names_;
-
-    };
-*/
-}
-
-#endif //PROPERTY_INDEX_HPP



From pavlenko at berlios.de  Wed Mar 22 16:47:11 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:47:11 +0100
Subject: [Mapnik-svn] r193 - trunk/include
Message-ID: <200603221547.k2MFlBfQ011353@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:46:58 +0100 (Wed, 22 Mar 2006)
New Revision: 193

Removed:
   trunk/include/line_aa.hpp
Log:
removed unused files

Deleted: trunk/include/line_aa.hpp
===================================================================
--- trunk/include/line_aa.hpp	2006-03-22 15:45:52 UTC (rev 192)
+++ trunk/include/line_aa.hpp	2006-03-22 15:46:58 UTC (rev 193)
@@ -1,46 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: line_aa.hpp 39 2005-04-10 20:39:53Z pavlenko $
-
-#ifndef LINE_AA_HPP
-#define LINE_AA_HPP
-
-#include "geometry.hpp"
-#include "graphics.hpp"
-
-
-namespace mapnik
-{
-    template <typename PixBuffer> class LineRasterizerAA
-    {
-    private:
-	PixBuffer* pixbuf_;
-    public:
-	LineRasterizerAA(PixBuffer& pixbuf)
-                :pixbuf_(&pixbuf) {}
-	
-	template <typename Transform>
-	void render(const geometry_type& geom,const Color& c);
-    private:
-	LineRasterizerAA(const LineRasterizerAA&);
-	LineRasterizerAA& operator=(const LineRasterizerAA&);
-	void render_line(int x0,int y0,int x1,int y1,unsigned rgba);
-    };
-}
-#endif                                            //LINE_AA_HPP



From pavlenko at berlios.de  Wed Mar 22 16:49:43 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:49:43 +0100
Subject: [Mapnik-svn] r194 - in trunk: include src
Message-ID: <200603221549.k2MFnhdc015123@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:48:54 +0100 (Wed, 22 Mar 2006)
New Revision: 194

Removed:
   trunk/include/render.hpp
   trunk/include/scanline.hpp
   trunk/src/line_aa.cpp
   trunk/src/line_symbolizer.cpp
   trunk/src/polygon_symbolizer.cpp
   trunk/src/scanline.cpp
   trunk/src/scanline_aa.cpp
Log:
removed unused files

Deleted: trunk/include/render.hpp
===================================================================
--- trunk/include/render.hpp	2006-03-22 15:46:58 UTC (rev 193)
+++ trunk/include/render.hpp	2006-03-22 15:48:54 UTC (rev 194)
@@ -1,52 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: render.hpp 39 2005-04-10 20:39:53Z pavlenko $
-
-#ifndef RENDER_HPP
-#define RENDER_HPP
-
-#include <stack>
-#include "envelope.hpp"
-#include "graphics.hpp"
-#include "datasource.hpp"
-#include "layer.hpp"
-#include "map.hpp"
-
-namespace mapnik
-{
-    template <typename Image> class Renderer
-    {
-    public:
-	static void render(const Map& map,Image& image);
-    private:
-	Renderer();
-	static void render_vector_layer(datasource_p const& ds,Map const& map,
-					std::vector<std::string> const& , 
-					unsigned width,
-					unsigned height,
-					const Envelope<double>& bbox,Image& image);
-	static void render_raster_layer(datasource_p const& ds,
-					std::vector<std::string> const& namedStyles,
-					unsigned width,
-					unsigned height,
-					const Envelope<double>& bbox,Image& image);
-    };
-}
-
-#endif //RENDER_HPP

Deleted: trunk/include/scanline.hpp
===================================================================
--- trunk/include/scanline.hpp	2006-03-22 15:46:58 UTC (rev 193)
+++ trunk/include/scanline.hpp	2006-03-22 15:48:54 UTC (rev 194)
@@ -1,44 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: scanline.hpp 39 2005-04-10 20:39:53Z pavlenko $
-
-#ifndef SCANLINE_HPP
-#define SCANLINE_HPP
-
-#include "geometry.hpp"
-
-namespace mapnik
-{
-    template <typename PixBuffer> class ScanlineRasterizer
-    {
-    private:
-	PixBuffer* pixbuf_;
-    public:
-	ScanlineRasterizer(PixBuffer& pixbuf)
-	    :pixbuf_(&pixbuf) {}
-	
-	template <typename Transform>
-	void render(const geometry_type& geom,const Color& c);
-    private:
-	ScanlineRasterizer(const ScanlineRasterizer&);
-	ScanlineRasterizer& operator=(const ScanlineRasterizer&);
-	void render_hline(int x0,int x1,int y,unsigned int rgba);
-    };
-}
-#endif                                            //SCANLINE_HPP

Deleted: trunk/src/line_aa.cpp
===================================================================
--- trunk/src/line_aa.cpp	2006-03-22 15:46:58 UTC (rev 193)
+++ trunk/src/line_aa.cpp	2006-03-22 15:48:54 UTC (rev 194)
@@ -1,146 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: line_aa.cpp 29 2005-04-01 14:30:11Z pavlenko $
-
-#include "line_aa.hpp"
-#include "geom_util.hpp"
-
-namespace mapnik
-{
-    using std::swap;
-
-    template <typename PixBuffer>
-    template <typename Transform>
-    void LineRasterizerAA<PixBuffer>::render(const geometry_type& path,const Color& c)
-    {
-        unsigned rgba=c.rgba();
-        typename geometry_type::path_iterator<Transform> itr=path.template begin<Transform>();
-         
-	int x0 = 0 ,y0 = 0;
-        while (itr!=path.template end<Transform>())
-        {
-            int x1=itr->x;
-            int y1=itr->y;
-            if (itr->cmd==SEG_LINETO || itr->cmd==SEG_CLOSE)
-            {
-                if (!(x0==x1 && y0==y1))
-                {
-                    render_line(x0,y0,x1,y1,rgba);
-                }
-	    }
-            x0=x1;
-            y0=y1;
-            ++itr;
-        }
-    }
-
-    template <typename PixBuffer>
-    inline void LineRasterizerAA<PixBuffer>::render_line(int x0,int y0,int x1,int y1,unsigned rgba)
-    {
-        if (!clip_line(x0,y0,x1,y1,pixbuf_)) return;
-        if(y0>y1)
-        {
-            swap(y0,y1);
-            swap(x0,x1);
-        }
-        pixbuf_->setPixel(x0,y0,rgba);
-        pixbuf_->setPixel(x1,y1,rgba);
-        int dx=x1-x0;
-        int dy=y1-y0;
-        int xDir;
-        if(dx>=0) xDir=1;
-        else
-        {
-            xDir=-1;
-            dx=-dx;
-        }
-        if(dx==0)                                 // vertical line
-        {
-            for(int y=y0;y<y1;y++)
-            {
-                pixbuf_->setPixel(x0,y,rgba);
-            }
-            return;
-        }
-        if(dy==0)                                 // horizontal line
-        {
-            if (x0>x1) swap(x0,x1);
-            for(int x=x0;x<x1;++x)
-            {
-                pixbuf_->setPixel(x,y0,rgba);
-            }
-            return;
-        }
-        if(dx==dy)                                // diagonal line.
-        {
-            for(int x=x0,y=y0;y<y1;y++,x+=xDir)
-            {
-                pixbuf_->setPixel(x,y,rgba);
-            }
-            return;
-        }
-        // line is not horizontal, diagonal, or vertical: use Wu Antialiasing:
-        int error_acc=0;
-        int t;
-        if(dy>dx)                                 // y-major line
-        {
-            int error_adj=(dx<<16)/dy;
-            if(xDir<0)
-            {
-                while(--dy)
-                {
-                    error_acc+=error_adj;
-                    ++y0;
-                    x1=x0-(error_acc>>16);
-                    t=(error_acc>>8)&255;
-                    pixbuf_->blendPixel(x1  , y0, rgba,~t&255);
-                    pixbuf_->blendPixel(x1-1, y0, rgba,t);
-                }
-            }
-            else
-            {
-                while(--dy)
-                {
-                    error_acc+=error_adj;
-                    ++y0;
-                    x1=x0+(error_acc>>16);
-                    t=(error_acc>>8)&255;
-                    pixbuf_->blendPixel(x1     , y0, rgba,~t&255);
-                    pixbuf_->blendPixel(x1+xDir, y0, rgba,t);
-                }
-            }
-        }                                         // x-major line
-        else
-        {
-            int error_adj=(dy<<16)/dx;
-            while(--dx)
-            {
-                error_acc+=error_adj;
-                x0+=xDir;
-                y1=y0+(error_acc>>16);
-                t=(error_acc>>8)&255;
-                pixbuf_->blendPixel(x0, y1  , rgba,~t&255);
-                pixbuf_->blendPixel(x0, y1+1, rgba,t);
-            }
-        }
-    }
-
-    template class LineRasterizerAA<Image32>;
-    template void LineRasterizerAA<Image32>::render<SHIFT0>(const geometry_type&,const Color&);
-}

Deleted: trunk/src/line_symbolizer.cpp
===================================================================
--- trunk/src/line_symbolizer.cpp	2006-03-22 15:46:58 UTC (rev 193)
+++ trunk/src/line_symbolizer.cpp	2006-03-22 15:48:54 UTC (rev 194)
@@ -1,167 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id$
-
-#include "line_symbolizer.hpp"
-
-#include "agg_basics.h"
-#include "agg_rendering_buffer.h"
-#include "agg_rasterizer_scanline_aa.h"
-#include "agg_conv_stroke.h"
-#include "agg_conv_dash.h"
-#include "agg_conv_contour.h"
-#include "agg_vcgen_stroke.h"
-#include "agg_conv_adaptor_vcgen.h"
-#include "agg_conv_smooth_poly1.h"
-#include "agg_conv_marker.h"
-#include "agg_arrowhead.h"
-#include "agg_vcgen_markers_term.h"
-#include "agg_scanline_p.h"
-#include "agg_scanline_u.h"
-#include "agg_renderer_scanline.h"
-#include "agg_pixfmt_rgba.h"
-#include "agg_path_storage.h"
-#include "agg_renderer_outline_aa.h"
-#include "agg_rasterizer_outline_aa.h"
-#include "agg_rasterizer_outline.h"
-#include "agg_renderer_outline_image.h"
-
-namespace mapnik
-{
-    line_symbolizer::line_symbolizer(stroke const& stroke)
-	: symbolizer(),
-	  stroke_(stroke) {}
-    
-    line_symbolizer::line_symbolizer(const Color& pen,float width)
-	    : symbolizer(),
-	      stroke_(pen,width) {}
-	
-    void line_symbolizer::render(Feature const& feat, CoordTransform const& t,Image32& image) const 
-    {
-	typedef agg::renderer_base<agg::pixfmt_rgba32> ren_base; 
-	typedef coord_transform<CoordTransform,geometry_type> path_type;
-	typedef agg::renderer_outline_aa<ren_base> renderer_oaa;
-	typedef agg::rasterizer_outline_aa<renderer_oaa> rasterizer_outline_aa;
-	typedef agg::renderer_scanline_aa_solid<ren_base> renderer;
-	
-	geometry_ptr const& geom=feat.get_geometry();
-	if (geom && geom->num_points() > 1)
-	{
-	    path_type path(t,*geom);
-	    agg::row_ptr_cache<agg::int8u> buf(image.raw_data(),image.width(),image.height(),
-					       image.width()*4);
-	    agg::pixfmt_rgba32 pixf(buf);
-	    ren_base renb(pixf);	    
-	
-	    Color const& col = stroke_.get_color();
-	    unsigned r=col.red();
-	    unsigned g=col.green();
-	    unsigned b=col.blue();	    
-             
-	    if (stroke_.has_dash())
-	    {
-		renderer ren(renb);	
-		agg::rasterizer_scanline_aa<> ras;
-		agg::scanline_u8 sl;
-		agg::conv_dash<path_type> dash(path);
-		dash_array const& d = stroke_.get_dash_array();
-		dash_array::const_iterator itr = d.begin();
-		dash_array::const_iterator end = d.end();
-		while (itr != end)
-		{
-		    dash.add_dash(itr->first, itr->second);
-		    ++itr;
-		}
-		agg::conv_stroke<agg::conv_dash<path_type > > stroke(dash);
-		    
-		line_join_e join=stroke_.get_line_join();
-		if ( join == MITER_JOIN)
-		    stroke.generator().line_join(agg::miter_join);
-		else if( join == MITER_REVERT_JOIN) 
-		    stroke.generator().line_join(agg::miter_join);
-		else if( join == ROUND_JOIN) 
-		    stroke.generator().line_join(agg::round_join);
-		else
-		    stroke.generator().line_join(agg::bevel_join);
-		    
-		line_cap_e cap=stroke_.get_line_cap();
-		if (cap == BUTT_CAP)    
-		    stroke.generator().line_cap(agg::butt_cap);
-		else if (cap == SQUARE_CAP)
-		    stroke.generator().line_cap(agg::square_cap);
-		else 
-		    stroke.generator().line_cap(agg::round_cap);
-		    
-		stroke.generator().miter_limit(4.0);
-		stroke.generator().width(stroke_.get_width());
-		    
-		ras.clip_box(0,0,image.width(),image.height());
-		ras.add_path(stroke);
-		ren.color(agg::rgba8(r, g, b, int(255*stroke_.get_opacity())));
-		agg::render_scanlines(ras, sl, ren);
-	    }
-	    else if (0)//(stroke_.get_width() <= 1.0)
-	    {
-		//faster but clipping doesn't work 
-		agg::line_profile_aa prof;
-		prof.width(stroke_.get_width());
-		renderer_oaa ren_oaa(renb, prof);
-		rasterizer_outline_aa ras_oaa(ren_oaa);
-		
-		ren_oaa.color(agg::rgba8(r, g, b, int(255*stroke_.get_opacity())));
-		ren_oaa.clip_box(0,0,image.width(),image.height());
-		ras_oaa.add_path(path);		
-		
-	    }
-	    else 
-	    {
-		renderer ren(renb);	
-		agg::rasterizer_scanline_aa<> ras;
-		agg::scanline_p8 sl;
-		agg::conv_stroke<path_type>  stroke(path);
-		
-		line_join_e join=stroke_.get_line_join();
-		if ( join == MITER_JOIN)
-		    stroke.generator().line_join(agg::miter_join);
-		else if( join == MITER_REVERT_JOIN) 
-		    stroke.generator().line_join(agg::miter_join);
-		else if( join == ROUND_JOIN) 
-		    stroke.generator().line_join(agg::round_join);
-		else
-		    stroke.generator().line_join(agg::bevel_join);
-		    
-		line_cap_e cap=stroke_.get_line_cap();
-		if (cap == BUTT_CAP)    
-		    stroke.generator().line_cap(agg::butt_cap);
-		else if (cap == SQUARE_CAP)
-		    stroke.generator().line_cap(agg::square_cap);
-		else 
-		    stroke.generator().line_cap(agg::round_cap);
-		
-		stroke.generator().miter_limit(4.0);
-		stroke.generator().width(stroke_.get_width());
-		
-		ras.clip_box(0,0,image.width(),image.height());
-		ras.add_path(stroke);
-		ren.color(agg::rgba8(r, g, b, int(255*stroke_.get_opacity())));
-		agg::render_scanlines(ras, sl, ren);
-	    }
-	}
-    }
-}

Deleted: trunk/src/polygon_symbolizer.cpp
===================================================================
--- trunk/src/polygon_symbolizer.cpp	2006-03-22 15:46:58 UTC (rev 193)
+++ trunk/src/polygon_symbolizer.cpp	2006-03-22 15:48:54 UTC (rev 194)
@@ -1,71 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id$
-
-#include "polygon_symbolizer.hpp"
-
-#include "agg_basics.h"
-#include "agg_rendering_buffer.h"
-#include "agg_rasterizer_scanline_aa.h"
-#include "agg_scanline_p.h"
-#include "agg_scanline_u.h"
-#include "agg_renderer_scanline.h"
-#include "agg_pixfmt_rgba.h"
-#include "agg_path_storage.h"
-#include "agg_span_allocator.h"
-#include "agg_span_pattern_rgba.h"
-#include "agg_image_accessors.h"
-
-namespace mapnik
-{
-    polygon_symbolizer::polygon_symbolizer(const Color& fill)
-	: symbolizer(),
-	  fill_(fill) {}
-    
- 
-    void  polygon_symbolizer::render(Feature const& feat,CoordTransform const& t,Image32& image) const
-    {
-	typedef  coord_transform<CoordTransform,geometry_type> path_type;
-	typedef agg::renderer_base<agg::pixfmt_rgba32> ren_base;    
-	typedef agg::renderer_scanline_aa_solid<ren_base> renderer;
-
-	geometry_ptr const& geom=feat.get_geometry();
-	if (geom && geom->num_points() > 2) 
-	{
-	    path_type path(t,*geom);
-	    agg::row_ptr_cache<agg::int8u> buf(image.raw_data(),image.width(),image.height(),
-					       image.width()*4);
-	    agg::pixfmt_rgba32 pixf(buf);
-	    ren_base renb(pixf);	    
-	    
-	    unsigned r=fill_.red();
-	    unsigned g=fill_.green();
-	    unsigned b=fill_.blue();
-	    unsigned a=fill_.alpha();
-	    renderer ren(renb);
-	    
-	    agg::rasterizer_scanline_aa<> ras;
-	    agg::scanline_u8 sl;
-	    ras.clip_box(0,0,image.width(),image.height());
-	    ras.add_path(path);
-	    ren.color(agg::rgba8(r, g, b, a));
-	    agg::render_scanlines(ras, sl, ren);
-	}
-    }
-}

Deleted: trunk/src/scanline.cpp
===================================================================
--- trunk/src/scanline.cpp	2006-03-22 15:46:58 UTC (rev 193)
+++ trunk/src/scanline.cpp	2006-03-22 15:48:54 UTC (rev 194)
@@ -1,46 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: scanline.cpp 17 2005-03-08 23:58:43Z pavlenko $
-
-#include <vector>
-#include "memory.hpp"
-#include "graphics.hpp"
-#include "scanline.hpp"
-
-namespace mapnik
-{
-
-    template <typename PixBuffer>
-    template <typename Transform>
-    void ScanlineRasterizer<PixBuffer>::render(const geometry_type& geom,const Color& c)
-    {
-	// ????
-    }
-
-    template <typename PixBuffer>
-    inline void ScanlineRasterizer<PixBuffer>::render_hline(int x0,int x1,int y,unsigned int rgba)
-    {
-        int x;
-        if (x0<0) x0=0;
-        if (x1> (int)pixbuf_->width()-1) x1=pixbuf_->width()-1;
-        for(x=x0;x<=x1;x++) pixbuf_->setPixel(x,y,rgba);
-    }
-
-    template class ScanlineRasterizer<Image32>;
-}

Deleted: trunk/src/scanline_aa.cpp
===================================================================
--- trunk/src/scanline_aa.cpp	2006-03-22 15:46:58 UTC (rev 193)
+++ trunk/src/scanline_aa.cpp	2006-03-22 15:48:54 UTC (rev 194)
@@ -1,619 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//  Credits:
-//  I gratefully acknowledge the inspiring work of Maxim Shemanarev (McSeem), 
-//  author of Anti-Grain Geometry (http://www.antigrain.com), and also the developers 
-//  of the FreeType library (http://www.freetype.org). I have slightly modified the polygon 
-//  rasterizing algorithm to work with my library, but render_line and 
-//  render_hline remain intact. 
-
-//$Id: scanline_aa.cpp 29 2005-04-01 14:30:11Z pavlenko $
-
-#include "scanline_aa.hpp"
-
-namespace mapnik
-{
-
-    inline void cell_aa::set_cover(int c, int a)
-    {
-        cover = c;
-        area = a;
-    }
-    inline void cell_aa::add_cover(int c, int a)
-    {
-        cover += c;
-        area += a;
-    }
-    inline void cell_aa::set_coord(int cx, int cy)
-    {
-        x = short(cx);
-        y = short(cy);
-        packed_coord = (cy << 16) + cx;
-    }
-    inline void cell_aa::set(int cx, int cy, int c, int a)
-    {
-        x = short(cx);
-        y = short(cy);
-        packed_coord = (cy << 16) + cx;
-        cover = c;
-        area = a;
-    }
-
-    outline_aa::~outline_aa()
-    {
-        delete [] m_sorted_cells;
-        if(m_num_blocks)
-        {
-            cell_aa** ptr = m_cells + m_num_blocks - 1;
-            while(m_num_blocks--)
-            {
-                delete [] *ptr;
-                ptr--;
-            }
-            delete [] m_cells;
-        }
-    }
-
-    outline_aa::outline_aa() :
-	m_num_blocks(0),
-        m_max_blocks(0),
-        m_cur_block(0),
-        m_num_cells(0),
-        m_cells(0),
-        m_cur_cell_ptr(0),
-        m_sorted_cells(0),
-        m_sorted_size(0),
-        m_cur_x(0),
-        m_cur_y(0),
-        m_min_x(0x7FFFFFFF),
-        m_min_y(0x7FFFFFFF),
-        m_max_x(-0x7FFFFFFF),
-        m_max_y(-0x7FFFFFFF),
-        m_sorted(false)
-    {
-        m_cur_cell.set(0x7FFF, 0x7FFF, 0, 0);
-    }
-
-    void outline_aa::reset()
-    {
-        m_num_cells = 0;
-        m_cur_block = 0;
-        m_cur_cell.set(0x7FFF, 0x7FFF, 0, 0);
-        m_sorted = false;
-        m_min_x =  0x7FFFFFFF;
-        m_min_y =  0x7FFFFFFF;
-        m_max_x = -0x7FFFFFFF;
-        m_max_y = -0x7FFFFFFF;
-    }
-
-    void outline_aa::allocate_block()
-    {
-        if(m_cur_block >= m_num_blocks)
-        {
-            if(m_num_blocks >= m_max_blocks)
-            {
-                cell_aa** new_cells = new cell_aa* [m_max_blocks + cell_block_pool];
-                if(m_cells)
-                {
-                    memcpy(new_cells, m_cells, m_max_blocks * sizeof(cell_aa*));
-                    delete [] m_cells;
-                }
-                m_cells = new_cells;
-                m_max_blocks += cell_block_pool;
-            }
-            m_cells[m_num_blocks++] = new cell_aa [unsigned(cell_block_size)];
-        }
-        m_cur_cell_ptr = m_cells[m_cur_block++];
-    }
-
-    inline void outline_aa::add_cur_cell()
-    {
-        if(m_cur_cell.area | m_cur_cell.cover)
-        {
-            if((m_num_cells & cell_block_mask) == 0)
-            {
-                if(m_num_blocks >= cell_block_limit) return;
-                allocate_block();
-            }
-            *m_cur_cell_ptr++ = m_cur_cell;
-            ++m_num_cells;
-            if(m_cur_cell.x < m_min_x) m_min_x = m_cur_cell.x;
-            if(m_cur_cell.x > m_max_x) m_max_x = m_cur_cell.x;
-        }
-    }
-
-    inline void outline_aa::set_cur_cell(int x, int y)
-    {
-        if(m_cur_cell.packed_coord != (y << 16) + x)
-        {
-            add_cur_cell();
-            m_cur_cell.set(x, y, 0, 0);
-        }
-    }
-
-    inline void outline_aa::render_hline(int ey, int x1, int y1, int x2, int y2)
-    {
-        int ex1 = x1 >> poly_base_shift;
-        int ex2 = x2 >> poly_base_shift;
-        int fx1 = x1 & poly_base_mask;
-        int fx2 = x2 & poly_base_mask;
-
-        int delta, p, first, dx;
-        int incr, lift, mod, rem;
-
- 
-        if(y1 == y2)
-        {
-            set_cur_cell(ex2, ey);
-            return;
-        }
-
- 
-        if(ex1 == ex2)
-        {
-            delta = y2 - y1;
-            m_cur_cell.add_cover(delta, (fx1 + fx2) * delta);
-            return;
-        }
-        p = (poly_base_size - fx1) * (y2 - y1);
-        first = poly_base_size;
-        incr  = 1;
-
-        dx = x2 - x1;
-
-        if(dx < 0)
-        {
-            p     = fx1 * (y2 - y1);
-            first = 0;
-            incr  = -1;
-            dx    = -dx;
-        }
-
-        delta = p / dx;
-        mod   = p % dx;
-
-        if(mod < 0)
-        {
-            delta--;
-            mod += dx;
-        }
-
-        m_cur_cell.add_cover(delta, (fx1 + first) * delta);
-
-        ex1 += incr;
-        set_cur_cell(ex1, ey);
-        y1  += delta;
-
-        if(ex1 != ex2)
-        {
-            p     = poly_base_size * (y2 - y1 + delta);
-            lift  = p / dx;
-            rem   = p % dx;
-
-            if (rem < 0)
-            {
-                lift--;
-                rem += dx;
-            }
-
-            mod -= dx;
-
-            while (ex1 != ex2)
-            {
-                delta = lift;
-                mod  += rem;
-                if(mod >= 0)
-                {
-                    mod -= dx;
-                    delta++;
-                }
-
-                m_cur_cell.add_cover(delta, (poly_base_size) * delta);
-                y1  += delta;
-                ex1 += incr;
-                set_cur_cell(ex1, ey);
-            }
-        }
-        delta = y2 - y1;
-        m_cur_cell.add_cover(delta, (fx2 + poly_base_size - first) * delta);
-    }
-
-    void outline_aa::render_line(int x1, int y1, int x2, int y2)
-    {
-        int ey1 = y1 >> poly_base_shift;
-        int ey2 = y2 >> poly_base_shift;
-        int fy1 = y1 & poly_base_mask;
-        int fy2 = y2 & poly_base_mask;
-
-        int dx, dy, x_from, x_to;
-        int p, rem, mod, lift, delta, first, incr;
-
-        dx = x2 - x1;
-        dy = y2 - y1;
-
-  
-        if(ey1 == ey2)
-        {
-            render_hline(ey1, x1, fy1, x2, fy2);
-            return;
-        }
-        incr  = 1;
-        if(dx == 0)
-        {
-            int ex = x1 >> poly_base_shift;
-            int two_fx = (x1 - (ex << poly_base_shift)) << 1;
-            int area;
-
-            first = poly_base_size;
-            if(dy < 0)
-            {
-                first = 0;
-                incr  = -1;
-            }
-
-            x_from = x1;
-
-            delta = first - fy1;
-            m_cur_cell.add_cover(delta, two_fx * delta);
-
-            ey1 += incr;
-            set_cur_cell(ex, ey1);
-
-            delta = first + first - poly_base_size;
-            area = two_fx * delta;
-            while(ey1 != ey2)
-            {
-
-                m_cur_cell.set_cover(delta, area);
-                ey1 += incr;
-                set_cur_cell(ex, ey1);
-            }
-
-            delta = fy2 - poly_base_size + first;
-            m_cur_cell.add_cover(delta, two_fx * delta);
-            return;
-        }
-
-        p = (poly_base_size - fy1) * dx;
-
-        first = poly_base_size;
-
-        if(dy < 0)
-        {
-            p     = fy1 * dx;
-            first = 0;
-            incr  = -1;
-            dy    = -dy;
-        }
-
-        delta = p / dy;
-        mod   = p % dy;
-
-        if(mod < 0)
-        {
-            delta--;
-            mod += dy;
-        }
-
-        x_from = x1 + delta;
-        render_hline(ey1, x1, fy1, x_from, first);
-
-        ey1 += incr;
-        set_cur_cell(x_from >> poly_base_shift, ey1);
-
-        if(ey1 != ey2)
-        {
-            p     = poly_base_size * dx;
-            lift  = p / dy;
-            rem   = p % dy;
-
-            if(rem < 0)
-            {
-                lift--;
-                rem += dy;
-            }
-            mod -= dy;
-
-            while(ey1 != ey2)
-            {
-                delta = lift;
-                mod  += rem;
-                if (mod >= 0)
-                {
-                    mod -= dy;
-                    delta++;
-                }
-
-                x_to = x_from + delta;
-                render_hline(ey1, x_from, poly_base_size - first, x_to, first);
-                x_from = x_to;
-
-                ey1 += incr;
-                set_cur_cell(x_from >> poly_base_shift, ey1);
-            }
-        }
-        render_hline(ey1, x_from, poly_base_size - first, x2, fy2);
-    }
-
-    void outline_aa::move_to(int x, int y)
-    {
-        if ( m_sorted ) reset();
-        set_cur_cell(x >> poly_base_shift, y >> poly_base_shift);
-        m_cur_x = x;
-        m_cur_y = y;
-    }
-
-    void outline_aa::line_to(int x, int y)
-    {
-        render_line(m_cur_x, m_cur_y, x, y);
-        m_cur_x = x;
-        m_cur_y = y;
-        m_sorted = false;
-    }
-
-    enum
-    {
-	qsort_threshold = 9
-    };
-
-    template <class T> static inline void swap_cells(T* a, T* b)
-    {
-        T temp = *a;
-        *a = *b;
-        *b = temp;
-    }
-
-    template <class T> static inline bool less_than(T* a, T* b)
-    {
-        return (*a)->packed_coord < (*b)->packed_coord;
-    }
-
-    void outline_aa::qsort_cells(cell_aa** start, unsigned num)
-    {
-        cell_aa**  stack[80];
-        cell_aa*** top;
-        cell_aa**  limit;
-        cell_aa**  base;
-
-        limit = start + num;
-        base  = start;
-        top   = stack;
-
-        for (;;)
-        {
-            int len = int(limit - base);
-
-            cell_aa** i;
-            cell_aa** j;
-            cell_aa** pivot;
-
-            if(len > qsort_threshold)
-            { 
-                pivot = base + len / 2;
-                swap_cells(base, pivot);
-
-                i = base + 1;
-                j = limit - 1;
-
-                if(less_than(j, i))
-                {
-                    swap_cells(i, j);
-                }
-
-                if(less_than(base, i))
-                {
-                    swap_cells(base, i);
-                }
-
-                if(less_than(j, base))
-                {
-                    swap_cells(base, j);
-                }
-
-                for(;;)
-                {
-                    do i++; while( less_than(i, base) );
-                    do j--; while( less_than(base, j) );
-
-                    if ( i > j )
-                    {
-                        break;
-                    }
-
-                    swap_cells(i, j);
-                }
-
-                swap_cells(base, j);
-
-                if(j - base > limit - i)
-                {
-                    top[0] = base;
-                    top[1] = j;
-                    base   = i;
-                }
-                else
-                {
-                    top[0] = i;
-                    top[1] = limit;
-                    limit  = j;
-                }
-                top += 2;
-            }
-            else
-            {
-
-                j = base;
-                i = j + 1;
-
-                for(; i < limit; j = i, i++)
-                {
-                    for(; less_than(j + 1, j); j--)
-                    {
-                        swap_cells(j + 1, j);
-                        if (j == base)
-                        {
-                            break;
-                        }
-                    }
-                }
-                if(top > stack)
-                {
-                    top  -= 2;
-                    base  = top[0];
-                    limit = top[1];
-                }
-                else
-                {
-                    break;
-                }
-            }
-        }
-    }
-
-    void outline_aa::sort_cells()
-    {
-        if(m_num_cells == 0) return;
-        if(m_num_cells > m_sorted_size)
-        {
-            delete [] m_sorted_cells;
-            m_sorted_size = m_num_cells;
-            m_sorted_cells = new cell_aa* [m_num_cells + 1];
-        }
-
-        cell_aa** sorted_ptr = m_sorted_cells;
-        cell_aa** block_ptr = m_cells;
-        cell_aa*  cell_ptr;
-
-        unsigned nb = m_num_cells >> cell_block_shift;
-        unsigned i;
-
-        while(nb--)
-        {
-            cell_ptr = *block_ptr++;
-            i = cell_block_size;
-            while(i--)
-            {
-                *sorted_ptr++ = cell_ptr++;
-            }
-        }
-
-        cell_ptr = *block_ptr++;
-        i = m_num_cells & cell_block_mask;
-        while(i--)
-        {
-            *sorted_ptr++ = cell_ptr++;
-        }
-        m_sorted_cells[m_num_cells] = 0;
-        qsort_cells(m_sorted_cells, m_num_cells);
-        m_min_y = m_sorted_cells[0]->y;
-        m_max_y = m_sorted_cells[m_num_cells - 1]->y;
-    }
-
-    const cell_aa* const* outline_aa::cells()
-    {
-        if(!m_sorted)
-        {
-            add_cur_cell();
-            sort_cells();
-            m_sorted = true;
-        }
-        return m_sorted_cells;
-    }   
-
-    template <typename PixBuffer>
-    template <typename Transform>
-    void ScanlineRasterizerAA<PixBuffer>::render(const geometry_type& geom,const Color& c)
-    {
-        reset();
-        unsigned rgba=c.rgba();
-        clip_box(0,0,pixbuf_->width(),pixbuf_->height());
-        geometry_type::path_iterator<Transform> itr=geom.template begin<Transform>();
-        while(itr!=geom.template end<Transform>())
-        {
-            if (itr->cmd == SEG_MOVETO)
-            {
-                move_to(itr->x,itr->y);
-            }
-            else if (itr->cmd == SEG_LINETO)
-            {
-                line_to(itr->x,itr->y);
-            }
-            ++itr;
-        }
-
-        if(rewind_scanlines())
-        {
-            scanline_u8 sl;
-            sl.reset(min_x(),max_x());
-            while(sweep_scanline(sl))
-            {
-                int y = sl.y();
-                unsigned num_spans = sl.num_spans();
-                typename scanline_u8::const_iterator span = sl.begin();
-                do
-                {
-                    int x = span->x;
-                    if(span->len>0)
-                    {
-                        blend_hline(x,span->len,y,span->covers,rgba);
-                    }
-                    ++span;
-                } while(--num_spans);
-            }
-        }
-    }
-    template <typename PixBuffer>
-    inline void ScanlineRasterizerAA<PixBuffer>::blend_hline(int x0,int len,int y,const unsigned char* covers,
-							     unsigned rgba)
-    {
-        if (y<0) return;
-        if (y>(int)pixbuf_->height()-1) return;
-  
-        if(x0<0)
-        {
-            len -= 0 - x0;
-            if(len <= 0) return;
-            covers += 0 - x0;
-            x0 = 0;
-        }
-        if(x0 + len > (int)pixbuf_->width())
-        {
-            len = pixbuf_->width() - x0 + 1;
-            if(len <= 0) return;
-        }
-        for(int x=x0;x<x0+len;x++)
-        {
-            int alpha = int(*covers++);
-            pixbuf_->blendPixel(x,y,rgba,alpha);
-        }
-    }
-    
-    template <typename PixBuffer>
-    inline void ScanlineRasterizerAA<PixBuffer>::render_hline(int x0,int x1,int y,unsigned rgba)
-    {
-        if (y < 0) return;
-        if (y > (int)pixbuf_->height() - 1) return;
-        if (x0 < 0) x0 = 0;
-        if (x1 >(int)pixbuf_->width() - 1)  x1 = pixbuf_->width()-1;
-        for(int x=x0;x<=x1;x++) pixbuf_->setPixel(x,y,rgba);
-    }
-
-    template class ScanlineRasterizerAA<Image32>;
-    template void ScanlineRasterizerAA<Image32>::render<SHIFT8>(const geometry_type&,const Color&);
-}



From pavlenko at berlios.de  Wed Mar 22 16:50:14 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:50:14 +0100
Subject: [Mapnik-svn] r195 - trunk/include
Message-ID: <200603221550.k2MFoEJb016351@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:50:05 +0100 (Wed, 22 Mar 2006)
New Revision: 195

Removed:
   trunk/include/scanline_aa.hpp
Log:
removed unused files

Deleted: trunk/include/scanline_aa.hpp
===================================================================
--- trunk/include/scanline_aa.hpp	2006-03-22 15:48:54 UTC (rev 194)
+++ trunk/include/scanline_aa.hpp	2006-03-22 15:50:05 UTC (rev 195)
@@ -1,843 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//  Credits:
-//  I gratefully acknowledge the inspiring work of Maxim Shemanarev (McSeem), 
-//  author of Anti-Grain Geometry (http://www.antigrain.com), and also the developers 
-//  of the FreeType library (http://www.freetype.org). I have slightly modified the polygon 
-//  rasterizing algorithm to work with my library, but render_line and 
-//  render_hline remain intact. 
-
-
-//$Id: scanline_aa.hpp 39 2005-04-10 20:39:53Z pavlenko $
-
-#ifndef SCANLINE_AA_HPP
-#define SCANLINE_AA_HPP
-
-#include "envelope.hpp"
-#include "geometry.hpp"
-#include "graphics.hpp"
-#include "style.hpp"
-
-namespace mapnik
-{
-    enum path_commands_e
-	{
-	    path_cmd_stop     = 0,                    //----path_cmd_stop
-	    path_cmd_move_to  = 1,                    //----path_cmd_move_to
-	    path_cmd_line_to  = 2,                    //----path_cmd_line_to
-	    path_cmd_curve3   = 3,                    //----path_cmd_curve3
-	    path_cmd_curve4   = 4,                    //----path_cmd_curve4
-	    path_cmd_end_poly = 6,                    //----path_cmd_end_poly
-	    path_cmd_mask     = 0x0F                  //----path_cmd_mask
-	};
-
-    //------------------------------------------------------------path_flags_e
-    enum path_flags_e
-	{
-	    path_flags_none  = 0,                     //----path_flags_none
-	    path_flags_ccw   = 0x10,                  //----path_flags_ccw
-	    path_flags_cw    = 0x20,                  //----path_flags_cw
-	    path_flags_close = 0x40,                  //----path_flags_close
-	    path_flags_mask  = 0xF0                   //----path_flags_mask
-	};
-
-    inline bool is_vertex(unsigned c)
-    {
-        return c >= path_cmd_move_to && c < path_cmd_end_poly;
-    }
-
-    inline bool is_move_to(unsigned c)
-    {
-        return c == path_cmd_move_to;
-    }
-
-    inline bool is_close(unsigned c)
-    {
-        return (c & ~(path_flags_cw | path_flags_ccw)) ==
-            (path_cmd_end_poly | path_flags_close);
-    }
-
-    inline unsigned clipping_flags(int x, int y, const Envelope<int>& clip_box)
-    {
-        return  (x > clip_box.maxx()) |
-            ((y > clip_box.maxy()) << 1) |
-            ((x < clip_box.minx()) << 2) |
-            ((y < clip_box.miny()) << 3);
-    }
-
-    template<class T>
-    inline unsigned clip_liang_barsky(T x1, T y1, T x2, T y2,
-				      const Envelope<T>& clip_box,
-				      T* x, T* y)
-    {
-        const double nearzero = 1e-30;
-
-        double deltax = x2 - x1;
-        double deltay = y2 - y1;
-        double xin;
-        double xout;
-        double yin;
-        double yout;
-        double tinx;
-        double tiny;
-        double toutx;
-        double touty;
-        double tin1;
-        double tin2;
-        double tout1;
-        unsigned np = 0;
-
-        if(deltax == 0.0)
-        {
-            // bump off of the vertical
-            deltax = (x1 > clip_box.minx()) ? -nearzero : nearzero;
-        }
-
-        if(deltay == 0.0)
-        {
-            // bump off of the horizontal
-            deltay = (y1 > clip_box.miny()) ? -nearzero : nearzero;
-        }
-
-        if(deltax > 0.0)
-        {
-            // points to right
-            xin  = clip_box.minx();
-            xout = clip_box.maxx();
-        }
-        else
-        {
-            xin  = clip_box.maxx();
-            xout = clip_box.minx();
-        }
-
-        if(deltay > 0.0)
-        {
-            // points up
-            yin  = clip_box.miny();
-            yout = clip_box.maxy();
-        }
-        else
-        {
-            yin  = clip_box.maxy();
-            yout = clip_box.miny();
-        }
-
-        tinx = (xin - x1) / deltax;
-        tiny = (yin - y1) / deltay;
-
-        if (tinx < tiny)
-        {
-            // hits x first
-            tin1 = tinx;
-            tin2 = tiny;
-        }
-        else
-        {
-            // hits y first
-            tin1 = tiny;
-            tin2 = tinx;
-        }
-
-        if(tin1 <= 1.0)
-        {
-            if(0.0 < tin1)
-            {
-                *x++ = (T)xin;
-                *y++ = (T)yin;
-                ++np;
-            }
-
-            if(tin2 <= 1.0)
-            {
-                toutx = (xout - x1) / deltax;
-                touty = (yout - y1) / deltay;
-
-                tout1 = (toutx < touty) ? toutx : touty;
-
-                if(tin2 > 0.0 || tout1 > 0.0)
-                {
-                    if(tin2 <= tout1)
-                    {
-                        if(tin2 > 0.0)
-                        {
-                            if(tinx > tiny)
-                            {
-                                *x++ = (T)xin;
-                                *y++ = (T)(y1 + tinx * deltay);
-                            }
-                            else
-                            {
-                                *x++ = (T)(x1 + tiny * deltax);
-                                *y++ = (T)yin;
-                            }
-                            ++np;
-                        }
-
-                        if(tout1 < 1.0)
-                        {
-                            if(toutx < touty)
-                            {
-                                *x++ = (T)xout;
-                                *y++ = (T)(y1 + toutx * deltay);
-                            }
-                            else
-                            {
-                                *x++ = (T)(x1 + touty * deltax);
-                                *y++ = (T)yout;
-                            }
-                        }
-                        else
-                        {
-                            *x++ = x2;
-                            *y++ = y2;
-                        }
-                        ++np;
-                    }
-                    else
-                    {
-                        if(tinx > tiny)
-                        {
-                            *x++ = (T)xin;
-                            *y++ = (T)yout;
-                        }
-                        else
-                        {
-                            *x++ = (T)xout;
-                            *y++ = (T)yin;
-                        }
-                        ++np;
-                    }
-                }
-            }
-        }
-        return np;
-    }
-
-    enum
-	{
-	    poly_base_shift = 8,
-	    poly_base_size  = 1 << poly_base_shift,
-	    poly_base_mask  = poly_base_size - 1
-	};
-
-    inline int poly_coord(double c)
-    {
-        return int(c * poly_base_size);
-    }
-
-    struct cell_aa
-    {
-        short x;
-        short y;
-        int   packed_coord;
-        int   cover;
-        int   area;
-
-        void set(int x, int y, int c, int a);
-        void set_coord(int x, int y);
-        void set_cover(int c, int a);
-        void add_cover(int c, int a);
-    };
-
-    class outline_aa
-    {
-        enum {
-	    cell_block_shift = 12,
-	    cell_block_size  = 1 << cell_block_shift,
-	    cell_block_mask  = cell_block_size - 1,
-	    cell_block_pool  = 256,
-	    cell_block_limit = 1024
-	};
-
-    public:
-
-	~outline_aa();
-	outline_aa();
-
-	void reset();
-
-	void move_to(int x, int y);
-	void line_to(int x, int y);
-
-	int min_x() const { return m_min_x; }
-	int min_y() const { return m_min_y; }
-	int max_x() const { return m_max_x; }
-	int max_y() const { return m_max_y; }
-
-	const cell_aa* const* cells();
-	unsigned num_cells() { cells(); return m_num_cells; }
-	bool sorted() const { return m_sorted; }
-
-    private:
-	outline_aa(const outline_aa&);
-	const outline_aa& operator = (const outline_aa&);
-
-	void set_cur_cell(int x, int y);
-	void add_cur_cell();
-	void sort_cells();
-	void render_hline(int ey, int x1, int y1, int x2, int y2);
-	void render_line(int x1, int y1, int x2, int y2);
-	void allocate_block();
-
-	static void qsort_cells(cell_aa** start, unsigned num);
-
-    private:
-	unsigned  m_num_blocks;
-	unsigned  m_max_blocks;
-	unsigned  m_cur_block;
-	unsigned  m_num_cells;
-	cell_aa** m_cells;
-	cell_aa*  m_cur_cell_ptr;
-	cell_aa** m_sorted_cells;
-	unsigned  m_sorted_size;
-	cell_aa   m_cur_cell;
-	int       m_cur_x;
-	int       m_cur_y;
-	int       m_min_x;
-	int       m_min_y;
-	int       m_max_x;
-	int       m_max_y;
-	bool      m_sorted;
-    };
-
-    enum filling_rule_e
-	{
-	    fill_non_zero,
-	    fill_even_odd
-	};
-
-    template <typename PixBuffer> class ScanlineRasterizerAA
-    {
-        enum status
-	    {
-		status_initial,
-		status_line_to,
-		status_closed
-	    };
-
-        struct iterator
-        {
-            const cell_aa* const* cells;
-            int                   cover;
-            int                   last_y;
-        };
-        enum
-	    {
-		aa_shift = 8,
-		aa_num   = 1 << aa_shift,
-		aa_mask  = aa_num - 1,
-		aa_2num  = aa_num * 2,
-		aa_2mask = aa_2num - 1
-	    };
-    private:
-	PixBuffer*     pixbuf_;
-	outline_aa     m_outline;
-	int            m_gamma[aa_num];
-	filling_rule_e m_filling_rule;
-	int            m_clipped_start_x;
-	int            m_clipped_start_y;
-	int            m_start_x;
-	int            m_start_y;
-	int            m_prev_x;
-	int            m_prev_y;
-	unsigned       m_prev_flags;
-	unsigned       m_status;
-	Envelope<int>  m_clip_box;
-	bool           m_clipping;
-	iterator       m_iterator;
-    public:
-	ScanlineRasterizerAA(PixBuffer& pixbuf)
-	    :pixbuf_(&pixbuf),
-	     m_filling_rule(fill_non_zero),
-	     m_clipped_start_x(0),
-	     m_clipped_start_y(0),
-	     m_start_x(0),
-	     m_start_y(0),
-	     m_prev_x(0),
-	     m_prev_y(0),
-	     m_prev_flags(0),
-	     m_status(status_initial),
-	     m_clipping(false)
-	{
-	    for(int i = 0; i < aa_num; i++) m_gamma[i] = i;
-	}
-	
-	template <typename Transform>
-	void render(const geometry_type& geom,const Color& c);
-
-    private:
-	ScanlineRasterizerAA(const ScanlineRasterizerAA&);
-	ScanlineRasterizerAA& operator=(const ScanlineRasterizerAA&);
-	void render_hline(int x0,int x1,int y,unsigned rgba);
-	void blend_hline(int x0,int x1,int y,const unsigned char* cover,
-			 unsigned rgba);
-	int min_x() const { return m_outline.min_x(); }
-	int min_y() const { return m_outline.min_y(); }
-	int max_x() const { return m_outline.max_x(); }
-	int max_y() const { return m_outline.max_y(); }
-	void reset();
-	void filling_rule(filling_rule_e filling_rule);
-	void clip_box(double x1, double y1, double x2, double y2);
-	void reset_clipping();
-	template<class GammaF> void gamma(const GammaF& gamma_function)
-	{
-	    int i;
-	    for(i = 0; i < aa_num; i++)
-	    {
-		m_gamma[i] = int(floor(gamma_function(double(i) / aa_mask) * aa_mask + 0.5));
-	    }
-	}
-	unsigned apply_gamma(unsigned cover) const
-	{
-	    return m_gamma[cover];
-	}
-	void add_vertex(double x, double y, unsigned cmd);
-	void move_to(int x, int y);
-	void line_to(int x, int y);
-	void close_polygon();
-
-	void move_to_no_clip(int x, int y);
-	void line_to_no_clip(int x, int y);
-	void close_polygon_no_clip();
-	void clip_segment(int x, int y);
-	unsigned calculate_alpha(int area) const
-	{
-	    int cover = area >> (poly_base_shift*2 + 1 - aa_shift);
-
-	    if(cover < 0) cover = -cover;
-	    if(m_filling_rule == fill_even_odd)
-	    {
-		cover &= aa_2mask;
-		if(cover > aa_num)
-		{
-		    cover = aa_2num - cover;
-		}
-	    }
-	    if(cover > aa_mask) cover = aa_mask;
-	    return m_gamma[cover];
-	}
-
-
-	void sort()
-	{
-	    m_outline.cells();
-	}
-
-
-	bool rewind_scanlines()
-	{
-	    close_polygon();
-	    m_iterator.cells = m_outline.cells();
-	    if(m_outline.num_cells() == 0)
-	    {
-		return false;
-	    }
-	    m_iterator.cover  = 0;
-	    m_iterator.last_y = (*m_iterator.cells)->y;
-	    return true;
-	}
-
-
-	template<class Scanline> bool sweep_scanline(Scanline& sl)
-	{
-	    sl.reset_spans();
-	    for(;;)
-	    {
-		const cell_aa* cur_cell = *m_iterator.cells;
-		if(cur_cell == 0) return false;
-		++m_iterator.cells;
-		m_iterator.last_y = cur_cell->y;
-
-		for(;;)
-		{
-		    int coord  = cur_cell->packed_coord;
-		    int area   = cur_cell->area;
-		    int last_x = cur_cell->x;
-
-		    m_iterator.cover += cur_cell->cover;
-
-		    //accumulate all cells with the same coordinates
-		    for(; (cur_cell = *m_iterator.cells) != 0; ++m_iterator.cells)
-		    {
-			if(cur_cell->packed_coord != coord) break;
-			area             += cur_cell->area;
-			m_iterator.cover += cur_cell->cover;
-		    }
-
-		    int alpha;
-		    if(cur_cell == 0 || cur_cell->y != m_iterator.last_y)
-		    {
-
-			if(area)
-			{
-			    alpha = calculate_alpha((m_iterator.cover << (poly_base_shift + 1)) - area);
-			    if(alpha)
-			    {
-				sl.add_cell(last_x, alpha);
-			    }
-			    ++last_x;
-			}
-			break;
-		    }
-
-		    ++m_iterator.cells;
-
-		    if(area)
-		    {
-			alpha = calculate_alpha((m_iterator.cover << (poly_base_shift + 1)) - area);
-			if(alpha)
-			{
-			    sl.add_cell(last_x, alpha);
-			}
-			++last_x;
-		    }
-
-		    if(cur_cell->x > last_x)
-		    {
-			alpha = calculate_alpha(m_iterator.cover << (poly_base_shift + 1));
-			if(alpha)
-			{
-			    sl.add_span(last_x, cur_cell->x - last_x, alpha);
-			}
-		    }
-		}
-		if(sl.num_spans())
-		{
-		    sl.finalize(m_iterator.last_y);
-		    break;
-		}
-	    }
-	    return true;
-	}
-    };
-
-    template<typename PixBuffer>
-    void  ScanlineRasterizerAA<PixBuffer>::reset()
-    {
-        m_outline.reset();
-        m_status = status_initial;
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::clip_box(double x1, double y1, double x2, double y2)
-    {
-        //reset();
-        m_clip_box = Envelope<int>(poly_coord(x1), poly_coord(y1),
-				   poly_coord(x2), poly_coord(y2));
-        //m_clip_box.normalize();
-        m_clipping = true;
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::move_to_no_clip(int x, int y)
-    {
-        if(m_status == status_line_to)
-        {
-            close_polygon_no_clip();
-        }
-        m_outline.move_to(x,y);
-        m_clipped_start_x = x;
-        m_clipped_start_y = y;
-        m_status = status_line_to;
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::line_to_no_clip(int x, int y)
-    {
-        if(m_status != status_initial)
-        {
-            m_outline.line_to(x , y);
-            m_status = status_line_to;
-        }
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::close_polygon_no_clip()
-    {
-        if(m_status == status_line_to)
-        {
-            m_outline.line_to(m_clipped_start_x, m_clipped_start_y);
-            m_status = status_closed;
-        }
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::clip_segment(int x, int y)
-    {
-        unsigned flags = clipping_flags(x, y, m_clip_box);
-        if(m_prev_flags == flags)
-        {
-            if(flags == 0)
-            {
-                if(m_status == status_initial)
-                {
-                    move_to_no_clip(x, y);
-                }
-                else
-                {
-                    line_to_no_clip(x, y);
-                }
-            }
-        }
-        else
-        {
-
-            int cx[4];
-            int cy[4];
-            unsigned n = clip_liang_barsky<int>(m_prev_x, m_prev_y,
-						x, y,
-						m_clip_box,
-						cx, cy);
-            const int* px = cx;
-            const int* py = cy;
-            while(n--)
-            {
-                if(m_status == status_initial)
-                {
-                    move_to_no_clip(*px++, *py++);
-                }
-                else
-                {
-                    line_to_no_clip(*px++, *py++);
-                }
-            }
-        }
-
-        m_prev_flags = flags;
-        m_prev_x = x;
-        m_prev_y = y;
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::add_vertex(double x, double y, unsigned cmd)
-    {
-        if(is_close(cmd))
-        {
-            close_polygon();
-        }
-        else
-        {
-            if(is_move_to(cmd))
-            {
-                move_to(poly_coord(x), poly_coord(y));
-            }
-            else
-            {
-                if(is_vertex(cmd))
-                {
-                    line_to(poly_coord(x), poly_coord(y));
-                }
-            }
-        }
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::move_to(int x, int y)
-    {
-        if(m_clipping)
-        {
-            if(m_outline.sorted())
-            {
-                reset();
-            }
-            if(m_status == status_line_to)
-            {
-                close_polygon();
-            }
-            m_prev_x = m_start_x = x;
-            m_prev_y = m_start_y = y;
-            m_status = status_initial;
-            m_prev_flags = clipping_flags(x, y, m_clip_box);
-            if(m_prev_flags == 0)
-            {
-                move_to_no_clip(x, y);
-            }
-        }
-        else
-        {
-            move_to_no_clip(x, y);
-        }
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::line_to(int x, int y)
-    {
-        if(m_clipping)
-        {
-            clip_segment(x, y);
-        }
-        else
-        {
-            line_to_no_clip(x, y);
-        }
-    }
-
-    template<typename PixBuffer>
-    void ScanlineRasterizerAA<PixBuffer>::close_polygon()
-    {
-        if(m_clipping)
-        {
-            clip_segment(m_start_x, m_start_y);
-        }
-        close_polygon_no_clip();
-    }
-
-
-    template<class T> class scanline_u
-    {
-    public:
-	typedef T cover_type;
-	struct span
-	{
-	    short x;
-	    short len;
-	    cover_type* covers;
-	};
-
-	typedef span* iterator;
-	typedef const span* const_iterator;
-
-	~scanline_u();
-	scanline_u();
-
-	void     reset(int min_x, int max_x);
-	void     add_cell(int x, unsigned cover);
-	void     add_cells(int x, unsigned len, const T* covers);
-	void     add_span(int x, unsigned len, unsigned cover);
-	void     finalize(int y) { m_y = y; }
-	void     reset_spans();
-
-	int      y()           const { return m_y; }
-	unsigned num_spans()   const { return unsigned(m_cur_span - m_spans); }
-	const_iterator begin() const { return m_spans + 1; }
-	iterator       begin()       { return m_spans + 1; }
-
-    private:
-	scanline_u<T>(const scanline_u<T>&);
-	const scanline_u<T>& operator = (const scanline_u<T>&);
-
-    private:
-	int           m_min_x;
-	unsigned      m_max_len;
-	int           m_last_x;
-	int           m_y;
-	cover_type*   m_covers;
-	span*         m_spans;
-	span*         m_cur_span;
-    };
-
-    template<class T> scanline_u<T>::~scanline_u()
-    {
-        delete [] m_spans;
-        delete [] m_covers;
-    }
-
-    template<class T> scanline_u<T>::scanline_u() :
-	m_min_x(0),
-        m_max_len(0),
-        m_last_x(0x7FFFFFF0),
-        m_covers(0),
-        m_spans(0),
-        m_cur_span(0)
-    {
-    }
-
-    template<class T> void scanline_u<T>::reset(int min_x, int max_x)
-    {
-        unsigned max_len = max_x - min_x + 2;
-        if(max_len > m_max_len)
-        {
-            delete [] m_spans;
-            delete [] m_covers;
-            m_covers  = new cover_type [max_len];
-            m_spans   = new span       [max_len];
-            m_max_len = max_len;
-        }
-        m_last_x        = 0x7FFFFFF0;
-        m_min_x         = min_x;
-        m_cur_span      = m_spans;
-    }
-
-    template<class T> inline void scanline_u<T>::reset_spans()
-    {
-        m_last_x    = 0x7FFFFFF0;
-        m_cur_span  = m_spans;
-    }
-
-    template<class T> inline void scanline_u<T>::add_cell(int x, unsigned cover)
-    {
-        x -= m_min_x;
-        m_covers[x] = (unsigned char)cover;
-        if(x == m_last_x+1)
-        {
-            m_cur_span->len++;
-        }
-        else
-        {
-            m_cur_span++;
-            m_cur_span->x      = (short)(x + m_min_x);
-            m_cur_span->len    = 1;
-            m_cur_span->covers = m_covers + x;
-        }
-        m_last_x = x;
-    }
-
-    template<class T> void scanline_u<T>::add_cells(int x, unsigned len, const T* covers)
-    {
-        x -= m_min_x;
-        memcpy(m_covers + x, covers, len * sizeof(T));
-        if(x == m_last_x+1)
-        {
-            m_cur_span->len += (short)len;
-        }
-        else
-        {
-            m_cur_span++;
-            m_cur_span->x      = (short)(x + m_min_x);
-            m_cur_span->len    = (short)len;
-            m_cur_span->covers = m_covers + x;
-        }
-        m_last_x = x + len - 1;
-    }
-
-    template<class T> void scanline_u<T>::add_span(int x, unsigned len, unsigned cover)
-    {
-        x -= m_min_x;
-        memset(m_covers + x, cover, len);
-        if(x == m_last_x+1)
-        {
-            m_cur_span->len += (short)len;
-        }
-        else
-        {
-            m_cur_span++;
-            m_cur_span->x      = (short)(x + m_min_x);
-            m_cur_span->len    = (short)len;
-            m_cur_span->covers = m_covers + x;
-        }
-        m_last_x = x + len - 1;
-    }
-
-    typedef scanline_u<unsigned char> scanline_u8;
-    typedef scanline_u<unsigned short> scanline_u16;
-    typedef scanline_u<unsigned int> scanline_u32;
-}
-
-#endif //SCANLINE_AA_HPP



From pavlenko at berlios.de  Wed Mar 22 16:51:11 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:51:11 +0100
Subject: [Mapnik-svn] r196 - trunk/include
Message-ID: <200603221551.k2MFpB5G019417@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:51:06 +0100 (Wed, 22 Mar 2006)
New Revision: 196

Added:
   trunk/include/config.hpp
Log:
added platform specific configuration file

Added: trunk/include/config.hpp
===================================================================
--- trunk/include/config.hpp	2006-03-22 15:50:05 UTC (rev 195)
+++ trunk/include/config.hpp	2006-03-22 15:51:06 UTC (rev 196)
@@ -0,0 +1,14 @@
+#ifndef CONFIG_HPP
+#define CONFIG_HPP
+
+// Window DLL support
+
+#ifdef _WINDOWS
+# define MAPNIK_DECL __declspec (dllexport)
+# pragma warning( disable: 4251 )
+# pragma warning( disable: 4275 )
+#else
+# define MAPNIK_DECL 
+#endif
+
+#endif
\ No newline at end of file



From pavlenko at berlios.de  Wed Mar 22 16:53:11 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:53:11 +0100
Subject: [Mapnik-svn] r197 - trunk/include
Message-ID: <200603221553.k2MFrBbe024765@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:52:29 +0100 (Wed, 22 Mar 2006)
New Revision: 197

Modified:
   trunk/include/agg_renderer.hpp
   trunk/include/attribute.hpp
   trunk/include/color.hpp
   trunk/include/color_factory.hpp
   trunk/include/ctrans.hpp
   trunk/include/datasource.hpp
   trunk/include/datasource_cache.hpp
   trunk/include/envelope.hpp
   trunk/include/expression.hpp
   trunk/include/filter.hpp
   trunk/include/filter_factory.hpp
   trunk/include/filter_visitor.hpp
   trunk/include/font_engine_freetype.hpp
   trunk/include/gamma.hpp
   trunk/include/graphics.hpp
   trunk/include/image_util.hpp
   trunk/include/layer.hpp
   trunk/include/line_pattern_symbolizer.hpp
   trunk/include/line_symbolizer.hpp
   trunk/include/map.hpp
   trunk/include/mapnik.hpp
   trunk/include/point_symbolizer.hpp
   trunk/include/polygon_pattern_symbolizer.hpp
   trunk/include/polygon_symbolizer.hpp
   trunk/include/raster_symbolizer.hpp
   trunk/include/stroke.hpp
   trunk/include/text_symbolizer.hpp
   trunk/include/utils.hpp
   trunk/include/value.hpp
Log:
added __declspec(dllexport)

Modified: trunk/include/agg_renderer.hpp
===================================================================
--- trunk/include/agg_renderer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/agg_renderer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -29,26 +29,27 @@
 namespace mapnik
 {
     template <typename T>
-    struct agg_renderer : public feature_style_processor<agg_renderer<T> >,
+	class MAPNIK_DECL agg_renderer : public feature_style_processor<agg_renderer<T> >,
 			  private boost::noncopyable
     {
-	agg_renderer(Map const& m, T & pixmap);
-	void start_map_processing(Map const& map);
-	void end_map_processing(Map const& map);
-	void start_layer_processing(Layer const& lay);
-	void end_layer_processing(Layer const& lay);
-	void process(point_symbolizer const& sym,Feature const& feature);	    	       
-	void process(line_symbolizer const& sym,Feature const& feature);
-	void process(line_pattern_symbolizer const& sym,Feature const& feature);
-	void process(polygon_symbolizer const& sym,Feature const& feature);
-	void process(polygon_pattern_symbolizer const& sym,Feature const& feature);
-	void process(raster_symbolizer const& sym,Feature const& feature);
-	void process(text_symbolizer const& sym,Feature const& feature);
+	public:
+		agg_renderer(Map const& m, T & pixmap);
+		void start_map_processing(Map const& map);
+		void end_map_processing(Map const& map);
+		void start_layer_processing(Layer const& lay);
+		void end_layer_processing(Layer const& lay);
+		void process(point_symbolizer const& sym,Feature const& feature);	    	       
+		void process(line_symbolizer const& sym,Feature const& feature);
+		void process(line_pattern_symbolizer const& sym,Feature const& feature);
+		void process(polygon_symbolizer const& sym,Feature const& feature);
+		void process(polygon_pattern_symbolizer const& sym,Feature const& feature);
+		void process(raster_symbolizer const& sym,Feature const& feature);
+		void process(text_symbolizer const& sym,Feature const& feature);
     private:
-	T & pixmap_;
-	CoordTransform t_;
-	face_manager<freetype_engine> font_manager_;
-	label_collision_detector2 detector_;
+		T & pixmap_;
+		CoordTransform t_;
+		face_manager<freetype_engine> font_manager_;
+		label_collision_detector2 detector_;
     };
 }
 

Modified: trunk/include/attribute.hpp
===================================================================
--- trunk/include/attribute.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/attribute.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -49,7 +49,7 @@
 	}
     };
     
-    class attribute
+    class MAPNIK_DECL attribute
     {	
     public:
 	attribute()

Modified: trunk/include/color.hpp
===================================================================
--- trunk/include/color.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/color.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -21,11 +21,12 @@
 #ifndef COLOR_HPP
 #define COLOR_HPP
 
+#include "config.hpp"
 #include <sstream>
 
 namespace mapnik {
 
-    class Color
+    class MAPNIK_DECL Color
     {
     private:
 	unsigned int rgba_;

Modified: trunk/include/color_factory.hpp
===================================================================
--- trunk/include/color_factory.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/color_factory.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -26,7 +26,7 @@
 namespace mapnik
 {
     using namespace boost::spirit;
-    class color_factory
+    class MAPNIK_DECL color_factory
     {
     public:
 	static Color from_string(char const* css_color)

Modified: trunk/include/ctrans.hpp
===================================================================
--- trunk/include/ctrans.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/ctrans.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -29,7 +29,7 @@
     typedef coord_array<coord2d> CoordinateArray;
     
     template <typename Transform,typename Geometry>
-    struct coord_transform
+    struct MAPNIK_DECL coord_transform
     {
 	coord_transform(Transform const& t,Geometry& geom)
 	    : t_(t), geom_(geom) {}
@@ -54,10 +54,10 @@
     class CoordTransform
     {
     private:
-	int width;
-	int height;
-	double scale_;
-	Envelope<double> extent;
+	    int width;
+	    int height;
+	    double scale_;
+	    Envelope<double> extent;
     public:
 	CoordTransform(int width,int height,const Envelope<double>& extent)
             :width(width),height(height),extent(extent)

Modified: trunk/include/datasource.hpp
===================================================================
--- trunk/include/datasource.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/datasource.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -33,15 +33,15 @@
 
 namespace mapnik
 {    
-    typedef shared_ptr<Feature> feature_ptr;
-    struct Featureset
+    typedef MAPNIK_DECL shared_ptr<Feature> feature_ptr;
+    struct MAPNIK_DECL Featureset
     {
         virtual feature_ptr next()=0;
         virtual ~Featureset() {};
     };
     
     typedef shared_ptr<Featureset> featureset_ptr;    
-    class datasource_exception : public std::exception
+    class MAPNIK_DECL datasource_exception : public std::exception
     {
     private:
         const std::string message_;
@@ -56,7 +56,7 @@
 	}
     };
     
-    class datasource
+    class MAPNIK_DECL datasource
     {
     public:
 	enum {
@@ -88,15 +88,15 @@
     
     ///////////////////////////////////////////
     #define DATASOURCE_PLUGIN(classname) \
-        extern "C" std::string datasource_name() \
+        extern "C" MAPNIK_DECL std::string datasource_name() \
         { \
         return classname::name();\
         }\
-        extern "C"  datasource* create(const parameters &params)	\
+        extern "C"  MAPNIK_DECL datasource* create(const parameters &params)	\
         { \
 	    return new classname(params);	\
         }\
-        extern "C" void destroy(datasource *ds) \
+        extern "C" MAPNIK_DECL void destroy(datasource *ds) \
         { \
         delete ds;\
         }\

Modified: trunk/include/datasource_cache.hpp
===================================================================
--- trunk/include/datasource_cache.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/datasource_cache.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -30,7 +30,7 @@
 
 namespace mapnik
 {
-    class datasource_cache : public singleton <datasource_cache,CreateStatic>
+    class MAPNIK_DECL datasource_cache : public singleton <datasource_cache,CreateStatic>
     {
         friend class CreateStatic<datasource_cache>;
     private:

Modified: trunk/include/envelope.hpp
===================================================================
--- trunk/include/envelope.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/envelope.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -21,12 +21,13 @@
 #ifndef ENVELOPE_HPP
 #define ENVELOPE_HPP
 
+#include "config.hpp"
 #include "coord.hpp"
 
 namespace mapnik
 {
 
-    template <class T> class Envelope
+	template <class T> class MAPNIK_DECL Envelope
     {
     public:
 	typedef Envelope<T> EnvelopeType;

Modified: trunk/include/expression.hpp
===================================================================
--- trunk/include/expression.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/expression.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -28,8 +28,9 @@
 {
     template <typename FeatureT> class filter_visitor;
     template <typename FeatureT>
-    struct expression
+    class expression
     {
+    public:
 	virtual value get_value(FeatureT const& feature) const=0;
 	virtual void accept(filter_visitor<FeatureT>& v)=0;
 	virtual expression<FeatureT>* clone() const=0;
@@ -81,14 +82,14 @@
     {
     public:
 	property(std::string const& name)
-	    : expression<FeatureT>(),
-	      name_(name)
-	{}
+        : expression<FeatureT>(),
+	    name_(name)
+	    {}
 	
 	property(property const& other)
 	    : expression<FeatureT>(),
-	      name_(other.name_)
-	{}
+	     name_(other.name_)
+	    {}
 
 	value get_value(FeatureT const& feature) const
 	{
@@ -111,10 +112,11 @@
 	{
 	    return "["+name_+"]";
 	}
-        ~property() {}
+
+    ~property() {}
+
     private:
-	std::string name_;
-
+	    std::string name_;
     };
 }
 

Modified: trunk/include/filter.hpp
===================================================================
--- trunk/include/filter.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/filter.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -28,58 +28,59 @@
 {
     template <typename FeatureT> class filter_visitor;
     template <typename FeatureT>
-    struct filter
+    class MAPNIK_DECL filter
     {
-	virtual bool pass(const FeatureT& feature) const=0; 
-	virtual filter<FeatureT>* clone() const=0;
-	virtual void accept(filter_visitor<FeatureT>& v) = 0;
+	public:
+		virtual bool pass(const FeatureT& feature) const=0; 
+		virtual filter<FeatureT>* clone() const=0;
+		virtual void accept(filter_visitor<FeatureT>& v) = 0;
         virtual std::string to_string() const=0;
-	virtual ~filter() {}
+		virtual ~filter() {}
     };
     
     typedef boost::shared_ptr<filter<Feature> > filter_ptr;
     
     template <typename FeatureT>
-    struct all_filter : public filter<FeatureT>
+    class all_filter : public filter<FeatureT>
     {
-
-	bool pass (const FeatureT&) const
-	{
-	    return true;
-	}
+	public:
+		bool pass (const FeatureT&) const
+		{
+			return true;
+		}
 	
-	filter<FeatureT>* clone() const
-	{
-	    return new all_filter<FeatureT>;
-	}
-	std::string to_string() const
-	{
-	    return "true";
-	}  
+		filter<FeatureT>* clone() const
+		{
+			return new all_filter<FeatureT>;
+		}
+		std::string to_string() const
+		{
+			return "true";
+		}  
         void accept(filter_visitor<FeatureT>&) {}
-	virtual ~all_filter() {}
+		virtual ~all_filter() {}
     };
       
     template <typename FeatureT>
-    struct none_filter : public filter<FeatureT>
+    class none_filter : public filter<FeatureT>
     {
-
-	bool pass (const FeatureT&) const
-	{
-	    return false;
-	}
+	public:
+		bool pass (const FeatureT&) const
+		{
+			return false;
+		}
 	
-	filter<FeatureT>* clone() const
-	{
-	    return new none_filter<FeatureT>;
-	}
-	std::string to_string() const
-	{
-	    return "false";
-	}  
-        void accept(filter_visitor<FeatureT>&) {}
-	virtual ~none_filter() {}
-    };
+		filter<FeatureT>* clone() const
+		{
+			return new none_filter<FeatureT>;
+		}
+		std::string to_string() const
+		{
+			return "false";
+		}  
+	    void accept(filter_visitor<FeatureT>&) {}
+		virtual ~none_filter() {}
+	};
 }
 
 #endif //FILTER_HPP

Modified: trunk/include/filter_factory.hpp
===================================================================
--- trunk/include/filter_factory.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/filter_factory.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -30,7 +30,7 @@
 namespace mapnik
 {
     template<typename FeatureT>
-    class filter_factory
+    class MAPNIK_DECL filter_factory
     {
     public:
 	static filter_ptr compile(string const& str)

Modified: trunk/include/filter_visitor.hpp
===================================================================
--- trunk/include/filter_visitor.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/filter_visitor.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -29,12 +29,13 @@
     template <typename FeatureT> class expression;
     template <typename Feature,template <typename> class Filter> class rule;
     template <typename FeatureT>
-    struct filter_visitor
+    class filter_visitor
     {
-	virtual void visit(filter<FeatureT>& filter)=0;
-	virtual void visit(expression<FeatureT>&)=0;
-	virtual void visit(rule<FeatureT,filter> const& r)=0;
-	virtual ~filter_visitor() {}
+	public:
+		virtual void visit(filter<FeatureT>& filter)=0;
+		virtual void visit(expression<FeatureT>&)=0;
+		virtual void visit(rule<FeatureT,filter> const& r)=0;
+		virtual ~filter_visitor() {}
     };    
 }
 

Modified: trunk/include/font_engine_freetype.hpp
===================================================================
--- trunk/include/font_engine_freetype.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/font_engine_freetype.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -92,7 +92,7 @@
     
     typedef boost::shared_ptr<font_face> face_ptr;
     
-    class freetype_engine : public mapnik::singleton<freetype_engine,mapnik::CreateStatic>,
+    class MAPNIK_DECL freetype_engine : public mapnik::singleton<freetype_engine,mapnik::CreateStatic>,
 		       private boost::noncopyable
     {
 	friend class mapnik::CreateStatic<freetype_engine>;
@@ -165,7 +165,7 @@
     
     
     template <typename T>
-    class face_manager : private boost::noncopyable
+    class MAPNIK_DECL face_manager : private boost::noncopyable
     {
 	typedef T font_engine_type;
 	typedef std::map<std::string,face_ptr> faces;
@@ -238,7 +238,7 @@
 	    {
 		code = p;            // U+0000 - U+007f (ascii)
 	    }
-	    out.push_back(code);
+	    out.push_back(wchar_t(code));
 	}
 	return out;
     }
@@ -308,7 +308,7 @@
 	    pen.x = 0;
 	    pen.y = 0;
 	    
-	    use_kerning = FT_HAS_KERNING(face);
+        use_kerning = FT_HAS_KERNING(face)>0?true:false;
 	    
 	    FT_BBox bbox;   
 	    bbox.xMin = bbox.yMin = 32000; 

Modified: trunk/include/gamma.hpp
===================================================================
--- trunk/include/gamma.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/gamma.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -23,7 +23,7 @@
 
 namespace mapnik 
 {
-    struct gamma
+    struct MAPNIK_DECL gamma
     {
 	unsigned char g2l[256];
 	unsigned char l2g[256];
@@ -33,7 +33,7 @@
 	    for (int i=0;i< 256;i++)
 	    {
 		result=(int)(pow(i/255.0,gamma) * 255.0 + 0.5);
-		g2l[i]=(unsigned short)result;
+		g2l[i]=(unsigned char)result;
 	    }
 	    for (int i = 0; i < 256; i++)
 	    {

Modified: trunk/include/graphics.hpp
===================================================================
--- trunk/include/graphics.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/graphics.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -31,19 +31,19 @@
 
 namespace mapnik
 {
-    class Image32
+    class MAPNIK_DECL Image32
     {
     private:
 	unsigned width_;
 	unsigned height_;
 	Color background_;
 	ImageData32 data_;
-	static gamma gammaTable_;
+	//static gamma gammaTable_;
     public:
 	Image32(int width,int height);
 	Image32(const Image32& rhs);
 	~Image32();
-	static void setGamma(double gamma);
+	//static void setGamma(double gamma);
 	void setBackground(const Color& background);
 	const Color& getBackground() const;     
 	const ImageData32& data() const;
@@ -76,6 +76,7 @@
 		data_(x,y)=rgba;
 	    }
 	}
+    /*
 	inline int blendColor(int c0,int c1,int t)
 	{
 	    int bgRed=(c1>>16)&0xff;
@@ -94,7 +95,7 @@
 	    
 	    return 0xff << 24 | r << 16 | g << 8 | b;
 	}
-
+*/
 	inline void blendPixel(int x,int y,unsigned int rgba1,int t)
 	{
 	    if (checkBounds(x,y))

Modified: trunk/include/image_util.hpp
===================================================================
--- trunk/include/image_util.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/image_util.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -23,7 +23,7 @@
 
 namespace mapnik
 {
-    class ImageUtils
+    class MAPNIK_DECL ImageUtils
     {
     public:
 	static void save_to_file(const std::string& filename,const std::string& type,const Image32& image);

Modified: trunk/include/layer.hpp
===================================================================
--- trunk/include/layer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/layer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -29,7 +29,7 @@
 
 namespace mapnik
 {
-    class Layer
+    class MAPNIK_DECL Layer
     {
 	friend class boost::serialization::access;
 	template <typename Archive>

Modified: trunk/include/line_pattern_symbolizer.hpp
===================================================================
--- trunk/include/line_pattern_symbolizer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/line_pattern_symbolizer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -26,7 +26,7 @@
 
 namespace mapnik 
 {      
-    struct line_pattern_symbolizer
+    struct MAPNIK_DECL line_pattern_symbolizer
     {
 	line_pattern_symbolizer(std::string const& file,
 				std::string const& type,

Modified: trunk/include/line_symbolizer.hpp
===================================================================
--- trunk/include/line_symbolizer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/line_symbolizer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -25,7 +25,7 @@
 
 namespace mapnik 
 {
-    struct line_symbolizer
+    struct MAPNIK_DECL line_symbolizer
     {
 	line_symbolizer(stroke const& stroke)
 	    : stroke_(stroke) {}
@@ -42,7 +42,7 @@
 	}
 
     private:
-	stroke stroke_;
+		stroke stroke_;
     };
 }
 

Modified: trunk/include/map.hpp
===================================================================
--- trunk/include/map.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/map.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -29,7 +29,7 @@
 {
     class Layer;
 
-    class Map
+    class MAPNIK_DECL Map
     {
 	friend class boost::serialization::access;
 	template <typename Archive>

Modified: trunk/include/mapnik.hpp
===================================================================
--- trunk/include/mapnik.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/mapnik.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -71,6 +71,8 @@
 #include "css_color_parser.hpp"
 #include "color_factory.hpp"
 
+
+
 namespace mapnik
 {
     void save_to_xml(Map const& map,const char* filename);  

Modified: trunk/include/point_symbolizer.hpp
===================================================================
--- trunk/include/point_symbolizer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/point_symbolizer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -26,7 +26,7 @@
 
 namespace mapnik 
 {   
-    struct point_symbolizer
+    struct MAPNIK_DECL point_symbolizer
     {	
 	point_symbolizer(std::string const& file,
 			 std::string const& type,

Modified: trunk/include/polygon_pattern_symbolizer.hpp
===================================================================
--- trunk/include/polygon_pattern_symbolizer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/polygon_pattern_symbolizer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -26,7 +26,7 @@
 
 namespace mapnik
 {
-    struct polygon_pattern_symbolizer
+    struct MAPNIK_DECL polygon_pattern_symbolizer
     {
 	
 	polygon_pattern_symbolizer(std::string const& file,

Modified: trunk/include/polygon_symbolizer.hpp
===================================================================
--- trunk/include/polygon_symbolizer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/polygon_symbolizer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -23,10 +23,11 @@
 
 //#include "symbolizer.hpp"
 //#include <boost/utility.hpp>
+#include "color.hpp"
 
 namespace mapnik 
 {
-    struct polygon_symbolizer
+    struct MAPNIK_DECL polygon_symbolizer
     {
 	polygon_symbolizer(Color const& fill)
 	    : fill_(fill) {}

Modified: trunk/include/raster_symbolizer.hpp
===================================================================
--- trunk/include/raster_symbolizer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/raster_symbolizer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -25,7 +25,7 @@
 
 namespace mapnik
 {
-    struct raster_symbolizer { /* TODO */};
+    struct MAPNIK_DECL raster_symbolizer { /* TODO */};
 }
 
 #endif //RASTER_SYMBOLIZER

Modified: trunk/include/stroke.hpp
===================================================================
--- trunk/include/stroke.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/stroke.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -142,7 +142,7 @@
 	}
 	bool has_dash() const 
 	{
-	    return dash_.size();
+		return dash_.size()>0 ? true : false ;
 	}
 	
 	dash_array const& get_dash_array() const

Modified: trunk/include/text_symbolizer.hpp
===================================================================
--- trunk/include/text_symbolizer.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/text_symbolizer.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -34,7 +34,7 @@
         
     typedef boost::tuple<double,double> position;
     
-    struct text_symbolizer
+    struct MAPNIK_DECL text_symbolizer
     {		
 	text_symbolizer(std::string const& name,unsigned size,Color const& fill);	
 	text_symbolizer(text_symbolizer const& rhs);

Modified: trunk/include/utils.hpp
===================================================================
--- trunk/include/utils.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/utils.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -24,9 +24,10 @@
 #include <stdexcept>
 #include <limits>
 #include <ctime>
-#include <sys/time.h>
+//#include <sys/time.h>
 #include <sstream>
 #include <iostream>
+#include <algorithm>
 #include <cmath>
 
 #include <boost/thread/mutex.hpp>
@@ -167,24 +168,24 @@
 
     struct timer
     {
-        struct timeval tv_;
+        //struct timeval tv_;
         timer()
         {
-            gettimeofday (&tv_,0);
+            //gettimeofday (&tv_,0);
         }
         void start()
         {
-            gettimeofday (&tv_,0);
+            //gettimeofday (&tv_,0);
         }
         void stop()
         {
-            timeval tv;
-            gettimeofday (&tv,0);
-            std::ostringstream s;
-            long sec=1000*(tv.tv_sec-tv_.tv_sec);
-            long total_ms=sec+static_cast<long>(0.001*(tv.tv_usec-tv_.tv_usec));
-            s << "elapsed time is "<<total_ms<<" ms";
-            std::clog<<s.str()<<std::endl;
+            //timeval tv;
+            //gettimeofday (&tv,0);
+            //std::ostringstream s;
+            //long sec=1000*(tv.tv_sec-tv_.tv_sec);
+            //long total_ms=sec+static_cast<long>(0.001*(tv.tv_usec-tv_.tv_usec));
+            //s << "elapsed time is "<<total_ms<<" ms";
+            //std::clog<<s.str()<<std::endl;
         }
     };
     
@@ -217,31 +218,31 @@
 	    throw BadConversion("fromString("+s+")");
     }
     
-    inline bool space (char c)
-    {
-	return isspace(c);
-    }
+    //inline bool space (char c)
+    //{
+//		return isspace(c);
+ //   }
     
-    inline bool not_space (char c)
-    {
-	return !isspace(c);
-    }
+   // inline bool not_space (char c)
+    //{
+//		return !isspace(c);
+ //   }
     
-    inline std::string trim_left(const std::string& str)
-    {
-	typedef std::string::const_iterator iter;
-	iter i = find_if(str.begin(),str.end(),not_space);
-	return std::string(i,str.end());	
-    }
-    inline std::string trim_right(const std::string& str)
-    {
-	std::string::size_type idx=str.find_last_not_of(" ");
-	return str.substr(0,idx+1);
-    }
-    inline std::string trim(const std::string& str)
-    {
-	return trim_left(trim_right(str));
-    }
+    //inline std::string trim_left(const std::string& str)
+    //{
+//		typedef std::string::const_iterator iter;
+//		iter i = std::find_if(str.begin(),str.end(),not_space);
+		//return std::string(i,str.end());	
+    //}
+    //inline std::string trim_right(const std::string& str)
+    //{
+	//	std::string::size_type idx=str.find_last_not_of(" ");
+//		return str.substr(0,idx+1);
+ //   }
+//	inline std::string trim(const std::string& str)
+  //  {
+	//	return trim_left(trim_right(str));
+	//}
 }
 
 

Modified: trunk/include/value.hpp
===================================================================
--- trunk/include/value.hpp	2006-03-22 15:51:06 UTC (rev 196)
+++ trunk/include/value.hpp	2006-03-22 15:52:29 UTC (rev 197)
@@ -28,7 +28,7 @@
 using namespace boost;
 namespace mapnik {
 
-    typedef variant<int,double,std::string> value_base;
+	typedef variant<std::string,int,double> value_base;
     
     namespace impl {
 	struct equals
@@ -352,6 +352,17 @@
 	template <typename T> value(T _val_)
 	    : value_base(_val_) {}
 	
+	value (const value& rhs)
+	{
+        //todo!!!!!!!!!
+	}
+	value& operator=(value const& rhs)
+	{
+		if (this == &rhs)
+			return  *this;
+		//TODO!!!!!	
+		return *this;	
+	}
 	bool operator==(value const& other) const
 	{
 	    return boost::apply_visitor(impl::equals(),*this,other);
@@ -419,31 +430,35 @@
     
     inline const value operator+(value const& p1,value const& p2)
     {
-	value tmp(p1);
-	tmp+=p2;
-	return tmp;
+	//value tmp(p1);
+	//tmp+=p2;
+	//return tmp;
+		return boost::apply_visitor(impl::add<value>(),p1, p2);
     }
 
     inline const value operator-(value const& p1,value const& p2)
     {
-	value tmp(p1);
-	tmp-=p2;
-	return tmp;
+	//value tmp(p1);
+	//tmp-=p2;
+	//return tmp;
+		return boost::apply_visitor(impl::sub<value>(),p1, p2);
     }
 
     inline const value operator*(value const& p1,value const& p2)
     {
-	value tmp(p1);
-	tmp*=p2;
-	return tmp;
+	//value tmp(p1);
+	//tmp*=p2;
+	//return tmp;
+		return boost::apply_visitor(impl::mult<value>(),p1, p2);
     }
 
     inline const value operator/(value const& p1,value const& p2)
     {
-	value tmp(p1);
-	tmp/=p2;
-	return tmp;
-    }
+	//value tmp(p1);
+	//tmp/=p2;
+	//return tmp;
+	    return boost::apply_visitor(impl::div<value>(),p1, p2);
+	}
 
     //template <typename charT, typename traits>
     //inline std::basic_ostream<charT,traits>& 



From pavlenko at berlios.de  Wed Mar 22 16:53:43 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:53:43 +0100
Subject: [Mapnik-svn] r198 - trunk/src
Message-ID: <200603221553.k2MFrhfU026099@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:53:38 +0100 (Wed, 22 Mar 2006)
New Revision: 198

Removed:
   trunk/src/render.cpp
Log:
removed unused files

Deleted: trunk/src/render.cpp
===================================================================
--- trunk/src/render.cpp	2006-03-22 15:52:29 UTC (rev 197)
+++ trunk/src/render.cpp	2006-03-22 15:53:38 UTC (rev 198)
@@ -1,197 +0,0 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
- *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
-//$Id: render.cpp 44 2005-04-22 18:53:54Z pavlenko $
-
-#include "render.hpp"
-#include "image_util.hpp"
-#include "utils.hpp"
-#include "symbolizer.hpp"
-#include "query.hpp"
-#include "feature_layer_desc.hpp"
-#include "attribute_collector.hpp"
-#include "property_index.hpp"
-
-#include <algorithm>
-#include <cmath>
-#include <set>
-
-namespace mapnik
-{  
-    
-    template <typename Image>
-    void Renderer<Image>::render_vector_layer(datasource_p const& ds,Map const& map,
-					      std::vector<std::string> const& namedStyles,
-					      unsigned width,unsigned height,
-					      const Envelope<double>& bbox,Image& image)
-    {
-	CoordTransform t(width,height,bbox);
-	std::vector<std::string>::const_iterator stylesIter=namedStyles.begin();
-	while (stylesIter!=namedStyles.end())
-	{
-	    std::set<std::string> names;
-	    attribute_collector<Feature> collector(names);
-	    property_index<Feature> indexer(names);
-	    query q(bbox,width,height);
-	    double scale = 1.0/t.scale();
-	    std::vector<rule_type*> if_rules;
-	    std::vector<rule_type*> else_rules;
-	    
-	    bool active_rules=false;
-
-	    feature_type_style const& style=map.find_style(*stylesIter++);
-	    
-	    const std::vector<rule_type>& rules=style.get_rules();
-	    std::vector<rule_type>::const_iterator ruleIter=rules.begin();
-	    
-	    while (ruleIter!=rules.end())
-	    {
-		if (ruleIter->active(scale))
-		{
-		    active_rules=true;
-		    filter_ptr& filter=const_cast<filter_ptr&>(ruleIter->get_filter());
-		    filter->accept(collector);
-		    filter->accept(indexer);
-		    if (ruleIter->has_else_filter())
-		    {
-			else_rules.push_back(const_cast<rule_type*>(&(*ruleIter)));
-		    }
-		    else
-		    {
-			if_rules.push_back(const_cast<rule_type*>(&(*ruleIter))); 		    
-		    }
-		}
-		++ruleIter;
-	    }
-	    
-	    std::set<std::string>::const_iterator namesIter=names.begin();
-	    // push all property names
-	    while (namesIter!=names.end())
-	    {
-		q.add_property_name(*namesIter);
-		++namesIter;
-	    }
-	    //only query datasource if there are active rules
-	    if (active_rules)
-	    {
-		featureset_ptr fs=ds->features(q);
-		if (fs)
-		{   	    
-		    feature_ptr feature;
-		    while ((feature = fs->next()))
-		    {		   
-			bool do_else=true;		    
-			std::vector<rule_type*>::const_iterator itr=if_rules.begin();
-			while (itr!=if_rules.end())
-			{
-			    const filter_ptr& filter=(*itr)->get_filter();    
-			    if (filter->pass(*feature))
-			    {   
-				do_else=false;
-				const symbolizers& symbols = (*itr)->get_symbolizers();
-				symbolizers::const_iterator symIter=symbols.begin();
-				while (symIter!=symbols.end())
-				{
-				    (*symIter)->render(*feature,t,image);
-				    ++symIter;
-				}
-			    }			    
-			    ++itr;
-			}
-			if (do_else)
-			{
-			    //else filter
-			    std::vector<rule_type*>::const_iterator itr=else_rules.begin();
-			    while (itr != else_rules.end())
-			    {
-				const symbolizers& symbols = (*itr)->get_symbolizers();
-				symbolizers::const_iterator symIter=symbols.begin();
-				while (symIter!=symbols.end())
-				{
-				    (*symIter)->render(*feature,t,image);
-				    ++symIter;
-				}
-				++itr;
-			    }
-			}	  
-		    }
-		}
-	    }
-	}
-    }
-    
-    template <typename Image>
-    void Renderer<Image>::render_raster_layer(datasource_p const& ds,
-					      std::vector<std::string> const& ,
-					      unsigned width,unsigned height,
-					      const Envelope<double>& bbox,Image& image)
-    {	
-	query q(bbox,width,height);
-	featureset_ptr fs=ds->features(q);
-	if (fs)
-	{   	    
-	    feature_ptr feature;
-	    while ((feature = fs->next()))
-	    {
-		raster_ptr const& raster=feature->get_raster();
-		if (raster)
-		{
-		    image.set_rectangle(raster->x_,raster->y_,raster->data_);
-		}
-	    }
-	}		   	
-    }
-
-    template <typename Image>
-    void Renderer<Image>::render(Map const& map,Image& image)
-    {
-        timer clock;
-        //////////////////////////////////////////////////////
-	Envelope<double> const& extent=map.getCurrentExtent();
-	std::clog<<"BBOX:"<<extent<<std::endl;
-        double scale=map.scale();
-        std::clog<<" scale="<<scale<<std::endl;
-        
-	unsigned width=map.getWidth();
-        unsigned height=map.getHeight();
-        
-        Color const& background=map.getBackground();
-        image.setBackground(background);
-	
-        for (size_t n=0;n<map.layerCount();++n)
-        {
-            Layer const& l=map.getLayer(n);
-            if (l.isVisible(scale) && l.envelope().intersects(extent))
-	    {
-		datasource_p const& ds=l.datasource();
-		if (!ds) continue;
-                if (ds->type() == datasource::Vector)
-		{
-		    render_vector_layer(ds,map,l.styles(),width,height,extent,image);
-		}
-		else if (ds->type() == datasource::Raster)
-		{
-		    render_raster_layer(ds,l.styles(),width,height,extent,image);
-		}
-            }
-        }        
-        clock.stop();
-    }
-
-    template class Renderer<Image32>;
-}



From pavlenko at berlios.de  Wed Mar 22 16:56:04 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:56:04 +0100
Subject: [Mapnik-svn] r199 - trunk/plugins/input/shape
Message-ID: <200603221556.k2MFu4h3029133@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:55:58 +0100 (Wed, 22 Mar 2006)
New Revision: 199

Modified:
   trunk/plugins/input/shape/shape.cpp
   trunk/plugins/input/shape/shape.hpp
   trunk/plugins/input/shape/shape_featureset.hpp
   trunk/plugins/input/shape/shape_index_featureset.hpp
Log:
added __declspec(dllexport) + general cleanup

Modified: trunk/plugins/input/shape/shape.cpp
===================================================================
--- trunk/plugins/input/shape/shape.cpp	2006-03-22 15:53:38 UTC (rev 198)
+++ trunk/plugins/input/shape/shape.cpp	2006-03-22 15:55:58 UTC (rev 199)
@@ -27,49 +27,48 @@
 DATASOURCE_PLUGIN(shape_datasource)
 
 shape_datasource::shape_datasource(const parameters &params)
-    : shape_name_(params.get("file")),
-      type_(datasource::Vector),
-      file_length_(0),
-      indexed_(false),
-      desc_(params.get("name"))
+: shape_name_(params.get("file")),
+type_(datasource::Vector),
+file_length_(0),
+indexed_(false),
+desc_(params.get("name"))
 {
     try
     {
         shape_io shape(shape_name_);
         init(shape);
-	for (int i=0;i<shape.dbf().num_fields();++i)
-	{
-	    field_descriptor const& fd=shape.dbf().descriptor(i);
-	    std::string fld_name=fd.name_;
+        for (int i=0;i<shape.dbf().num_fields();++i)
+        {
+            field_descriptor const& fd=shape.dbf().descriptor(i);
+            std::string fld_name=fd.name_;
+            switch (fd.type_)
+            {
+            case 'C':
+            case 'D':
+            case 'M':
+            case 'L':		
+                desc_.add_descriptor(attribute_descriptor(fld_name,String));
+                break;
+            case 'N':
+            case 'F':
+                {
+                    if (fd.dec_>0)
+                    {   
+                        desc_.add_descriptor(attribute_descriptor(fld_name,Double,false,8));
+                    }
+                    else
+                    {
+                        desc_.add_descriptor(attribute_descriptor(fld_name,Integer,false,4));
+                    }
+                    break;
+                }
+            default:
+                //
+                std::clog << "unknown type "<<fd.type_<<"\n";
+                break;
 
-	    switch (fd.type_)
-	    {
-	    case 'C':
-	    case 'D':
-	    case 'M':
-	    case 'L':		
-		desc_.add_descriptor(attribute_descriptor(fld_name,String));
-		break;
-	    case 'N':
-	    case 'F':
-		{
-		    if (fd.dec_>0)
-		    {   
-			desc_.add_descriptor(attribute_descriptor(fld_name,Double,false,8));
-		    }
-		    else
-		    {
-			desc_.add_descriptor(attribute_descriptor(fld_name,Integer,false,4));
-		    }
-		    break;
-		}
-	    default:
-		//
-		std::clog << "uknown type "<<fd.type_<<"\n";
-		break;
-		
-	    }
-	}
+            }
+        }
     }
     catch  (datasource_exception& ex)
     {
@@ -111,8 +110,8 @@
     std::ifstream file(index_name.c_str(),std::ios::in | std::ios::binary);
     if (file)
     {
-	indexed_=true;
-	file.close();
+        indexed_=true;
+        file.close();
     }
 
     std::clog << extent_ << std::endl;
@@ -141,7 +140,7 @@
     filter_in_box filter(q.get_bbox());
     if (indexed_)
     {
-	return featureset_ptr(new shape_index_featureset<filter_in_box>(filter,shape_name_,q.property_names()));
+        return featureset_ptr(new shape_index_featureset<filter_in_box>(filter,shape_name_,q.property_names()));
     }
     return featureset_ptr(new shape_featureset<filter_in_box>(filter,shape_name_,q.property_names(),file_length_));
 }

Modified: trunk/plugins/input/shape/shape.hpp
===================================================================
--- trunk/plugins/input/shape/shape.hpp	2006-03-22 15:53:38 UTC (rev 198)
+++ trunk/plugins/input/shape/shape.hpp	2006-03-22 15:55:58 UTC (rev 199)
@@ -25,7 +25,7 @@
 
 using namespace mapnik;
 
-class shape_datasource : public datasource
+class MAPNIK_DECL shape_datasource : public datasource
 {
 
 public:

Modified: trunk/plugins/input/shape/shape_featureset.hpp
===================================================================
--- trunk/plugins/input/shape/shape_featureset.hpp	2006-03-22 15:53:38 UTC (rev 198)
+++ trunk/plugins/input/shape/shape_featureset.hpp	2006-03-22 15:55:58 UTC (rev 199)
@@ -25,7 +25,7 @@
 using namespace mapnik;
 
 template <typename filterT>
-class shape_featureset : public Featureset
+class MAPNIK_DECL shape_featureset : public Featureset
 {
     filterT filter_;
     int shape_type_;

Modified: trunk/plugins/input/shape/shape_index_featureset.hpp
===================================================================
--- trunk/plugins/input/shape/shape_index_featureset.hpp	2006-03-22 15:53:38 UTC (rev 198)
+++ trunk/plugins/input/shape/shape_index_featureset.hpp	2006-03-22 15:55:58 UTC (rev 199)
@@ -24,7 +24,7 @@
 #include <vector>
 
 template <typename filterT>
-class shape_index_featureset : public Featureset
+class MAPNIK_DECL shape_index_featureset : public Featureset
 {
     filterT filter_;
     int shape_type_;



From pavlenko at berlios.de  Wed Mar 22 16:57:16 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 16:57:16 +0100
Subject: [Mapnik-svn] r200 - trunk/src
Message-ID: <200603221557.k2MFvGRW029696@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:57:12 +0100 (Wed, 22 Mar 2006)
New Revision: 200

Modified:
   trunk/src/agg_renderer.cpp
   trunk/src/datasource_cache.cpp
   trunk/src/graphics.cpp
   trunk/src/tiff_reader.cpp
Log:
removed unused static gamma member

Modified: trunk/src/agg_renderer.cpp
===================================================================
--- trunk/src/agg_renderer.cpp	2006-03-22 15:55:58 UTC (rev 199)
+++ trunk/src/agg_renderer.cpp	2006-03-22 15:57:12 UTC (rev 200)
@@ -429,7 +429,7 @@
 		    ren.set_fill(fill);
 		    ren.set_halo_fill(sym.get_halo_fill());
 		    ren.set_halo_radius(sym.get_halo_radius());
-		    ren.set_angle(angle);
+		    ren.set_angle(float(angle));
 
 		    std::pair<unsigned,unsigned> dim = ren.prepare_glyphs(text);
 		    Envelope<double> text_box(x - 0.5*dim.first,y - 0.5 * dim.second ,

Modified: trunk/src/datasource_cache.cpp
===================================================================
--- trunk/src/datasource_cache.cpp	2006-03-22 15:55:58 UTC (rev 199)
+++ trunk/src/datasource_cache.cpp	2006-03-22 15:57:12 UTC (rev 200)
@@ -90,30 +90,30 @@
 
     void datasource_cache::register_datasources(const std::string& str)
     {	
-	mutex::scoped_lock lock(mapnik::singleton<mapnik::datasource_cache, 
-				mapnik::CreateStatic>::mutex_);
-	filesystem::path path(str);
-	filesystem::directory_iterator end_itr;
-	if (exists(path))
+        mutex::scoped_lock lock(mapnik::singleton<mapnik::datasource_cache, 
+            mapnik::CreateStatic>::mutex_);
+        filesystem::path path(str);
+        filesystem::directory_iterator end_itr;
+        if (exists(path))
         {
-	    for (filesystem::directory_iterator itr(path);itr!=end_itr;++itr )
-	    {
-		if (!is_directory( *itr ) && itr->leaf()[0]!='.')
+            for (filesystem::directory_iterator itr(path);itr!=end_itr;++itr )
+            {
+                if (!is_directory( *itr ) && itr->leaf()[0]!='.')
                 {
-		    lt_dlhandle module=lt_dlopenext(itr->string().c_str());
-		    if (module)
-		    {
-			datasource_name* ds_name = (datasource_name*) lt_dlsym(module, "datasource_name");
-			if (ds_name && insert(ds_name(),module))
-			{                           
-			    std::clog<<"registered datasource : "<<ds_name()<<std::endl;
-			    registered_=true;
-			}
-		    }
-		    else
-		    {
-			std::clog<<lt_dlerror()<<std::endl;
-		    }
+                    lt_dlhandle module=lt_dlopenext(itr->string().c_str());
+                    if (module)
+                    {
+                        datasource_name* ds_name = (datasource_name*) lt_dlsym(module, "datasource_name");
+                        if (ds_name && insert(ds_name(),module))
+                        {                           
+                            std::clog<<"registered datasource : "<<ds_name()<<std::endl;
+                            registered_=true;
+                        }
+                    }
+                    else
+                    {
+                        std::clog<<lt_dlerror()<<std::endl;
+                    }
                 }
             }   
         }	

Modified: trunk/src/graphics.cpp
===================================================================
--- trunk/src/graphics.cpp	2006-03-22 15:55:58 UTC (rev 199)
+++ trunk/src/graphics.cpp	2006-03-22 15:57:12 UTC (rev 200)
@@ -39,7 +39,7 @@
 
     Image32::~Image32() {}
 
-    gamma Image32::gammaTable_;
+    //gamma MAPNIK_DECL Image32::gammaTable_;
 
     const ImageData32& Image32::data() const
     {
@@ -59,7 +59,7 @@
     
     void Image32::saveToFile(const std::string& file,const std::string& format) 
     {
-	//TODO: image writer factory
-	ImageUtils::save_to_file(file,format,*this);
+	    //TODO: image writer factory
+	    ImageUtils::save_to_file(file,format,*this);
     }
 }

Modified: trunk/src/tiff_reader.cpp
===================================================================
--- trunk/src/tiff_reader.cpp	2006-03-22 15:55:58 UTC (rev 199)
+++ trunk/src/tiff_reader.cpp	2006-03-22 15:57:12 UTC (rev 200)
@@ -25,6 +25,9 @@
 namespace mapnik 
 {
 
+	using std::min;
+	using std::max;
+	
     class TiffReader : public ImageReader
     {
     private:
@@ -181,27 +184,26 @@
 
 	    for (int y=start_y;y<end_y;y+=tile_height_)
 	    {
-		ty0=std::max(y0,(unsigned)y)-y;
-		ty1=std::min(height+y0,(unsigned)(y+tile_height_))-y;
+			ty0 = max(y0,(unsigned)y) - y;
+			ty1 = min(height+y0,(unsigned)(y+tile_height_)) - y;
 
-		int n0=tile_height_-ty1;
-		int n1=tile_height_-ty0-1;
+			int n0=tile_height_-ty1;
+			int n1=tile_height_-ty0-1;
 	        
-		for (int x=start_x;x<end_x;x+=tile_width_)
-		{
+			for (int x=start_x;x<end_x;x+=tile_width_)
+			{
 
-		    if (!TIFFReadRGBATile(tif,x,y,buf)) break;
+				if (!TIFFReadRGBATile(tif,x,y,buf)) break;
 
-		    tx0=std::max(x0,(unsigned)x);
-		    tx1=std::min(width+x0,(unsigned)(x+tile_width_));
-
-		    row=y+ty0-y0;
-		    for (int n=n1;n>=n0;--n)
-		    {
-			image.setRow(row,tx0-x0,tx1-x0,(const unsigned*)&buf[n*tile_width_+tx0-x]);
-			++row;
-		    }
-		}
+				tx0=max(x0,(unsigned)x);
+				tx1=min(width+x0,(unsigned)(x+tile_width_));
+				row=y+ty0-y0;
+				for (int n=n1;n>=n0;--n)
+				{
+					image.setRow(row,tx0-x0,tx1-x0,(const unsigned*)&buf[n*tile_width_+tx0-x]);
+					++row;
+				}
+			}
 	    }
 	    _TIFFfree(buf);
 	    TIFFClose(tif);
@@ -225,12 +227,12 @@
 	    int row,tx0,tx1,ty0,ty1;
 
 	    tx0=x0;
-	    tx1=std::min(width+x0,(unsigned)width_);
+	    tx1=min(width+x0,(unsigned)width_);
 
 	    for (unsigned y=start_y; y < end_y; y+=rows_per_strip_)
 	    {
-		ty0=std::max(y0,y)-y;
-		ty1=std::min(height+y0,y+rows_per_strip_)-y;
+		ty0 = max(y0,y)-y;
+		ty1 = min(height+y0,y+rows_per_strip_)-y;
 
 		if (!TIFFReadRGBAStrip(tif,y,buf)) break;
 		



From pavlenko at berlios.de  Wed Mar 22 16:59:15 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 22 Mar 2006 16:59:15 +0100
Subject: [Mapnik-svn] r201 - trunk/include
Message-ID: <200603221559.k2MFxFbL029902@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 16:59:15 +0100 (Wed, 22 Mar 2006)
New Revision: 201

Modified:
   trunk/include/config.hpp
Log:
added new line at the end of file

Modified: trunk/include/config.hpp
===================================================================
--- trunk/include/config.hpp	2006-03-22 15:57:12 UTC (rev 200)
+++ trunk/include/config.hpp	2006-03-22 15:59:15 UTC (rev 201)
@@ -11,4 +11,4 @@
 # define MAPNIK_DECL 
 #endif
 
-#endif
\ No newline at end of file
+#endif



From pavlenko at berlios.de  Wed Mar 22 20:57:55 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Wed, 22 Mar 2006 20:57:55 +0100
Subject: [Mapnik-svn] r202 - trunk/include
Message-ID: <200603221957.k2MJvt0l011335@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 20:57:48 +0100 (Wed, 22 Mar 2006)
New Revision: 202

Modified:
   trunk/include/value.hpp
Log:
re-implemented value class to compile on win32

Modified: trunk/include/value.hpp
===================================================================
--- trunk/include/value.hpp	2006-03-22 15:59:15 UTC (rev 201)
+++ trunk/include/value.hpp	2006-03-22 19:57:48 UTC (rev 202)
@@ -28,7 +28,7 @@
 using namespace boost;
 namespace mapnik {
 
-	typedef variant<std::string,int,double> value_base;
+    typedef variant<int,double,std::string> value_base;
     
     namespace impl {
 	struct equals
@@ -327,72 +327,83 @@
 	    }
 	};
 	
-	struct to_expression_string : public boost::static_visitor<std::string>
-	{
-	    template <typename T>
-	    std::string operator() (T val) const
-	    {
-		std::stringstream ss;
-		ss << val;
-		return ss.str();
-	    } 
-	    std::string operator() (std::string const& val) const
-	    {
-		return "'" + val + "'";
-	    }
-	};
+    struct to_expression_string : public boost::static_visitor<std::string>
+    {
+        template <typename T>
+        std::string operator() (T val) const
+        {
+            std::stringstream ss;
+            ss << val;
+            return ss.str();
+        } 
+        std::string operator() (std::string const& val) const
+        {
+            return "'" + val + "'";
+        }
+    };
     }
     
-    class value : public value_base
+    class value
     {
+        value_base base_;
+        friend const value operator+(value const&,value const&);
+        friend const value operator-(value const&,value const&);
+        friend const value operator*(value const&,value const&);
+        friend const value operator/(value const&,value const&);
+        //friend template <typename charT, typename traits> 
+          //      std::basic_ostream<charT,traits>&  operator << (std::basic_ostream<charT,traits>&,
+    		//                                                       value const& );     
     public:
 	value ()
-	    : value_base(0) {}
+	    : base_(0) {}
 	
 	template <typename T> value(T _val_)
-	    : value_base(_val_) {}
+	    : base_(_val_) {}
 	
-	value (const value& rhs)
-	{
-        //todo!!!!!!!!!
-	}
-	value& operator=(value const& rhs)
-	{
-		if (this == &rhs)
-			return  *this;
-		//TODO!!!!!	
-		return *this;	
-	}
+    //value (std::string const& str)
+     //   : base(str) {}
+    
+	//value& operator=(value const& rhs)
+	//{
+	//	if (this == &rhs)
+	//		return  *this;
+//		//TODO!!!!!	
+//		return *this;	
+	//}
 	bool operator==(value const& other) const
 	{
-	    return boost::apply_visitor(impl::equals(),*this,other);
+	    return boost::apply_visitor(impl::equals(),base_,other.base_);
 	}
 
 	bool operator!=(value const& other) const
 	{
-	    return !(boost::apply_visitor(impl::equals(),*this,other));
+	    return !(boost::apply_visitor(impl::equals(),base_,other.base_));
 	}
 	
 	bool operator>(value const& other) const
 	{
-	    return boost::apply_visitor(impl::greater_than(),*this,other);
+	    return boost::apply_visitor(impl::greater_than(),base_,other.base_);
 	}
 
 	bool operator>=(value const& other) const
 	{
-	    return boost::apply_visitor(impl::greater_or_equal(),*this,other);
+	    return boost::apply_visitor(impl::greater_or_equal(),base_,other.base_);
 	}
 
 	bool operator<(value const& other) const
 	{
-	    return boost::apply_visitor(impl::less_than(),*this,other);
+	    return boost::apply_visitor(impl::less_than(),base_,other.base_);
 	}
 
 	bool operator<=(value const& other) const
 	{
-	    return boost::apply_visitor(impl::less_or_equal(),*this,other);
+	    return boost::apply_visitor(impl::less_or_equal(),base_,other.base_);
 	}
-
+    value_base const& base() const
+    {
+        return base_;
+    }
+/*
 	value& operator+=(value const& other)
 	{
 	    *this = boost::apply_visitor(impl::add<value>(),*this,other);
@@ -416,15 +427,15 @@
 	    *this = boost::apply_visitor(impl::div<value>(),*this,other);
 	    return *this;
 	}
-
+*/
 	std::string to_expression_string() const
 	{
-	    return boost::apply_visitor(impl::to_expression_string(),*this);
+	    return boost::apply_visitor(impl::to_expression_string(),base_);
 	}
 
 	std::string to_string() const
 	{
-	    return boost::apply_visitor(impl::to_string(),*this);
+	    return boost::apply_visitor(impl::to_string(),base_);
 	}
     };
     
@@ -433,7 +444,7 @@
 	//value tmp(p1);
 	//tmp+=p2;
 	//return tmp;
-		return boost::apply_visitor(impl::add<value>(),p1, p2);
+		return value(boost::apply_visitor(impl::add<value>(),p1.base_, p2.base_));
     }
 
     inline const value operator-(value const& p1,value const& p2)
@@ -441,7 +452,7 @@
 	//value tmp(p1);
 	//tmp-=p2;
 	//return tmp;
-		return boost::apply_visitor(impl::sub<value>(),p1, p2);
+		return value(boost::apply_visitor(impl::sub<value>(),p1.base_, p2.base_));
     }
 
     inline const value operator*(value const& p1,value const& p2)
@@ -449,7 +460,7 @@
 	//value tmp(p1);
 	//tmp*=p2;
 	//return tmp;
-		return boost::apply_visitor(impl::mult<value>(),p1, p2);
+		return value(boost::apply_visitor(impl::mult<value>(),p1.base_, p2.base_));
     }
 
     inline const value operator/(value const& p1,value const& p2)
@@ -457,17 +468,17 @@
 	//value tmp(p1);
 	//tmp/=p2;
 	//return tmp;
-	    return boost::apply_visitor(impl::div<value>(),p1, p2);
+	    return value(boost::apply_visitor(impl::div<value>(),p1.base_, p2.base_));
 	}
 
-    //template <typename charT, typename traits>
-    //inline std::basic_ostream<charT,traits>& 
-    //operator << (std::basic_ostream<charT,traits>& out,/
-    //		 value const& v)
-    // {
-    //	out << v.get();
-    //	return out; 
-    //}
+    template <typename charT, typename traits>
+    inline std::basic_ostream<charT,traits>& 
+    operator << (std::basic_ostream<charT,traits>& out,
+    		 value const& v)
+    {
+    	out << v.base();
+    	return out; 
+    }
 }
 
 #endif //VALUE_HPP



From pavlenko at berlios.de  Wed Mar 22 21:20:46 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 22 Mar 2006 21:20:46 +0100
Subject: [Mapnik-svn] r203 - trunk/agg
Message-ID: <200603222020.k2MKKkJk018894@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 21:20:44 +0100 (Wed, 22 Mar 2006)
New Revision: 203

Modified:
   trunk/agg/SConscript
Log:
added -fPIC flag to agg to compile on x86_64



Modified: trunk/agg/SConscript
===================================================================
--- trunk/agg/SConscript	2006-03-22 19:57:48 UTC (rev 202)
+++ trunk/agg/SConscript	2006-03-22 20:20:44 UTC (rev 203)
@@ -21,4 +21,4 @@
 
 Import('env')
 
-env.StaticLibrary('agg', glob.glob('./src/' + '*.cpp'), LIBS=[], CPPPATH='./include', CXXFLAGS='-O3')
+env.StaticLibrary('agg', glob.glob('./src/' + '*.cpp'), LIBS=[], CPPPATH='./include', CXXFLAGS='-O3 -fPIC ')



From pavlenko at berlios.de  Wed Mar 22 21:31:29 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 22 Mar 2006 21:31:29 +0100
Subject: [Mapnik-svn] r204 - trunk/include
Message-ID: <200603222031.k2MKVTTs026462@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-22 21:31:02 +0100 (Wed, 22 Mar 2006)
New Revision: 204

Modified:
   trunk/include/value.hpp
Log:
code cleanup



Modified: trunk/include/value.hpp
===================================================================
--- trunk/include/value.hpp	2006-03-22 20:20:44 UTC (rev 203)
+++ trunk/include/value.hpp	2006-03-22 20:31:02 UTC (rev 204)
@@ -327,20 +327,20 @@
 	    }
 	};
 	
-    struct to_expression_string : public boost::static_visitor<std::string>
-    {
-        template <typename T>
-        std::string operator() (T val) const
-        {
-            std::stringstream ss;
-            ss << val;
-            return ss.str();
-        } 
-        std::string operator() (std::string const& val) const
-        {
-            return "'" + val + "'";
-        }
-    };
+	struct to_expression_string : public boost::static_visitor<std::string>
+	{
+	    template <typename T>
+	    std::string operator() (T val) const
+	    {
+		std::stringstream ss;
+		ss << val;
+		return ss.str();
+	    } 
+	    std::string operator() (std::string const& val) const
+	    {
+		return "'" + val + "'";
+	    }
+	};
     }
     
     class value
@@ -350,26 +350,14 @@
         friend const value operator-(value const&,value const&);
         friend const value operator*(value const&,value const&);
         friend const value operator/(value const&,value const&);
-        //friend template <typename charT, typename traits> 
-          //      std::basic_ostream<charT,traits>&  operator << (std::basic_ostream<charT,traits>&,
-    		//                                                       value const& );     
+
     public:
 	value ()
 	    : base_(0) {}
 	
 	template <typename T> value(T _val_)
 	    : base_(_val_) {}
-	
-    //value (std::string const& str)
-     //   : base(str) {}
-    
-	//value& operator=(value const& rhs)
-	//{
-	//	if (this == &rhs)
-	//		return  *this;
-//		//TODO!!!!!	
-//		return *this;	
-	//}
+
 	bool operator==(value const& other) const
 	{
 	    return boost::apply_visitor(impl::equals(),base_,other.base_);
@@ -399,35 +387,11 @@
 	{
 	    return boost::apply_visitor(impl::less_or_equal(),base_,other.base_);
 	}
-    value_base const& base() const
-    {
-        return base_;
-    }
-/*
-	value& operator+=(value const& other)
+	value_base const& base() const
 	{
-	    *this = boost::apply_visitor(impl::add<value>(),*this,other);
-	    return *this;
+	    return base_;
 	}
 
-	value& operator-=(value const& other)
-	{
-	    *this = boost::apply_visitor(impl::sub<value>(),*this,other);
-	    return *this;
-	}
-
-	value& operator*=(value const& other)
-	{
-	    *this = boost::apply_visitor(impl::mult<value>(),*this,other);
-	    return *this;
-	}
-	
-	value& operator/=(value const& other)
-	{
-	    *this = boost::apply_visitor(impl::div<value>(),*this,other);
-	    return *this;
-	}
-*/
 	std::string to_expression_string() const
 	{
 	    return boost::apply_visitor(impl::to_expression_string(),base_);
@@ -441,36 +405,28 @@
     
     inline const value operator+(value const& p1,value const& p2)
     {
-	//value tmp(p1);
-	//tmp+=p2;
-	//return tmp;
-		return value(boost::apply_visitor(impl::add<value>(),p1.base_, p2.base_));
+
+	return value(boost::apply_visitor(impl::add<value>(),p1.base_, p2.base_));
     }
 
     inline const value operator-(value const& p1,value const& p2)
     {
-	//value tmp(p1);
-	//tmp-=p2;
-	//return tmp;
-		return value(boost::apply_visitor(impl::sub<value>(),p1.base_, p2.base_));
+
+	return value(boost::apply_visitor(impl::sub<value>(),p1.base_, p2.base_));
     }
 
     inline const value operator*(value const& p1,value const& p2)
     {
-	//value tmp(p1);
-	//tmp*=p2;
-	//return tmp;
-		return value(boost::apply_visitor(impl::mult<value>(),p1.base_, p2.base_));
+
+	return value(boost::apply_visitor(impl::mult<value>(),p1.base_, p2.base_));
     }
 
     inline const value operator/(value const& p1,value const& p2)
     {
-	//value tmp(p1);
-	//tmp/=p2;
-	//return tmp;
-	    return value(boost::apply_visitor(impl::div<value>(),p1.base_, p2.base_));
-	}
 
+	return value(boost::apply_visitor(impl::div<value>(),p1.base_, p2.base_));
+    }
+
     template <typename charT, typename traits>
     inline std::basic_ostream<charT,traits>& 
     operator << (std::basic_ostream<charT,traits>& out,



From pavlenko at berlios.de  Thu Mar 23 12:54:09 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Thu, 23 Mar 2006 12:54:09 +0100
Subject: [Mapnik-svn] r206 - trunk/include
Message-ID: <200603231154.k2NBs9O0015624@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-23 12:54:03 +0100 (Thu, 23 Mar 2006)
New Revision: 206

Modified:
   trunk/include/config.hpp
Log:
added  pragma to disable 4996 warning

Modified: trunk/include/config.hpp
===================================================================
--- trunk/include/config.hpp	2006-03-23 02:45:08 UTC (rev 205)
+++ trunk/include/config.hpp	2006-03-23 11:54:03 UTC (rev 206)
@@ -7,6 +7,9 @@
 # define MAPNIK_DECL __declspec (dllexport)
 # pragma warning( disable: 4251 )
 # pragma warning( disable: 4275 )
+# if (_MSC_VER >= 1400) // vc8
+#   pragma warning(disable : 4996) //_CRT_SECURE_NO_DEPRECATE
+# endif
 #else
 # define MAPNIK_DECL 
 #endif



From pavlenko at berlios.de  Thu Mar 23 12:55:14 2006
From: pavlenko at berlios.de (pavlenko at berlios.de)
Date: Thu, 23 Mar 2006 12:55:14 +0100
Subject: [Mapnik-svn] r207 - in trunk: include src
Message-ID: <200603231155.k2NBtEYC016436@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-23 12:54:50 +0100 (Thu, 23 Mar 2006)
New Revision: 207

Modified:
   trunk/include/font_engine_freetype.hpp
   trunk/src/font_engine_freetype.cpp
Log:
refactored font engine to export symbols correctly on win32

Modified: trunk/include/font_engine_freetype.hpp
===================================================================
--- trunk/include/font_engine_freetype.hpp	2006-03-23 11:54:03 UTC (rev 206)
+++ trunk/include/font_engine_freetype.hpp	2006-03-23 11:54:50 UTC (rev 207)
@@ -93,77 +93,22 @@
     typedef boost::shared_ptr<font_face> face_ptr;
     
     class MAPNIK_DECL freetype_engine : public mapnik::singleton<freetype_engine,mapnik::CreateStatic>,
-		       private boost::noncopyable
+        private boost::noncopyable
     {
-	friend class mapnik::CreateStatic<freetype_engine>;
+        friend class mapnik::CreateStatic<freetype_engine>;
     public:
-	
-	static bool register_font(std::string const& file_name)
-	{
-	    mutex::scoped_lock lock(mapnik::singleton<freetype_engine, 
-				    mapnik::CreateStatic>::mutex_);
-	    FT_Face face;
-	    FT_Error error = FT_New_Face (library_,file_name.c_str(),0,&face);
-	    if ( !error )
-	    {
-		std::string name = std::string(face->family_name) + " " + std::string(face->style_name);
-		name2file_.insert(std::make_pair(name,file_name));
-		FT_Done_Face(face );
-		return true;
-	    }
-	    return false;
-	}
-	
-	static std::vector<std::string> face_names ()
-	{
-	    std::vector<std::string> names;
-	    std::map<std::string,std::string>::const_iterator itr;
-	    for (itr = name2file_.begin();itr!=name2file_.end();++itr)
-	    {
-		names.push_back(itr->first);
-	    }
-	    return names;
-	}
-	
-	static face_ptr create_face(std::string const& family_name)
-	{
-	    mutex::scoped_lock lock(mapnik::singleton<freetype_engine, 
-				    mapnik::CreateStatic>::mutex_);
 
-	    std::map<std::string,std::string>::iterator itr;
-	    itr = name2file_.find(family_name);
-	    if (itr != name2file_.end())
-	    {
-		FT_Face face;
-		FT_Error error = FT_New_Face (library_,itr->second.c_str(),0,&face);
-		
-		if (!error)
-		{
-		    return face_ptr (new font_face(face));
-		}
-	    }
-	    return face_ptr();
-	}
-	
+        static bool register_font(std::string const& file_name);
+        static std::vector<std::string> face_names ();
+        static face_ptr create_face(std::string const& family_name);
+
     private:
-	freetype_engine()
-	{
-	    FT_Error error = FT_Init_FreeType( &library_ );
-	    if (error)
-	    {
-		throw std::runtime_error("can not load FreeType2 library");
-	    }
-	}
-	virtual ~freetype_engine()
-	{   
-	    FT_Done_FreeType(library_);   
-	}
-	
+        freetype_engine();
+        virtual ~freetype_engine();
         static FT_Library library_;
-	static std::map<std::string,std::string> name2file_;
+        static std::map<std::string,std::string> name2file_;
     }; 
     
-    
     template <typename T>
     class MAPNIK_DECL face_manager : private boost::noncopyable
     {
@@ -171,24 +116,24 @@
 	typedef std::map<std::string,face_ptr> faces;
 	
     public:
-	face_ptr get_face(std::string const& name)
-	{
-	    typename faces::iterator itr;
-	    itr = faces_.find(name);
-	    if (itr != faces_.end())
-	    {
-		return itr->second;
-	    }
-	    else
-	    {
-		face_ptr face = font_engine_type::instance()->create_face(name);
-		if (face)
-		{
-		    faces_.insert(make_pair(name,face));
-		}
-		return face;	
-	    }
-	}
+        face_ptr get_face(std::string const& name)
+        {
+            typename faces::iterator itr;
+            itr = faces_.find(name);
+            if (itr != faces_.end())
+            {
+                return itr->second;
+            }
+            else
+            {
+                face_ptr face = font_engine_type::instance()->create_face(name);
+                if (face)
+                {
+                    faces_.insert(make_pair(name,face));
+                }
+                return face;	
+            }
+        }
     private:
 	faces faces_;
     };

Modified: trunk/src/font_engine_freetype.cpp
===================================================================
--- trunk/src/font_engine_freetype.cpp	2006-03-23 11:54:03 UTC (rev 206)
+++ trunk/src/font_engine_freetype.cpp	2006-03-23 11:54:50 UTC (rev 207)
@@ -22,6 +22,66 @@
 
 namespace mapnik
 {
+    freetype_engine::freetype_engine()
+	{
+	    FT_Error error = FT_Init_FreeType( &library_ );
+	    if (error)
+	    {
+		    throw std::runtime_error("can not load FreeType2 library");
+	    }
+	}
+
+	freetype_engine::~freetype_engine()
+	{   
+	    FT_Done_FreeType(library_);   
+	}
+
+    bool freetype_engine::register_font(std::string const& file_name)
+    {
+        mutex::scoped_lock lock(mapnik::singleton<freetype_engine, 
+            mapnik::CreateStatic>::mutex_);
+        FT_Face face;
+        FT_Error error = FT_New_Face (library_,file_name.c_str(),0,&face);
+        if ( !error )
+        {
+            std::string name = std::string(face->family_name) + " " + std::string(face->style_name);
+            name2file_.insert(std::make_pair(name,file_name));
+            FT_Done_Face(face );
+            return true;
+        }
+        return false;
+    }
+    std::vector<std::string> freetype_engine::face_names ()
+    {
+        std::vector<std::string> names;
+        std::map<std::string,std::string>::const_iterator itr;
+        for (itr = name2file_.begin();itr!=name2file_.end();++itr)
+        {
+            names.push_back(itr->first);
+        }
+        return names;
+    }
+
+    face_ptr freetype_engine::create_face(std::string const& family_name)
+    {
+        mutex::scoped_lock lock(mapnik::singleton<freetype_engine, 
+            mapnik::CreateStatic>::mutex_);
+
+        std::map<std::string,std::string>::iterator itr;
+        itr = name2file_.find(family_name);
+        if (itr != name2file_.end())
+        {
+            FT_Face face;
+            FT_Error error = FT_New_Face (library_,itr->second.c_str(),0,&face);
+
+            if (!error)
+            {
+                return face_ptr (new font_face(face));
+            }
+        }
+        return face_ptr();
+    }
+
     FT_Library freetype_engine::library_;
     std::map<std::string,std::string> freetype_engine::name2file_;
 }



From pavlenko at berlios.de  Thu Mar 23 22:45:32 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Thu, 23 Mar 2006 22:45:32 +0100
Subject: [Mapnik-svn] r208 - in trunk: include plugins/input/shape
Message-ID: <200603232145.k2NLjW8G022544@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-23 22:45:32 +0100 (Thu, 23 Mar 2006)
New Revision: 208

Modified:
   trunk/include/agg_renderer.hpp
   trunk/include/font_engine_freetype.hpp
   trunk/plugins/input/shape/shape.cpp
Log:
small cleanup

Modified: trunk/include/agg_renderer.hpp
===================================================================
--- trunk/include/agg_renderer.hpp	2006-03-23 11:54:50 UTC (rev 207)
+++ trunk/include/agg_renderer.hpp	2006-03-23 21:45:32 UTC (rev 208)
@@ -38,7 +38,7 @@
 		void end_map_processing(Map const& map);
 		void start_layer_processing(Layer const& lay);
 		void end_layer_processing(Layer const& lay);
-		void process(point_symbolizer const& sym,Feature const& feature);	    	       
+		void process(point_symbolizer const& sym,Feature const& feature);
 		void process(line_symbolizer const& sym,Feature const& feature);
 		void process(line_pattern_symbolizer const& sym,Feature const& feature);
 		void process(polygon_symbolizer const& sym,Feature const& feature);

Modified: trunk/include/font_engine_freetype.hpp
===================================================================
--- trunk/include/font_engine_freetype.hpp	2006-03-23 11:54:50 UTC (rev 207)
+++ trunk/include/font_engine_freetype.hpp	2006-03-23 21:45:32 UTC (rev 208)
@@ -248,12 +248,12 @@
 	    FT_Face face = face_->get_face();
 	    FT_GlyphSlot slot = face->glyph;
 	    FT_Bool use_kerning;
-	    FT_UInt previous;
+	    FT_UInt previous = 0;
 	    
 	    pen.x = 0;
 	    pen.y = 0;
 	    
-        use_kerning = FT_HAS_KERNING(face)>0?true:false;
+	    use_kerning = FT_HAS_KERNING(face)>0?true:false;
 	    
 	    FT_BBox bbox;   
 	    bbox.xMin = bbox.yMin = 32000; 

Modified: trunk/plugins/input/shape/shape.cpp
===================================================================
--- trunk/plugins/input/shape/shape.cpp	2006-03-23 11:54:50 UTC (rev 207)
+++ trunk/plugins/input/shape/shape.cpp	2006-03-23 21:45:32 UTC (rev 208)
@@ -26,12 +26,12 @@
 
 DATASOURCE_PLUGIN(shape_datasource)
 
-shape_datasource::shape_datasource(const parameters &params)
-: shape_name_(params.get("file")),
-type_(datasource::Vector),
-file_length_(0),
-indexed_(false),
-desc_(params.get("name"))
+    shape_datasource::shape_datasource(const parameters &params)
+	: shape_name_(params.get("file")),
+	  type_(datasource::Vector),
+	  file_length_(0),
+	  indexed_(false),
+	  desc_(params.get("name"))
 {
     try
     {



From jdoyon at berlios.de  Mon Mar 27 00:32:05 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Mon, 27 Mar 2006 00:32:05 +0200
Subject: [Mapnik-svn] r209 - in trunk: . fonts/ttf-bitstream-vera-1.10
Message-ID: <200603262232.k2QMW5vl023385@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-27 00:32:03 +0200 (Mon, 27 Mar 2006)
New Revision: 209

Modified:
   trunk/INSTALL
   trunk/fonts/ttf-bitstream-vera-1.10/
Log:
Set some svn properties.




Property changes on: trunk/INSTALL
___________________________________________________________________
Name: svn:keywords
   + Id


Property changes on: trunk/fonts/ttf-bitstream-vera-1.10
___________________________________________________________________
Name: svn:ignore
   + .sconsign




From jdoyon at berlios.de  Mon Mar 27 00:35:54 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Mon, 27 Mar 2006 00:35:54 +0200
Subject: [Mapnik-svn] r210 - in trunk/bindings/python: . pyprojection
Message-ID: <200603262235.k2QMZsWn025193@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-27 00:35:37 +0200 (Mon, 27 Mar 2006)
New Revision: 210

Added:
   trunk/bindings/python/pyprojection/
   trunk/bindings/python/pyprojection/LICENSE
   trunk/bindings/python/pyprojection/Projection.py
   trunk/bindings/python/pyprojection/Projection_wrap.c
   trunk/bindings/python/pyprojection/SConscript
Log:
Add python PROJ.4 module under mapnik python API.

This makes the Projection class available from mapnik:

>>> from mapnik import Projection
registered datasource : raster
registered datasource : shape
registered datasource : postgis
>>> Projection
<class mapnik.Projection.Projection at 0xb7f7250c>
>>>




Property changes on: trunk/bindings/python/pyprojection
___________________________________________________________________
Name: svn:ignore
   + .sconsign


Added: trunk/bindings/python/pyprojection/LICENSE
===================================================================
--- trunk/bindings/python/pyprojection/LICENSE	2006-03-26 22:32:03 UTC (rev 209)
+++ trunk/bindings/python/pyprojection/LICENSE	2006-03-26 22:35:37 UTC (rev 210)
@@ -0,0 +1,27 @@
+Projection.i: SWIG interface file for PROJ.4 projection library.
+
+Copyright (c) 2001 Meridian Environmental Technology, Inc
+All rights reserved.
+
+Author: Douglas K. Rand <rand at meridian-enviro.com>
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.

Added: trunk/bindings/python/pyprojection/Projection.py
===================================================================
--- trunk/bindings/python/pyprojection/Projection.py	2006-03-26 22:32:03 UTC (rev 209)
+++ trunk/bindings/python/pyprojection/Projection.py	2006-03-26 22:35:37 UTC (rev 210)
@@ -0,0 +1,93 @@
+# This file was created automatically by SWIG.
+import Projectionc
+class Projection:
+    def __init__(self,*args):
+        self.this = apply(Projectionc.new_Projection,args)
+        self.thisown = 1
+
+    def __del__(self,Projectionc=Projectionc):
+        if self.thisown == 1 :
+            Projectionc.delete_Projection(self)
+    def Forward(*args):
+        val = apply(Projectionc.Projection_Forward,args)
+        return val
+    def Inverse(*args):
+        val = apply(Projectionc.Projection_Inverse,args)
+        return val
+    def cobject(*args):
+        val = apply(Projectionc.Projection_cobject,args)
+        return val
+    __setmethods__ = {
+        "units" : Projectionc.Projection_units_set,
+        "proj" : Projectionc.Projection_proj_set,
+    }
+    def __setattr__(self,name,value):
+        if (name == "this") or (name == "thisown"): self.__dict__[name] = value; return
+        method = Projection.__setmethods__.get(name,None)
+        if method: return method(self,value)
+        self.__dict__[name] = value
+    __getmethods__ = {
+        "units" : Projectionc.Projection_units_get,
+        "proj" : Projectionc.Projection_proj_get,
+    }
+    def __getattr__(self,name):
+        method = Projection.__getmethods__.get(name,None)
+        if method: return method(self)
+        raise AttributeError,name
+    def __repr__(self):
+        return "<C Projection instance at %s>" % (self.this,)
+    
+    def __del__(self,Projectionc=Projectionc):
+        if getattr(self, 'thisown', 0):
+            Projectionc.delete_Projection(self)
+    
+class ProjectionPtr(Projection):
+    def __init__(self,this):
+        self.this = this
+        self.thisown = 0
+        self.__class__ = Projection
+
+
+
+
+
+#-------------- FUNCTION WRAPPERS ------------------
+
+int_array = Projectionc.int_array
+
+int_destroy = Projectionc.int_destroy
+
+int_get = Projectionc.int_get
+
+int_set = Projectionc.int_set
+
+double_array = Projectionc.double_array
+
+double_destroy = Projectionc.double_destroy
+
+double_get = Projectionc.double_get
+
+double_set = Projectionc.double_set
+
+float_array = Projectionc.float_array
+
+float_destroy = Projectionc.float_destroy
+
+float_get = Projectionc.float_get
+
+float_set = Projectionc.float_set
+
+string_array = Projectionc.string_array
+
+string_destroy = Projectionc.string_destroy
+
+string_get = Projectionc.string_get
+
+string_set = Projectionc.string_set
+
+
+
+#-------------- VARIABLE WRAPPERS ------------------
+
+DEGREES = Projectionc.DEGREES
+RADIANS = Projectionc.RADIANS

Added: trunk/bindings/python/pyprojection/Projection_wrap.c
===================================================================
--- trunk/bindings/python/pyprojection/Projection_wrap.c	2006-03-26 22:32:03 UTC (rev 209)
+++ trunk/bindings/python/pyprojection/Projection_wrap.c	2006-03-26 22:35:37 UTC (rev 210)
@@ -0,0 +1,1549 @@
+/* ----------------------------------------------------------------------------
+ * This file was automatically generated by SWIG (http://www.swig.org).
+ * Version 1.3u-20020503-1857 (Alpha 5)
+ * 
+ * This file is not intended to be easily readable and contains a number of 
+ * coding conventions designed to improve portability and efficiency. Do not make
+ * changes to this file unless you know what you are doing--modify the SWIG 
+ * interface file instead. 
+ * ----------------------------------------------------------------------------- */
+
+#define SWIGPYTHON
+/***********************************************************************
+ * common.swg
+ *
+ *     This file contains generic SWIG runtime support for pointer
+ *     type checking as well as a few commonly used macros to control
+ *     external linkage.
+ *
+ * Author : David Beazley (beazley at cs.uchicago.edu)
+ *
+ * Copyright (c) 1999-2000, The University of Chicago
+ * 
+ * This file may be freely redistributed without license or fee provided
+ * this copyright message remains intact.
+ ************************************************************************/
+
+#include <string.h>
+
+#if defined(_WIN32) || defined(__WIN32__)
+#       if defined(_MSC_VER)
+#               if defined(STATIC_LINKED)
+#                       define SWIGEXPORT(a) a
+#               else
+#                       define SWIGEXPORT(a) __declspec(dllexport) a
+#               endif
+#       else
+#               if defined(__BORLANDC__)
+#                       define SWIGEXPORT(a) a _export
+#               else
+#                       define SWIGEXPORT(a) a
+#       endif
+#endif
+#else
+#       define SWIGEXPORT(a) a
+#endif
+
+#ifdef SWIG_GLOBAL
+#define SWIGRUNTIME(a) SWIGEXPORT(a)
+#else
+#define SWIGRUNTIME(a) static a
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef struct swig_type_info {
+  char  *name;                 
+  void *(*converter)(void *);
+  char  *str;
+  struct swig_type_info  *next;
+  struct swig_type_info  *prev;
+} swig_type_info;
+
+#ifdef SWIG_NOINCLUDE
+SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
+SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
+SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
+#else
+
+static swig_type_info *swig_type_list = 0;
+
+/* Register a type mapping with the type-checking */
+SWIGRUNTIME(swig_type_info *)
+SWIG_TypeRegister(swig_type_info *ti)
+{
+  swig_type_info *tc, *head, *ret, *next;
+  /* Check to see if this type has already been registered */
+  tc = swig_type_list;
+  while (tc) {
+    if (strcmp(tc->name, ti->name) == 0) {
+      /* Already exists in the table.  Just add additional types to the list */
+      head = tc;
+      next = tc->next;
+      goto l1;
+    }
+    tc = tc->prev;
+  }
+  head = ti;
+  next = 0;
+
+  /* Place in list */
+  ti->prev = swig_type_list;
+  swig_type_list = ti;
+
+  /* Build linked lists */
+ l1:
+  ret = head;
+  tc = ti + 1;
+  /* Patch up the rest of the links */
+  while (tc->name) {
+    head->next = tc;
+    tc->prev = head;
+    head = tc;
+    tc++;
+  }
+  head->next = next;
+  return ret;
+}
+
+/* Check the typename */
+SWIGRUNTIME(swig_type_info *) 
+SWIG_TypeCheck(char *c, swig_type_info *ty)
+{
+  swig_type_info *s;
+  if (!ty) return 0;        /* Void pointer */
+  s = ty->next;             /* First element always just a name */
+  while (s) {
+    if (strcmp(s->name,c) == 0) {
+      if (s == ty->next) return s;
+      /* Move s to the top of the linked list */
+      s->prev->next = s->next;
+      if (s->next) {
+	s->next->prev = s->prev;
+      }
+      /* Insert s as second element in the list */
+      s->next = ty->next;
+      if (ty->next) ty->next->prev = s;
+      ty->next = s;
+      return s;
+    }
+    s = s->next;
+  }
+  return 0;
+}
+
+/* Cast a pointer (needed for C++ inheritance */
+SWIGRUNTIME(void *) 
+SWIG_TypeCast(swig_type_info *ty, void *ptr) 
+{
+  if ((!ty) || (!ty->converter)) return ptr;
+  return (*ty->converter)(ptr);
+}
+
+/* Search for a swig_type_info structure */
+SWIGRUNTIME(void *)
+SWIG_TypeQuery(const char *name) {
+  swig_type_info *ty = swig_type_list;
+  while (ty) {
+    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
+    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
+    ty = ty->prev;
+  }
+  return 0;
+}
+
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+
+
+/***********************************************************************
+ * python.swg
+ *
+ *     This file contains the runtime support for Python modules
+ *     and includes code for managing global variables and pointer
+ *     type checking.
+ *
+ * Author : David Beazley (beazley at cs.uchicago.edu)
+ ************************************************************************/
+
+#include <stdlib.h>
+#include "Python.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define SWIG_PY_INT     1
+#define SWIG_PY_FLOAT   2
+#define SWIG_PY_STRING  3
+#define SWIG_PY_POINTER 4
+
+/* Constant information structure */
+typedef struct swig_const_info {
+    int type;
+    char *name;
+    long lvalue;
+    double dvalue;
+    void   *pvalue;
+    swig_type_info **ptype;
+} swig_const_info;
+
+#ifdef SWIG_NOINCLUDE
+
+SWIGEXPORT(PyObject *)        SWIG_newvarlink();
+SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
+SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
+SWIGEXPORT(void)              SWIG_MakePtr(char *c, void *, swig_type_info *);
+SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *);
+SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
+
+#else
+
+/* -----------------------------------------------------------------------------
+ * global variable support code.
+ * ----------------------------------------------------------------------------- */
+
+typedef struct swig_globalvar {   
+  char       *name;                  /* Name of global variable */
+  PyObject *(*get_attr)(void);       /* Return the current value */
+  int       (*set_attr)(PyObject *); /* Set the value */
+  struct swig_globalvar *next;
+} swig_globalvar;
+
+typedef struct swig_varlinkobject {
+  PyObject_HEAD
+  swig_globalvar *vars;
+} swig_varlinkobject;
+
+static PyObject *
+swig_varlink_repr(swig_varlinkobject *v) {
+  v = v;
+  return PyString_FromString("<Global variables>");
+}
+
+static int
+swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
+  swig_globalvar  *var;
+  flags = flags;
+  fprintf(fp,"Global variables { ");
+  for (var = v->vars; var; var=var->next) {
+    fprintf(fp,"%s", var->name);
+    if (var->next) fprintf(fp,", ");
+  }
+  fprintf(fp," }\n");
+  return 0;
+}
+
+static PyObject *
+swig_varlink_getattr(swig_varlinkobject *v, char *n) {
+  swig_globalvar *var = v->vars;
+  while (var) {
+    if (strcmp(var->name,n) == 0) {
+      return (*var->get_attr)();
+    }
+    var = var->next;
+  }
+  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+  return NULL;
+}
+
+static int
+swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
+  swig_globalvar *var = v->vars;
+  while (var) {
+    if (strcmp(var->name,n) == 0) {
+      return (*var->set_attr)(p);
+    }
+    var = var->next;
+  }
+  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
+  return 1;
+}
+
+statichere PyTypeObject varlinktype = {
+  PyObject_HEAD_INIT(0)              
+  0,
+  "swigvarlink",                      /* Type name    */
+  sizeof(swig_varlinkobject),         /* Basic size   */
+  0,                                  /* Itemsize     */
+  0,                                  /* Deallocator  */ 
+  (printfunc) swig_varlink_print,     /* Print        */
+  (getattrfunc) swig_varlink_getattr, /* get attr     */
+  (setattrfunc) swig_varlink_setattr, /* Set attr     */
+  0,                                  /* tp_compare   */
+  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
+  0,                                  /* tp_as_number */
+  0,                                  /* tp_as_mapping*/
+  0,                                  /* tp_hash      */
+};
+
+/* Create a variable linking object for use later */
+SWIGRUNTIME(PyObject *)
+SWIG_newvarlink(void) {
+  swig_varlinkobject *result = 0;
+  result = PyMem_NEW(swig_varlinkobject,1);
+  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
+  result->ob_type = &varlinktype;
+  result->vars = 0;
+  result->ob_refcnt = 0;
+  Py_XINCREF((PyObject *) result);
+  return ((PyObject*) result);
+}
+
+SWIGRUNTIME(void)
+SWIG_addvarlink(PyObject *p, char *name,
+	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
+  swig_varlinkobject *v;
+  swig_globalvar *gv;
+  v= (swig_varlinkobject *) p;
+  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
+  gv->name = (char *) malloc(strlen(name)+1);
+  strcpy(gv->name,name);
+  gv->get_attr = get_attr;
+  gv->set_attr = set_attr;
+  gv->next = v->vars;
+  v->vars = gv;
+}
+/* Convert a pointer value */
+SWIGRUNTIME(int)
+SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
+  unsigned long p;
+  register int d;
+  swig_type_info *tc;
+  char  *c;
+  static PyObject *SWIG_this = 0;
+  int    newref = 0;
+
+  if (!obj || (obj == Py_None)) {
+    *ptr = 0;
+    return 0;
+  }
+#ifdef SWIG_COBJECT_TYPES
+  if (!(PyCObject_Check(obj))) {
+    if (!SWIG_this)
+      SWIG_this = PyString_InternFromString("this");
+    obj = PyObject_GetAttr(obj,SWIG_this);
+    newref = 1;
+    if (!obj) goto type_error;
+    if (!PyCObject_Check(obj)) {
+      Py_DECREF(obj);
+      goto type_error;
+    }
+  } 
+  *ptr = PyCObject_AsVoidPtr(obj);
+  c = (char *) PyCObject_GetDesc(obj);
+  if (newref) Py_DECREF(obj);
+  goto cobject;
+#else
+  if (!(PyString_Check(obj))) {
+    if (!SWIG_this)
+      SWIG_this = PyString_InternFromString("this");
+    obj = PyObject_GetAttr(obj,SWIG_this);
+    newref = 1;
+    if (!obj) goto type_error;
+    if (!PyString_Check(obj)) {
+      Py_DECREF(obj);
+      goto type_error;
+    }
+  } 
+  c = PyString_AsString(obj);
+  p = 0;
+  /* Pointer values must start with leading underscore */
+  if (*c != '_') {
+    *ptr = (void *) 0;
+    if (strcmp(c,"NULL") == 0) {
+      if (newref) Py_DECREF(obj);
+      return 0;
+    } else {
+      if (newref) Py_DECREF(obj);
+      goto type_error;
+    }
+  }
+  c++;
+  /* Extract hex value from pointer */
+  while ((d = *c)) {
+    if ((d >= '0') && (d <= '9'))
+      p = (p << 4) + (d - '0');
+    else if ((d >= 'a') && (d <= 'f'))
+      p = (p << 4) + (d - ('a'-10));
+    else
+      break; 
+    c++;
+  }
+  *ptr = (void *) p;
+  if (newref) Py_DECREF(obj);
+#endif
+
+#ifdef SWIG_COBJECT_TYPES
+cobject:
+#endif
+
+  if (ty) {
+    tc = SWIG_TypeCheck(c,ty);
+    if (!tc) goto type_error;
+    *ptr = SWIG_TypeCast(tc,(void*)p);
+  }
+  return 0;
+
+type_error:
+
+  if (flags) {
+    if (ty) {
+      char *temp = (char *) malloc(64+strlen(ty->name));
+      sprintf(temp,"Type error. Expected %s", ty->name);
+      PyErr_SetString(PyExc_TypeError, temp);
+      free((char *) temp);
+    } else {
+      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
+    }
+  }
+  return -1;
+}
+
+/* Take a pointer and convert it to a string */
+SWIGRUNTIME(void) 
+SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
+  static char hex[17] = "0123456789abcdef";
+  unsigned long p, s;
+  char result[32], *r; 
+  r = result;
+  p = (unsigned long) ptr;
+  if (p > 0) {
+    while (p > 0) {
+      s = p & 0xf;
+      *(r++) = hex[s];
+      p = p >> 4;
+    }
+    *r = '_';
+    while (r >= result)
+      *(c++) = *(r--);
+    strcpy (c, ty->name);
+  } else {
+    strcpy (c, "NULL");
+  }
+}
+
+/* Create a new pointer object */
+SWIGRUNTIME(PyObject *)
+SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
+  char result[512];
+  PyObject *robj;
+  if (!ptr) {
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+#ifdef SWIG_COBJECT_TYPES
+  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, type->name, NULL);
+#else
+  SWIG_MakePtr(result,ptr,type);
+  robj = PyString_FromString(result);
+#endif
+  return robj;
+}
+
+/* Install Constants */
+SWIGRUNTIME(void)
+SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
+  int i;
+  PyObject *obj;
+  for (i = 0; constants[i].type; i++) {
+    switch(constants[i].type) {
+    case SWIG_PY_INT:
+      obj = PyInt_FromLong(constants[i].lvalue);
+      break;
+    case SWIG_PY_FLOAT:
+      obj = PyFloat_FromDouble(constants[i].dvalue);
+      break;
+    case SWIG_PY_STRING:
+      obj = PyString_FromString((char *) constants[i].pvalue);
+      break;
+    case SWIG_PY_POINTER:
+      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype);
+      break;
+    default:
+      obj = 0;
+      break;
+    }
+    if (obj) {
+      PyDict_SetItemString(d,constants[i].name,obj);
+      Py_DECREF(obj);
+    }
+  }
+}
+
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+
+
+/* -------- TYPES TABLE (BEGIN) -------- */
+
+#define  SWIGTYPE_p_float swig_types[0] 
+#define  SWIGTYPE_p_double swig_types[1] 
+#define  SWIGTYPE_p_p_char swig_types[2] 
+#define  SWIGTYPE_p_PJ swig_types[3] 
+#define  SWIGTYPE_p_int swig_types[4] 
+#define  SWIGTYPE_p_Projection swig_types[5] 
+static swig_type_info *swig_types[7];
+
+/* -------- TYPES TABLE (END) -------- */
+
+
+/*-----------------------------------------------
+              @(target):= Projectionc.so
+  ------------------------------------------------*/
+#define SWIG_init    initProjectionc
+
+#define SWIG_name    "Projectionc"
+
+#include <projects.h>
+
+    // We wrap the PJ structure in our own so we can keep the
+    // type of units the user wants to operate in along.
+    typedef enum {DEGREES, RADIANS} Units;
+    typedef struct {
+	Units units;
+	PJ *proj;
+    } Projection;
+
+static PyObject* l_output_helper(PyObject* target, PyObject* o) {
+    PyObject*   o2;
+    if (!target) {                   
+        target = o;
+    } else if (target == Py_None) {  
+        Py_DECREF(Py_None);
+        target = o;
+    } else {                         
+        if (!PyList_Check(target)) {
+            o2 = target;
+            target = PyList_New(0);
+            PyList_Append(target, o2);
+	    Py_XDECREF(o2);
+        }
+        PyList_Append(target,o);
+	Py_XDECREF(o);
+    }
+    return target;
+}
+
+static PyObject* t_output_helper(PyObject* target, PyObject* o) {
+    PyObject*   o2;
+    PyObject*   o3;
+
+    if (!target) {                   
+        target = o;
+    } else if (target == Py_None) {  
+        Py_DECREF(Py_None);
+        target = o;
+    } else {                         
+        if (!PyTuple_Check(target)) {
+            o2 = target;
+            target = PyTuple_New(1);
+            PyTuple_SetItem(target, 0, o2);
+        }
+        o3 = PyTuple_New(1);            
+        PyTuple_SetItem(o3, 0, o);      
+
+        o2 = target;
+        target = PySequence_Concat(o2, o3); 
+        Py_DECREF(o2);                      
+        Py_DECREF(o3);
+    }
+    return target;
+}
+
+#define  SWIG_MemoryError    1
+#define  SWIG_IOError        2
+#define  SWIG_RuntimeError   3
+#define  SWIG_IndexError     4
+#define  SWIG_TypeError      5
+#define  SWIG_DivisionByZero 6
+#define  SWIG_OverflowError  7
+#define  SWIG_SyntaxError    8
+#define  SWIG_ValueError     9
+#define  SWIG_SystemError   10
+#define  SWIG_UnknownError  99
+
+static void _SWIG_exception(int code, char *msg) {
+  switch(code) {
+  case SWIG_MemoryError:
+    PyErr_SetString(PyExc_MemoryError,msg);
+    break;
+  case SWIG_IOError:
+    PyErr_SetString(PyExc_IOError,msg);
+    break;
+  case SWIG_RuntimeError:
+    PyErr_SetString(PyExc_RuntimeError,msg);
+    break;
+  case SWIG_IndexError:
+    PyErr_SetString(PyExc_IndexError,msg);
+    break;
+  case SWIG_TypeError:
+    PyErr_SetString(PyExc_TypeError,msg);
+    break;
+  case SWIG_DivisionByZero:
+    PyErr_SetString(PyExc_ZeroDivisionError,msg);
+    break;
+  case SWIG_OverflowError:
+    PyErr_SetString(PyExc_OverflowError,msg);
+    break;
+  case SWIG_SyntaxError:
+    PyErr_SetString(PyExc_SyntaxError,msg);
+    break;
+  case SWIG_ValueError:
+    PyErr_SetString(PyExc_ValueError,msg);
+    break;
+  case SWIG_SystemError:
+    PyErr_SetString(PyExc_SystemError,msg);
+    break;
+  default:
+    PyErr_SetString(PyExc_RuntimeError,msg);
+    break;
+  }
+}
+
+#define SWIG_exception(a,b) { _SWIG_exception(a,b); return NULL; }
+
+#include <limits.h>
+
+/* Create a new integer array */
+
+  static int *int_array(int size) {
+#ifdef __cplusplus
+    return new int[size];
+#else
+    return (int *) malloc(size*sizeof(int));
+#endif
+  }
+
+  /* Destroy an integer array */
+
+  static void int_destroy(int *array) {
+    if (array) {
+#ifdef __cplusplus
+      delete [] array;
+#else
+      free(array);
+#endif
+    }
+  }
+
+  /* Return an element */
+
+  static int int_get(int *array, int index) {
+    if (array) {
+      return array[index];
+    } else {
+      return INT_MIN;
+    }
+  }
+   
+  /* Set an element */
+  
+  static int int_set(int *array, int index, int value) {
+    if (array) {
+      return (array[index] = value);
+    } else {
+      return INT_MIN;
+    }
+  }
+
+
+  #include <float.h>
+
+  /* Create a new float array */
+
+  static float *float_array(int size) {
+#ifdef __cplusplus
+    return new float[size];
+#else
+    return (float *) malloc(size*sizeof(float));
+#endif
+  }
+
+  /* Destroy an array */
+
+  static void float_destroy(float *array) {
+    if (array) {
+#ifdef __cplusplus
+      delete [] array;
+#else
+      free(array);
+#endif
+    }
+  }
+
+  /* Return an element */
+
+  static float float_get(float *array, int index) {
+    if (array) {
+      return array[index];
+    } else {
+      return FLT_MIN;
+    }
+  }
+   
+  /* Set an element */
+  
+  static float float_set(float *array, int index, float value) {
+    if (array) {
+      return (array[index] = value);
+    } else {
+      return FLT_MIN;
+    }
+  }
+
+  /* Create a new double array */
+
+  static double *double_array(int size) {
+#ifdef __cplusplus
+    return new double[size];
+#else
+    return (double *) malloc(size*sizeof(double));
+#endif
+  }
+
+  /* Destroy an array */
+
+  static void double_destroy(double *array) {
+    if (array) {
+#ifdef __cplusplus
+      delete [] array;
+#else
+      free(array);
+#endif
+    }
+  }
+
+  /* Return an element */
+
+  static double double_get(double *array, int index) {
+    if (array) {
+      return array[index];
+    } else {
+      return FLT_MIN;
+    }
+  }
+   
+  /* Set an element */
+  
+  static double double_set(double *array, int index, double value) {
+    if (array) {
+      return (array[index] = value);
+    } else {
+      return FLT_MIN;
+    }
+  }
+
+
+/* Create character string arrays */
+
+static char **string_array(int size) {
+  char **a;
+  int i;
+#ifdef __cplusplus
+  a = new char *[size];
+#else
+  a = (char **) malloc(size*sizeof(char *));
+#endif
+  for (i = 0; i < size; i++)
+    a[i] = 0;
+  return a;
+}
+
+/* Destroy a string array */
+
+static void string_destroy(char **array) {
+  int i = 0;
+  if (array) {
+      while (array[i]) {
+#ifdef __cplusplus
+            delete array[i];
+#else
+            free(array[i]);
+#endif
+            i++;
+      }          	
+#ifdef __cplusplus
+     delete [] array;
+#else
+     free(array);
+#endif
+   }      
+}
+
+/* Get an element */
+
+static char *string_get(char **array_string, int index) {
+  if (array_string) 
+    if (array_string[index]) return (array_string[index]);
+    else return "";
+  else 
+    return "";
+}
+
+/* Set an element */
+
+static char *string_set(char **array_string, int index, char * val) {
+  if (array_string) {
+    if (array_string[index]) {
+#ifdef __cplusplus
+	delete array_string[index];
+#else
+        free(array_string[index]);
+#endif
+    }	
+    if (strlen(val) > 0) {
+#ifdef __cplusplus
+      array_string[index] = new char[strlen(val)+1];
+#else
+      array_string[index] = (char *) malloc(strlen(val)+1);
+#endif
+      strcpy(array_string[index],val);
+      return array_string[index];
+    } else {
+      array_string[index] = 0;
+      return val;
+    }
+  } else return val;
+}
+
+
+    // Make a brand new projection
+    Projection *new_Projection(char **argv, Units units) {
+	int argc = 0;
+	char **p;
+	PJ *proj;
+	Projection *pj = NULL;
+	
+	for(p = argv; p != NULL && *p != NULL; p++) argc++;
+	proj = pj_init(argc, argv);
+	if(proj != NULL) {
+	    pj = (Projection *) malloc(sizeof(Projection));
+	    pj->units = units;
+	    pj->proj = proj;
+	}
+	return pj;
+    }
+
+    // Get rid of a projection
+    void delete_Projection(Projection *self) {
+	if(self != NULL) {
+	    if(self->proj != NULL)
+		pj_free(self->proj);
+	    free(self);  
+	} 
+    }
+
+    // Do a forward (lat/lon --> world) translation
+    void Projection_Forward(Projection *self, double lat, double lon, double *u, double *v) {
+	projUV latlon, result;
+	latlon.u = lat;
+	latlon.v = lon;
+	if(self->units == DEGREES) {
+	    latlon.u *= DEG_TO_RAD;
+	    latlon.v *= DEG_TO_RAD;
+	}
+	result = pj_fwd(latlon, self->proj);
+	*u = result.u;
+	*v = result.v;
+    }
+
+    // Do a reverse (world --> lat/lon) translation
+    void Projection_Inverse(Projection *self, double u, double v, double *lat, double *lon) {
+	projUV world, result;
+	world.u = u;
+	world.v = v;
+	result = pj_inv(world, self->proj);
+	if(self->units == DEGREES) {
+	    result.u *= RAD_TO_DEG;
+	    result.v *= RAD_TO_DEG;
+	}
+	*lat = result.u;
+	*lon = result.v;
+    }
+#ifdef __cplusplus
+extern "C" {
+#endif
+static PyObject *_wrap_int_array(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg0 ;
+    int *result ;
+    
+    if(!PyArg_ParseTuple(args,"i:int_array",&arg0)) return NULL;
+    result = (int *)int_array(arg0);
+    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_int);
+    {
+        if (!result) {
+            SWIG_exception(SWIG_MemoryError,"Out of memory.");
+        }
+    }
+    return resultobj;
+}
+
+
+static PyObject *_wrap_int_destroy(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int *arg0 ;
+    PyObject * argo0 =0 ;
+    
+    if(!PyArg_ParseTuple(args,"O:int_destroy",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_int,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    int_destroy(arg0);
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    return resultobj;
+}
+
+
+static PyObject *_wrap_int_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int *arg0 ;
+    int arg1 ;
+    PyObject * argo0 =0 ;
+    int result ;
+    
+    if(!PyArg_ParseTuple(args,"Oi:int_get",&argo0,&arg1)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_int,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (int )int_get(arg0,arg1);
+    resultobj = PyInt_FromLong((long)result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_int_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int *arg0 ;
+    int arg1 ;
+    int arg2 ;
+    PyObject * argo0 =0 ;
+    int result ;
+    
+    if(!PyArg_ParseTuple(args,"Oii:int_set",&argo0,&arg1,&arg2)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_int,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (int )int_set(arg0,arg1,arg2);
+    resultobj = PyInt_FromLong((long)result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_double_array(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg0 ;
+    double *result ;
+    
+    if(!PyArg_ParseTuple(args,"i:double_array",&arg0)) return NULL;
+    result = (double *)double_array(arg0);
+    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_double);
+    {
+        if (!result) {
+            SWIG_exception(SWIG_MemoryError,"Out of memory.");
+        }
+    }
+    return resultobj;
+}
+
+
+static PyObject *_wrap_double_destroy(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    double *arg0 ;
+    PyObject * argo0 =0 ;
+    
+    if(!PyArg_ParseTuple(args,"O:double_destroy",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_double,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    double_destroy(arg0);
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    return resultobj;
+}
+
+
+static PyObject *_wrap_double_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    double *arg0 ;
+    int arg1 ;
+    PyObject * argo0 =0 ;
+    double result ;
+    
+    if(!PyArg_ParseTuple(args,"Oi:double_get",&argo0,&arg1)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_double,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (double )double_get(arg0,arg1);
+    resultobj = PyFloat_FromDouble(result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_double_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    double *arg0 ;
+    int arg1 ;
+    double arg2 ;
+    PyObject * argo0 =0 ;
+    double result ;
+    
+    if(!PyArg_ParseTuple(args,"Oid:double_set",&argo0,&arg1,&arg2)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_double,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (double )double_set(arg0,arg1,arg2);
+    resultobj = PyFloat_FromDouble(result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_float_array(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg0 ;
+    float *result ;
+    
+    if(!PyArg_ParseTuple(args,"i:float_array",&arg0)) return NULL;
+    result = (float *)float_array(arg0);
+    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_float);
+    {
+        if (!result) {
+            SWIG_exception(SWIG_MemoryError,"Out of memory.");
+        }
+    }
+    return resultobj;
+}
+
+
+static PyObject *_wrap_float_destroy(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    float *arg0 ;
+    PyObject * argo0 =0 ;
+    
+    if(!PyArg_ParseTuple(args,"O:float_destroy",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_float,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    float_destroy(arg0);
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    return resultobj;
+}
+
+
+static PyObject *_wrap_float_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    float *arg0 ;
+    int arg1 ;
+    PyObject * argo0 =0 ;
+    float result ;
+    
+    if(!PyArg_ParseTuple(args,"Oi:float_get",&argo0,&arg1)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_float,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (float )float_get(arg0,arg1);
+    resultobj = PyFloat_FromDouble(result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_float_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    float *arg0 ;
+    int arg1 ;
+    float arg2 ;
+    PyObject * argo0 =0 ;
+    float result ;
+    
+    if(!PyArg_ParseTuple(args,"Oif:float_set",&argo0,&arg1,&arg2)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_float,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (float )float_set(arg0,arg1,arg2);
+    resultobj = PyFloat_FromDouble(result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_string_array(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    int arg0 ;
+    char **result ;
+    
+    if(!PyArg_ParseTuple(args,"i:string_array",&arg0)) return NULL;
+    result = (char **)string_array(arg0);
+    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_p_char);
+    {
+        if (!result) {
+            SWIG_exception(SWIG_MemoryError,"Out of memory.");
+        }
+    }
+    return resultobj;
+}
+
+
+static PyObject *_wrap_string_destroy(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char **arg0 ;
+    PyObject * argo0 =0 ;
+    
+    if(!PyArg_ParseTuple(args,"O:string_destroy",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_p_char,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    string_destroy(arg0);
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    return resultobj;
+}
+
+
+static PyObject *_wrap_string_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char **arg0 ;
+    int arg1 ;
+    PyObject * argo0 =0 ;
+    char *result ;
+    
+    if(!PyArg_ParseTuple(args,"Oi:string_get",&argo0,&arg1)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_p_char,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (char *)string_get(arg0,arg1);
+    resultobj = PyString_FromString(result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_string_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char **arg0 ;
+    int arg1 ;
+    char *arg2 ;
+    PyObject * argo0 =0 ;
+    char *result ;
+    
+    if(!PyArg_ParseTuple(args,"Ois:string_set",&argo0,&arg1,&arg2)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_p_char,1)) == -1) return NULL;
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    result = (char *)string_set(arg0,arg1,arg2);
+    resultobj = PyString_FromString(result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_Projection_units_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    int arg1 ;
+    PyObject * argo0 =0 ;
+    
+    if(!PyArg_ParseTuple(args,"Oi:Projection_units_set",&argo0,&arg1)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    arg0->units = (Units )arg1;
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    return resultobj;
+}
+
+
+static PyObject *_wrap_Projection_units_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    PyObject * argo0 =0 ;
+    int result ;
+    
+    if(!PyArg_ParseTuple(args,"O:Projection_units_get",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    result = (int ) (arg0->units);
+    resultobj = PyInt_FromLong((long)result);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_Projection_proj_set(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    PJ *arg1 ;
+    PyObject * argo0 =0 ;
+    PyObject * argo1 =0 ;
+    
+    if(!PyArg_ParseTuple(args,"OO:Projection_proj_set",&argo0,&argo1)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_PJ,1)) == -1) return NULL;
+    arg0->proj = arg1;
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    return resultobj;
+}
+
+
+static PyObject *_wrap_Projection_proj_get(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    PyObject * argo0 =0 ;
+    PJ *result ;
+    
+    if(!PyArg_ParseTuple(args,"O:Projection_proj_get",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    result = (PJ *) (arg0->proj);
+    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_PJ);
+    return resultobj;
+}
+
+
+static PyObject *_wrap_new_Projection(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    char **arg0 ;
+    int arg1 = DEGREES ;
+    PyObject * obj0  = 0 ;
+    Projection *result ;
+    
+    if(!PyArg_ParseTuple(args,"O|i:new_Projection",&obj0,&arg1)) return NULL;
+    {
+        /* Check if is a list */ 
+        if (PyList_Check(obj0)) {
+            int size = PyList_Size(obj0); 
+            int i = 0; 
+            arg0 = (char **) malloc((size+1)*sizeof(char *)); 
+            for (i = 0; i < size; i++) {
+                PyObject *o = PyList_GetItem(obj0,i); 
+                if (PyString_Check(o)) 
+                arg0[i] = PyString_AsString(PyList_GetItem(obj0,i)); 
+                else {
+                    PyErr_SetString(PyExc_TypeError,"list must contain strings"); 
+                    free(arg0); 
+                    return NULL; 
+                }
+            }
+            arg0[i] = 0; 
+        }else {
+            PyErr_SetString(PyExc_TypeError,"not a list"); return NULL; 
+        }
+    }
+    {
+        if (!arg0) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    {
+        /* Use pj_get_errno_ref to access the pj_errno because directly
+        * accessing pj_errno doesn't work on windows if the proj library is
+     * in a DLL */
+    *pj_get_errno_ref() = 0;
+    result = (Projection *)new_Projection(arg0,(Units )arg1);
+;
+    if (!result)
+    {
+	/* FIXME: There's a case where result is NULL and pj_errno is
+        * not set, namely when memory allocation of the Projection
+        * struct fails. */
+        SWIG_exception(SWIG_IOError, pj_strerrno(*pj_get_errno_ref()));
+    }
+}resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Projection);
+{
+    free((char *) arg0);
+}
+return resultobj;
+}
+
+
+static PyObject *_wrap_delete_Projection(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    PyObject * argo0 =0 ;
+    
+    if(!PyArg_ParseTuple(args,"O:delete_Projection",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    delete_Projection(arg0);
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    return resultobj;
+}
+
+
+static PyObject *_wrap_Projection_Forward(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    double arg1 ;
+    double arg2 ;
+    double *arg3 ;
+    double *arg4 ;
+    double temp ;
+    double temp0 ;
+    PyObject * argo0 =0 ;
+    
+    {
+        arg3 = &temp;
+    }
+    {
+        arg4 = &temp0;
+    }
+    if(!PyArg_ParseTuple(args,"Odd:Projection_Forward",&argo0,&arg1,&arg2)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    {
+        if (!arg3) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    {
+        if (!arg4) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    Projection_Forward(arg0,arg1,arg2,arg3,arg4);
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    {
+        PyObject *o; 
+        o = PyFloat_FromDouble(*arg3); 
+        if ((!resultobj) || (resultobj == Py_None)) {
+            resultobj = o; 
+        }else {
+            if (!PyList_Check(resultobj)) {
+                PyObject *o2 = resultobj; 
+                resultobj = PyList_New(0); 
+                PyList_Append(resultobj,o2); 
+                Py_XDECREF(o2); 
+            }
+            PyList_Append(resultobj,o); 
+            Py_XDECREF(o); 
+        }
+    }
+    {
+        PyObject *o; 
+        o = PyFloat_FromDouble(*arg4); 
+        if ((!resultobj) || (resultobj == Py_None)) {
+            resultobj = o; 
+        }else {
+            if (!PyList_Check(resultobj)) {
+                PyObject *o2 = resultobj; 
+                resultobj = PyList_New(0); 
+                PyList_Append(resultobj,o2); 
+                Py_XDECREF(o2); 
+            }
+            PyList_Append(resultobj,o); 
+            Py_XDECREF(o); 
+        }
+    }
+    return resultobj;
+}
+
+
+static PyObject *_wrap_Projection_Inverse(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    double arg1 ;
+    double arg2 ;
+    double *arg3 ;
+    double *arg4 ;
+    double temp ;
+    double temp0 ;
+    PyObject * argo0 =0 ;
+    
+    {
+        arg3 = &temp;
+    }
+    {
+        arg4 = &temp0;
+    }
+    if(!PyArg_ParseTuple(args,"Odd:Projection_Inverse",&argo0,&arg1,&arg2)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    {
+        if (!arg3) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    {
+        if (!arg4) {
+            SWIG_exception(SWIG_ValueError,"Received a NULL Pointer");
+        }
+    }
+    Projection_Inverse(arg0,arg1,arg2,arg3,arg4);
+    Py_INCREF(Py_None);
+    resultobj = Py_None;
+    {
+        PyObject *o; 
+        o = PyFloat_FromDouble(*arg3); 
+        if ((!resultobj) || (resultobj == Py_None)) {
+            resultobj = o; 
+        }else {
+            if (!PyList_Check(resultobj)) {
+                PyObject *o2 = resultobj; 
+                resultobj = PyList_New(0); 
+                PyList_Append(resultobj,o2); 
+                Py_XDECREF(o2); 
+            }
+            PyList_Append(resultobj,o); 
+            Py_XDECREF(o); 
+        }
+    }
+    {
+        PyObject *o; 
+        o = PyFloat_FromDouble(*arg4); 
+        if ((!resultobj) || (resultobj == Py_None)) {
+            resultobj = o; 
+        }else {
+            if (!PyList_Check(resultobj)) {
+                PyObject *o2 = resultobj; 
+                resultobj = PyList_New(0); 
+                PyList_Append(resultobj,o2); 
+                Py_XDECREF(o2); 
+            }
+            PyList_Append(resultobj,o); 
+            Py_XDECREF(o); 
+        }
+    }
+    return resultobj;
+}
+
+
+PyObject * Projection_cobject(Projection *self) {
+    {
+        return PyCObject_FromVoidPtr(self->proj, NULL);
+    }
+}
+
+
+static PyObject *_wrap_Projection_cobject(PyObject *self, PyObject *args) {
+    PyObject *resultobj;
+    Projection *arg0 ;
+    PyObject * argo0 =0 ;
+    PyObject *result ;
+    
+    if(!PyArg_ParseTuple(args,"O:Projection_cobject",&argo0)) return NULL;
+    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_Projection,1)) == -1) return NULL;
+    result = (PyObject *)Projection_cobject(arg0);
+    {
+        resultobj = result;
+    }
+    return resultobj;
+}
+
+
+static PyMethodDef ProjectioncMethods[] = {
+	 { "int_array", _wrap_int_array, METH_VARARGS },
+	 { "int_destroy", _wrap_int_destroy, METH_VARARGS },
+	 { "int_get", _wrap_int_get, METH_VARARGS },
+	 { "int_set", _wrap_int_set, METH_VARARGS },
+	 { "double_array", _wrap_double_array, METH_VARARGS },
+	 { "double_destroy", _wrap_double_destroy, METH_VARARGS },
+	 { "double_get", _wrap_double_get, METH_VARARGS },
+	 { "double_set", _wrap_double_set, METH_VARARGS },
+	 { "float_array", _wrap_float_array, METH_VARARGS },
+	 { "float_destroy", _wrap_float_destroy, METH_VARARGS },
+	 { "float_get", _wrap_float_get, METH_VARARGS },
+	 { "float_set", _wrap_float_set, METH_VARARGS },
+	 { "string_array", _wrap_string_array, METH_VARARGS },
+	 { "string_destroy", _wrap_string_destroy, METH_VARARGS },
+	 { "string_get", _wrap_string_get, METH_VARARGS },
+	 { "string_set", _wrap_string_set, METH_VARARGS },
+	 { "Projection_units_set", _wrap_Projection_units_set, METH_VARARGS },
+	 { "Projection_units_get", _wrap_Projection_units_get, METH_VARARGS },
+	 { "Projection_proj_set", _wrap_Projection_proj_set, METH_VARARGS },
+	 { "Projection_proj_get", _wrap_Projection_proj_get, METH_VARARGS },
+	 { "new_Projection", _wrap_new_Projection, METH_VARARGS },
+	 { "delete_Projection", _wrap_delete_Projection, METH_VARARGS },
+	 { "Projection_Forward", _wrap_Projection_Forward, METH_VARARGS },
+	 { "Projection_Inverse", _wrap_Projection_Inverse, METH_VARARGS },
+	 { "Projection_cobject", _wrap_Projection_cobject, METH_VARARGS },
+	 { NULL, NULL }
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */
+
+static swig_type_info _swigt__p_float[] = {{"_p_float", 0, "float *"},{"_p_float"},{0}};
+static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *"},{"_p_double"},{0}};
+static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **"},{"_p_p_char"},{0}};
+static swig_type_info _swigt__p_PJ[] = {{"_p_PJ", 0, "PJ *"},{"_p_PJ"},{0}};
+static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *"},{"_p_int"},{0}};
+static swig_type_info _swigt__p_Projection[] = {{"_p_Projection", 0, "Projection *"},{"_p_Projection"},{0}};
+
+static swig_type_info *swig_types_initial[] = {
+_swigt__p_float, 
+_swigt__p_double, 
+_swigt__p_p_char, 
+_swigt__p_PJ, 
+_swigt__p_int, 
+_swigt__p_Projection, 
+0
+};
+
+
+/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */
+
+static swig_const_info swig_const_table[] = {
+    { SWIG_PY_INT,     "DEGREES", (long) DEGREES, 0, 0, 0},
+    { SWIG_PY_INT,     "RADIANS", (long) RADIANS, 0, 0, 0},
+{0}};
+
+static PyObject *SWIG_globals;
+#ifdef __cplusplus
+extern "C" 
+#endif
+SWIGEXPORT(void) initProjectionc(void) {
+    PyObject *m, *d;
+    int i;
+    SWIG_globals = SWIG_newvarlink();
+    m = Py_InitModule("Projectionc", ProjectioncMethods);
+    d = PyModule_GetDict(m);
+    for (i = 0; swig_types_initial[i]; i++) {
+        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
+    }
+    SWIG_InstallConstants(d,swig_const_table);
+}
+

Added: trunk/bindings/python/pyprojection/SConscript
===================================================================
--- trunk/bindings/python/pyprojection/SConscript	2006-03-26 22:32:03 UTC (rev 209)
+++ trunk/bindings/python/pyprojection/SConscript	2006-03-26 22:35:37 UTC (rev 210)
@@ -0,0 +1,30 @@
+#  This file is part of Mapnik (c++ mapping toolkit)
+#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+#
+#  Mapnik is free software; you can redistribute it and/or
+#  modify it under the terms of the GNU General Public License
+#  as published by the Free Software Foundation; either version 2
+#  of the License, or any later version.
+# 
+#  This program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#  GNU General Public License for more details.
+# 
+#  You should have received a copy of the GNU General Public License
+#  along with this program; if not, write to the Free Software
+#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+# 
+# $Id$
+
+import glob
+
+Import('env')
+
+prefix = env['PYTHON_PREFIX'] + '/lib/python' + env['PYTHON_VERSION'] + '/site-packages/'
+
+headers = [env['PYTHON_PREFIX'] + '/include/python' + env['PYTHON_VERSION']] + env['CPPPATH']
+
+projection = env.SharedLibrary('Projectionc', 'Projection_wrap.c', LIBS=['proj','pthread'], SHLIBPREFIX='', CPPPATH=headers)
+
+env.Alias(target='install', source=env.Install(prefix+'/mapnik/', [projection, 'Projection.py']))



From jdoyon at berlios.de  Mon Mar 27 00:36:58 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Mon, 27 Mar 2006 00:36:58 +0200
Subject: [Mapnik-svn] r211 - trunk
Message-ID: <200603262236.k2QMawwe025346@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-27 00:36:55 +0200 (Mon, 27 Mar 2006)
New Revision: 211

Modified:
   trunk/SConstruct
Log:
Add support for building pyprojection.



Modified: trunk/SConstruct
===================================================================
--- trunk/SConstruct	2006-03-26 22:35:37 UTC (rev 210)
+++ trunk/SConstruct	2006-03-26 22:36:55 UTC (rev 211)
@@ -33,6 +33,8 @@
 opts.Add(PathOption('TIFF_LIBS', 'Search path for libtiff library files', '/usr/lib'))
 opts.Add(PathOption('PGSQL_INCLUDES', 'Search path for PostgreSQL include files', '/usr/include'))
 opts.Add(PathOption('PGSQL_LIBS', 'Search path for PostgreSQL library files', '/usr/lib'))
+opts.Add(PathOption('PROJ_INCLUDES', 'Search path for PROJ.4 include files', '/usr/local/include'))
+opts.Add(PathOption('PROJ_LIBS', 'Search path for PROJ.4 include files', '/usr/local/lib'))
 opts.Add(PathOption('PYTHON','Python executable', sys.executable))
 opts.Add(ListOption('INPUT_PLUGINS','Input drivers to include','all',['postgis','shape','raster']))
 opts.Add(ListOption('BINDINGS','Language bindings to build','all',['python']))
@@ -64,7 +66,8 @@
     ['tiff', 'tiff.h', True],
     ['z', 'zlib.h', True],
     ['jpeg', ['stdio.h', 'jpeglib.h'], True],
-    ['pq', 'libpq-fe.h', False]
+    ['pq', 'libpq-fe.h', False],
+    ['proj', 'proj_api.h', False]
 ]
 
 BOOST_LIBSHEADERS = [
@@ -141,6 +144,10 @@
     SConscript('utils/shapeindex/SConscript')
     env['LIBS'].remove('boost_program_options%s' % env['BOOST_APPEND'])
 
+if 'proj' in env['LIBS']:
+    SConscript('bindings/python/pyprojection/SConscript')
+    env['LIBS'].remove('proj')
+
 # Build the input plug-ins
 
 if 'postgis' in inputplugins and 'pq' in env['LIBS']:



From jdoyon at berlios.de  Tue Mar 28 03:01:11 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Tue, 28 Mar 2006 03:01:11 +0200
Subject: [Mapnik-svn] r212 - trunk/bindings/python
Message-ID: <200603280101.k2S11Bsm011948@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-28 03:01:00 +0200 (Tue, 28 Mar 2006)
New Revision: 212

Modified:
   trunk/bindings/python/mapnik_envelope.cpp
   trunk/bindings/python/mapnik_layer.cpp
   trunk/bindings/python/mapnik_map.cpp
Log:
Added some docstrings.



Modified: trunk/bindings/python/mapnik_envelope.cpp
===================================================================
--- trunk/bindings/python/mapnik_envelope.cpp	2006-03-26 22:36:55 UTC (rev 211)
+++ trunk/bindings/python/mapnik_envelope.cpp	2006-03-28 01:01:00 UTC (rev 212)
@@ -61,10 +61,10 @@
     class_<Envelope<double> >("Envelope","A spacial envelope (i.e. bounding box) which also defines some basic operators.",init<double,double,double,double>())
         .def(init<>())
 	.def(init<const coord<double,2>&, const coord<double,2>&>())
-        .add_property("minx",&Envelope<double>::minx)
-        .add_property("miny",&Envelope<double>::miny)
-        .add_property("maxx",&Envelope<double>::maxx)
-        .add_property("maxy",&Envelope<double>::maxy)
+        .add_property("minx",&Envelope<double>::minx, "X coordinate for the lower left corner")
+        .add_property("miny",&Envelope<double>::miny, "Y coordinate for the lower left corner")
+        .add_property("maxx",&Envelope<double>::maxx, "X coordinate for the upper right corner")
+        .add_property("maxy",&Envelope<double>::maxy, "Y coordinate for the upper right corner")
         .def("center",&Envelope<double>::center)
 	.def("center",&Envelope<double>::re_center)
 	.def("width",width_p1)

Modified: trunk/bindings/python/mapnik_layer.cpp
===================================================================
--- trunk/bindings/python/mapnik_layer.cpp	2006-03-26 22:36:55 UTC (rev 211)
+++ trunk/bindings/python/mapnik_layer.cpp	2006-03-28 01:01:00 UTC (rev 212)
@@ -106,7 +106,7 @@
     
     class_<Layer>("Layer","A map layer.",no_init)
         .def("name",&Layer::name,return_value_policy<copy_const_reference>(), "Return the name of the layer.")
-        .def("params",&Layer::params,return_value_policy<reference_existing_object>())
+        .def("params",&Layer::params,return_value_policy<reference_existing_object>(), "The configuration parameters of the layer.  These vary depending on the type of data source.")
         .def("envelope",&Layer::envelope, "Return the geographic envelope/bounding box of the data in the layer.")
 	.add_property("minzoom",&Layer::getMinZoom,&Layer::setMinZoom)
 	.add_property("maxzoom",&Layer::getMaxZoom,&Layer::setMaxZoom)

Modified: trunk/bindings/python/mapnik_map.cpp
===================================================================
--- trunk/bindings/python/mapnik_map.cpp	2006-03-26 22:36:55 UTC (rev 211)
+++ trunk/bindings/python/mapnik_map.cpp	2006-03-28 01:01:00 UTC (rev 212)
@@ -79,22 +79,22 @@
     class_<std::vector<Layer> >("Layers")
     	.def(vector_indexing_suite<std::vector<Layer> >())
     	;
-    class_<Map>("Map",init<int,int,boost::python::optional<int> >())
-        .add_property("width",&Map::getWidth,&Map::setWidth)
-        .add_property("height",&Map::getHeight,&Map::setHeight)
+    class_<Map>("Map","The map object.",init<int,int,boost::python::optional<int> >())
+        .add_property("width",&Map::getWidth,"The width of the map image.")
+        .add_property("height",&Map::getHeight,"The height of the map image.")
 	.add_property("srid",&Map::srid)
 	.add_property("background",make_function
 		      (&Map::getBackground,return_value_policy<copy_const_reference>()),
-		      &Map::setBackground)
+		      &Map::setBackground, "The background color of the map.")
         .def("scale", &Map::scale)
-        .def("zoom_to_box",&Map::zoomToBox)
+        .def("zoom_to_box",&Map::zoomToBox, "Set the geographical extent of the map.")
         .def("pan",&Map::pan)
         .def("zoom",&Map::zoom)
         .def("pan_and_zoom",&Map::pan_and_zoom)
 	.def("append_style",&Map::insert_style)
 	.def("remove_style",&Map::remove_style)
 	.add_property("layers",make_function
-		      (&Map::layers,return_value_policy<reference_existing_object>()))
+		      (&Map::layers,return_value_policy<reference_existing_object>()), "Get the list of layers in this map.")
         .def_pickle(map_pickle_suite())
         ;
 }



From jdoyon at berlios.de  Tue Mar 28 03:07:15 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Tue, 28 Mar 2006 03:07:15 +0200
Subject: [Mapnik-svn] r213 - in trunk: . bindings/python bindings/python/mapnik
Message-ID: <200603280107.k2S17F98013523@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-28 03:07:01 +0200 (Tue, 28 Mar 2006)
New Revision: 213

Modified:
   trunk/
   trunk/bindings/python/SConscript
   trunk/bindings/python/mapnik/__init__.py
Log:
- Add an ignore.
- load Projection class and DEGREES constant into mapnik module namespace so that one can "from mapnik import Projection, DEGREES"
- Clean up the build/install of the python module.




Property changes on: trunk
___________________________________________________________________
Name: svn:ignore
   - .sconf_temp
config.log

   + 
.sconf_temp
config.log
.project


Modified: trunk/bindings/python/SConscript
===================================================================
--- trunk/bindings/python/SConscript	2006-03-28 01:01:00 UTC (rev 212)
+++ trunk/bindings/python/SConscript	2006-03-28 01:07:01 UTC (rev 213)
@@ -29,17 +29,16 @@
 _mapnik = env.SharedLibrary('_mapnik', glob.glob('*.cpp'), LIBS=libraries, SHLIBPREFIX='', CPPPATH=headers)
 
 paths = """
-pluginsrootpath = '%s'
-inputpluginspath = pluginsrootpath + '/input'
+mapniklibpath = '%s'
+inputpluginspath = mapniklibpath + '/input'
+fontscollectionpath = mapniklibpath + '/fonts'
 """
 
 file('mapnik/paths.py','w').write(paths % (env['PREFIX'] + '/lib/mapnik',))
 
-__init__ = env.Install(prefix+'/mapnik','mapnik/__init__.py')
-pathspy = env.Install(prefix+'/mapnik','mapnik/paths.py')
-_source=env.Install(prefix+'/mapnik',_mapnik)
-_source.append(__init__)
-_source.append(pathspy)
-
-env.Alias(target="install",source=_source)
-
+pymapnik = glob.glob('mapnik/*.py')
+env.Alias(target='install', source=env.Install(prefix+'/mapnik', pymapnik))
+pymapnik2 = glob.glob('mapnik/ogcserver/*.py')
+env.Alias(target='install', source=env.Install(prefix+'/mapnik/ogcserver', pymapnik2))
+pymapniklib = env.Install(prefix+'/mapnik',_mapnik)
+env.Alias(target="install",source=pymapniklib)

Modified: trunk/bindings/python/mapnik/__init__.py
===================================================================
--- trunk/bindings/python/mapnik/__init__.py	2006-03-28 01:01:00 UTC (rev 212)
+++ trunk/bindings/python/mapnik/__init__.py	2006-03-28 01:07:01 UTC (rev 213)
@@ -28,6 +28,11 @@
 from _mapnik import *
 from paths import inputpluginspath, fontscollectionpath
 
+try:
+    from mapnik.Projection import Projection, DEGREES
+except:
+    pass
+
 # The base Boost.Python class
 BoostPythonMetaclass = Coord.__class__
 



From jdoyon at berlios.de  Tue Mar 28 03:16:32 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Tue, 28 Mar 2006 03:16:32 +0200
Subject: [Mapnik-svn] r214 - trunk/bindings/python/pyprojection
Message-ID: <200603280116.k2S1GWvB016044@sheep.berlios.de>

Author: jdoyon
Date: 2006-03-28 03:16:11 +0200 (Tue, 28 Mar 2006)
New Revision: 214

Modified:
   trunk/bindings/python/pyprojection/
Log:
- Ignore the files generated during build.


Property changes on: trunk/bindings/python/pyprojection
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + .sconsign
Projectionc.so
Projection_wrap.os




From pavlenko at berlios.de  Tue Mar 28 10:30:22 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Tue, 28 Mar 2006 10:30:22 +0200
Subject: [Mapnik-svn] r215 - in trunk: include src utils/shapeindex
Message-ID: <200603280830.k2S8UMeN027754@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-28 10:29:36 +0200 (Tue, 28 Mar 2006)
New Revision: 215

Modified:
   trunk/include/agg_renderer.hpp
   trunk/include/layer.hpp
   trunk/src/agg_renderer.cpp
   trunk/src/layer.cpp
   trunk/utils/shapeindex/shapeindex.cpp
Log:
added set_datasource method (TODO!!!)
fixed pointz in shapeindex



Modified: trunk/include/agg_renderer.hpp
===================================================================
--- trunk/include/agg_renderer.hpp	2006-03-28 01:16:11 UTC (rev 214)
+++ trunk/include/agg_renderer.hpp	2006-03-28 08:29:36 UTC (rev 215)
@@ -29,27 +29,27 @@
 namespace mapnik
 {
     template <typename T>
-	class MAPNIK_DECL agg_renderer : public feature_style_processor<agg_renderer<T> >,
-			  private boost::noncopyable
+    class MAPNIK_DECL agg_renderer : public feature_style_processor<agg_renderer<T> >,
+				     private boost::noncopyable
     {
-	public:
-		agg_renderer(Map const& m, T & pixmap);
-		void start_map_processing(Map const& map);
-		void end_map_processing(Map const& map);
-		void start_layer_processing(Layer const& lay);
-		void end_layer_processing(Layer const& lay);
-		void process(point_symbolizer const& sym,Feature const& feature);
-		void process(line_symbolizer const& sym,Feature const& feature);
-		void process(line_pattern_symbolizer const& sym,Feature const& feature);
-		void process(polygon_symbolizer const& sym,Feature const& feature);
-		void process(polygon_pattern_symbolizer const& sym,Feature const& feature);
-		void process(raster_symbolizer const& sym,Feature const& feature);
-		void process(text_symbolizer const& sym,Feature const& feature);
+    public:
+	agg_renderer(Map const& m, T & pixmap);
+	void start_map_processing(Map const& map);
+	void end_map_processing(Map const& map);
+	void start_layer_processing(Layer const& lay);
+	void end_layer_processing(Layer const& lay);
+	void process(point_symbolizer const& sym,Feature const& feature);
+	void process(line_symbolizer const& sym,Feature const& feature);
+	void process(line_pattern_symbolizer const& sym,Feature const& feature);
+	void process(polygon_symbolizer const& sym,Feature const& feature);
+	void process(polygon_pattern_symbolizer const& sym,Feature const& feature);
+	void process(raster_symbolizer const& sym,Feature const& feature);
+	void process(text_symbolizer const& sym,Feature const& feature);
     private:
-		T & pixmap_;
-		CoordTransform t_;
-		face_manager<freetype_engine> font_manager_;
-		label_collision_detector2 detector_;
+	T & pixmap_;
+	CoordTransform t_;
+	face_manager<freetype_engine> font_manager_;
+	label_collision_detector2 detector_;
     };
 }
 

Modified: trunk/include/layer.hpp
===================================================================
--- trunk/include/layer.hpp	2006-03-28 01:16:11 UTC (rev 214)
+++ trunk/include/layer.hpp	2006-03-28 08:29:36 UTC (rev 215)
@@ -81,6 +81,7 @@
 	void add_to_selection(boost::shared_ptr<Feature>& feature) const;
 	std::vector<boost::shared_ptr<Feature> >& selection() const;
 	void clear_selection() const;
+	void set_datasource(datasource_p const& ds);
 	datasource_p const& datasource() const;
 	Envelope<double> envelope() const;
 	virtual ~Layer();

Modified: trunk/src/agg_renderer.cpp
===================================================================
--- trunk/src/agg_renderer.cpp	2006-03-28 01:16:11 UTC (rev 214)
+++ trunk/src/agg_renderer.cpp	2006-03-28 08:29:36 UTC (rev 215)
@@ -106,6 +106,7 @@
     void agg_renderer<T>::start_layer_processing(Layer const& lay)
     {
 	std::clog << "start layer processing : " << lay.name()  << std::endl;
+	std::clog << "datasource = " << lay.datasource().get() << std::endl;
     }
     
     template <typename T>

Modified: trunk/src/layer.cpp
===================================================================
--- trunk/src/layer.cpp	2006-03-28 01:16:11 UTC (rev 214)
+++ trunk/src/layer.cpp	2006-03-28 08:29:36 UTC (rev 215)
@@ -30,7 +30,16 @@
 namespace mapnik
 {
     using namespace std;
-    Layer::Layer() {}
+    Layer::Layer()
+	: params_(),
+	  name_("uknown"),
+	  minZoom_(0),
+	  maxZoom_(std::numeric_limits<double>::max()),
+	  active_(true),
+	  selectable_(false),
+	  selection_style_("default_selection")
+    {}
+
     Layer::Layer(const parameters& params)
         :params_(params),
 	 name_(params_["name"]),
@@ -48,7 +57,7 @@
 	 maxZoom_(rhs.maxZoom_),
 	 active_(rhs.active_),
 	 selectable_(rhs.selectable_),
-	 //ds_(rhs.ds_),
+	 ds_(rhs.ds_),
 	 styles_(rhs.styles_),
 	 selection_style_(rhs.selection_style_) {}
     
@@ -154,12 +163,17 @@
 	    }
 	    catch (...)
 	    {
-		std::clog << "exception caught : can not create datasorce" << std::endl;  
+		std::clog << "exception caught : can not create datasource" << std::endl;  
 	    }
 	}
 	return ds_;
     }
-
+    // TODO: !!!!
+    void Layer::set_datasource(datasource_p const& ds)
+    {
+	ds_ = ds;
+    }
+    
     Envelope<double> Layer::envelope() const
     {
 	datasource_p const& ds = datasource();

Modified: trunk/utils/shapeindex/shapeindex.cpp
===================================================================
--- trunk/utils/shapeindex/shapeindex.cpp	2006-03-28 01:16:11 UTC (rev 214)
+++ trunk/utils/shapeindex/shapeindex.cpp	2006-03-28 08:29:36 UTC (rev 215)
@@ -150,12 +150,22 @@
 		item_ext=Envelope<double>(x,y,x,y);
 	
 	    }
+	    if (shape_type==shape_io::shape_pointm)
+	    {
+		double x=shp.read_double();
+		double y=shp.read_double();
+		shp.read_double();
+		shp.skip(2*content_length-3*8-4);
+		item_ext=Envelope<double>(x,y,x,y);
+	
+	    }
 	    else if (shape_type==shape_io::shape_pointz)
 	    {
 		double x=shp.read_double();
 		double y=shp.read_double();
 		shp.read_double();
-		shp.skip(2*content_length-2*8-4);
+		shp.read_double();
+		shp.skip(2*content_length-4*8-4);
 		item_ext=Envelope<double>(x,y,x,y);
 	    }
 	



From pavlenko at berlios.de  Tue Mar 28 12:09:25 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Tue, 28 Mar 2006 12:09:25 +0200
Subject: [Mapnik-svn] r216 - in trunk: plugins/input/shape utils/shapeindex
Message-ID: <200603281009.k2SA9PJv011652@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-28 12:09:24 +0200 (Tue, 28 Mar 2006)
New Revision: 216

Modified:
   trunk/plugins/input/shape/shape_index_featureset.cpp
   trunk/plugins/input/shape/shape_io.cpp
   trunk/utils/shapeindex/shapeindex.cpp
Log:
fixed pointz/pointm reading

Modified: trunk/plugins/input/shape/shape_index_featureset.cpp
===================================================================
--- trunk/plugins/input/shape/shape_index_featureset.cpp	2006-03-28 08:29:36 UTC (rev 215)
+++ trunk/plugins/input/shape/shape_index_featureset.cpp	2006-03-28 10:09:24 UTC (rev 216)
@@ -93,7 +93,7 @@
 	    double x=shape_.shp().read_double();
 	    double y=shape_.shp().read_double();
 	    shape_.shp().read_double();// z
-	    shape_.shp().read_double();// m 
+	    shape_.shp().read_double();// m
 	    geometry_ptr point(new point_impl(-1));
 	    point->move_to(x,y);
 	    feature->set_geometry(point);
@@ -157,7 +157,6 @@
         }
 	if (attr_ids_.size())
 	{
-	    //feature->reserve_props(attr_ids_.size());
 	    shape_.dbf().move_to(shape_.id_);
 	    std::vector<int>::const_iterator pos=attr_ids_.begin();
 	    while (pos!=attr_ids_.end())

Modified: trunk/plugins/input/shape/shape_io.cpp
===================================================================
--- trunk/plugins/input/shape/shape_io.cpp	2006-03-28 08:29:36 UTC (rev 215)
+++ trunk/plugins/input/shape/shape_io.cpp	2006-03-28 10:09:24 UTC (rev 216)
@@ -52,7 +52,7 @@
     reclength_ = shp_.read_xdr_integer();
     type_ = shp_.read_ndr_integer();
 
-    if (type_ != shape_point)
+    if (type_ != shape_point && type_ != shape_pointm && type_ != shape_pointz)
     {
         shp_.read_envelope(cur_extent_);
     }

Modified: trunk/utils/shapeindex/shapeindex.cpp
===================================================================
--- trunk/utils/shapeindex/shapeindex.cpp	2006-03-28 08:29:36 UTC (rev 215)
+++ trunk/utils/shapeindex/shapeindex.cpp	2006-03-28 10:09:24 UTC (rev 216)
@@ -139,14 +139,15 @@
 	    int offset=shp.pos();
 	    int record_number=shp.read_xdr_integer();
 	    int content_length=shp.read_xdr_integer();
-    
+	    
 	    shp.skip(4);
+	    std::cout << "offset= "<< offset << std::endl;
+	    
 	    Envelope<double> item_ext;
 	    if (shape_type==shape_io::shape_point)
 	    {
 		double x=shp.read_double();
 		double y=shp.read_double();
-		shp.skip(2*content_length-2*8-4);
 		item_ext=Envelope<double>(x,y,x,y);
 	
 	    }
@@ -155,7 +156,6 @@
 		double x=shp.read_double();
 		double y=shp.read_double();
 		shp.read_double();
-		shp.skip(2*content_length-3*8-4);
 		item_ext=Envelope<double>(x,y,x,y);
 	
 	    }
@@ -165,7 +165,6 @@
 		double y=shp.read_double();
 		shp.read_double();
 		shp.read_double();
-		shp.skip(2*content_length-4*8-4);
 		item_ext=Envelope<double>(x,y,x,y);
 	    }
 	



From pavlenko at berlios.de  Tue Mar 28 17:39:41 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Tue, 28 Mar 2006 17:39:41 +0200
Subject: [Mapnik-svn] r217 - in trunk: include src
Message-ID: <200603281539.k2SFdf1M025687@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-28 17:39:38 +0200 (Tue, 28 Mar 2006)
New Revision: 217

Modified:
   trunk/include/map.hpp
   trunk/src/map.cpp
Log:
added non-const getLayer

Modified: trunk/include/map.hpp
===================================================================
--- trunk/include/map.hpp	2006-03-28 10:09:24 UTC (rev 216)
+++ trunk/include/map.hpp	2006-03-28 15:39:38 UTC (rev 217)
@@ -62,6 +62,7 @@
 	size_t layerCount() const;
 	void addLayer(const Layer& l);
 	const Layer& getLayer(size_t index) const;
+	Layer& getLayer(size_t index);
 	void removeLayer(size_t index);
 	std::vector<Layer> const& layers() const;
 	unsigned getWidth() const;

Modified: trunk/src/map.cpp
===================================================================
--- trunk/src/map.cpp	2006-03-28 10:09:24 UTC (rev 216)
+++ trunk/src/map.cpp	2006-03-28 15:39:38 UTC (rev 217)
@@ -93,6 +93,13 @@
     {
         return layers_[index];
     }
+
+    Layer& Map::getLayer(size_t index)
+    {
+        return layers_[index];
+    }
+
+
     std::vector<Layer> const& Map::layers() const
     {
 	return layers_;



From pavlenko at berlios.de  Thu Mar 30 00:26:56 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Thu, 30 Mar 2006 00:26:56 +0200
Subject: [Mapnik-svn] r218 - trunk/bindings/python
Message-ID: <200603292226.k2TMQuZM021737@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-30 00:26:55 +0200 (Thu, 30 Mar 2006)
New Revision: 218

Modified:
   trunk/bindings/python/mapnik_image.cpp
Log:
fix rawdata() method to return PyString_FromStringAndSize

Modified: trunk/bindings/python/mapnik_image.cpp
===================================================================
--- trunk/bindings/python/mapnik_image.cpp	2006-03-28 15:39:38 UTC (rev 217)
+++ trunk/bindings/python/mapnik_image.cpp	2006-03-29 22:26:55 UTC (rev 218)
@@ -18,21 +18,30 @@
 
 //$Id$
 
-#include <boost/python.hpp>
-#include <mapnik.hpp>
+# include <boost/python.hpp>
+# include <boost/python/module.hpp>
+# include <boost/python/def.hpp>
+# include <mapnik.hpp>
 
 using mapnik::Image32;
 
 
-char const* rawdata(const Image32& image)
+using namespace boost::python;
+
+
+PyObject* rawdata( Image32 const& im)
 {
-    return (char const* )image.raw_data();
+    int size = im.width() * im.height() * 4;
+    return ::PyString_FromStringAndSize((const char*)im.raw_data(),size);
 }
 
 void export_image()
 {
     using namespace boost::python;
     class_<Image32>("Image","This class represents a 32 bit image.",init<int,int>())
-    ;
+	.def("width",&Image32::width)
+	.def("height",&Image32::height)
+	;
+    
     def("rawdata",&rawdata);
 }



From pavlenko at berlios.de  Fri Mar 31 10:54:21 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Fri, 31 Mar 2006 10:54:21 +0200
Subject: [Mapnik-svn] r219 - trunk/plugins/input/postgis
Message-ID: <200603310854.k2V8sLak021025@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-31 10:54:20 +0200 (Fri, 31 Mar 2006)
New Revision: 219

Modified:
   trunk/plugins/input/postgis/postgis.cpp
Log:
changed from gid to ogc_fid (is it standard?)

Modified: trunk/plugins/input/postgis/postgis.cpp
===================================================================
--- trunk/plugins/input/postgis/postgis.cpp	2006-03-29 22:26:55 UTC (rev 218)
+++ trunk/plugins/input/postgis/postgis.cpp	2006-03-31 08:54:20 UTC (rev 219)
@@ -189,7 +189,7 @@
 	    PoolGuard<shared_ptr<Connection>,shared_ptr<Pool<Connection,ConnectionCreator> > > guard(conn,pool);
 	    std::ostringstream s;
 	    // can we rely on 'gid' name???
-	    s << "select gid,asbinary("<<geometryColumn_<<") as geom";
+	    s << "select ogc_fid,asbinary("<<geometryColumn_<<") as geom";
 	    std::set<std::string> const& props=q.property_names();
 	    std::set<std::string>::const_iterator pos=props.begin();
 	    while (pos!=props.end())



From pavlenko at berlios.de  Fri Mar 31 10:55:35 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Fri, 31 Mar 2006 10:55:35 +0200
Subject: [Mapnik-svn] r220 - in trunk: bindings/python src
Message-ID: <200603310855.k2V8tZl5021149@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-31 10:55:35 +0200 (Fri, 31 Mar 2006)
New Revision: 220

Modified:
   trunk/bindings/python/mapnik_image.cpp
   trunk/src/wkb.cpp
Log:
small optimization
 


Modified: trunk/bindings/python/mapnik_image.cpp
===================================================================
--- trunk/bindings/python/mapnik_image.cpp	2006-03-31 08:54:20 UTC (rev 219)
+++ trunk/bindings/python/mapnik_image.cpp	2006-03-31 08:55:35 UTC (rev 220)
@@ -41,7 +41,6 @@
     class_<Image32>("Image","This class represents a 32 bit image.",init<int,int>())
 	.def("width",&Image32::width)
 	.def("height",&Image32::height)
-	;
-    
+	;    
     def("rawdata",&rawdata);
 }

Modified: trunk/src/wkb.cpp
===================================================================
--- trunk/src/wkb.cpp	2006-03-31 08:54:20 UTC (rev 219)
+++ trunk/src/wkb.cpp	2006-03-31 08:55:35 UTC (rev 220)
@@ -197,6 +197,7 @@
 	    int num_points=read_integer();
 	    CoordinateArray ar(num_points);
 	    read_coords(ar);
+	    line->set_capacity(num_points);
 	    line->move_to(ar[0].x,ar[0].y);
 	    for (int i=1;i<num_points;++i)
 	    {



From pavlenko at berlios.de  Fri Mar 31 11:00:10 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Fri, 31 Mar 2006 11:00:10 +0200
Subject: [Mapnik-svn] r221 - tags
Message-ID: <200603310900.k2V90AjH021723@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-31 11:00:10 +0200 (Fri, 31 Mar 2006)
New Revision: 221

Added:
   tags/pre_lgpl/
Log:
tagging pre LGPL release



Copied: tags/pre_lgpl (from rev 220, trunk)



From pavlenko at berlios.de  Fri Mar 31 12:32:26 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Fri, 31 Mar 2006 12:32:26 +0200
Subject: [Mapnik-svn] r222 - in trunk: . bindings/python include plugins/input/postgis plugins/input/raster plugins/input/shape src utils/shapeindex
Message-ID: <200603311032.k2VAWQ8e003094@sheep.berlios.de>

Author: pavlenko
Date: 2006-03-31 12:32:02 +0200 (Fri, 31 Mar 2006)
New Revision: 222

Modified:
   trunk/COPYING
   trunk/README
   trunk/SConstruct
   trunk/bindings/python/SConscript
   trunk/bindings/python/mapnik_color.cpp
   trunk/bindings/python/mapnik_datasource_cache.cpp
   trunk/bindings/python/mapnik_envelope.cpp
   trunk/bindings/python/mapnik_filter.cpp
   trunk/bindings/python/mapnik_font_engine.cpp
   trunk/bindings/python/mapnik_image.cpp
   trunk/bindings/python/mapnik_layer.cpp
   trunk/bindings/python/mapnik_line_pattern_symbolizer.cpp
   trunk/bindings/python/mapnik_line_symbolizer.cpp
   trunk/bindings/python/mapnik_map.cpp
   trunk/bindings/python/mapnik_parameters.cpp
   trunk/bindings/python/mapnik_point_symbolizer.cpp
   trunk/bindings/python/mapnik_polygon_pattern_symbolizer.cpp
   trunk/bindings/python/mapnik_polygon_symbolizer.cpp
   trunk/bindings/python/mapnik_python.cpp
   trunk/bindings/python/mapnik_raster_symbolizer.cpp
   trunk/bindings/python/mapnik_rule.cpp
   trunk/bindings/python/mapnik_stroke.cpp
   trunk/bindings/python/mapnik_style.cpp
   trunk/bindings/python/mapnik_text_symbolizer.cpp
   trunk/include/agg_renderer.hpp
   trunk/include/attribute.hpp
   trunk/include/attribute_collector.hpp
   trunk/include/attribute_descriptor.hpp
   trunk/include/color.hpp
   trunk/include/color_factory.hpp
   trunk/include/comparison.hpp
   trunk/include/config.hpp
   trunk/include/coord.hpp
   trunk/include/coord_array.hpp
   trunk/include/css_color_parser.hpp
   trunk/include/ctrans.hpp
   trunk/include/datasource.hpp
   trunk/include/datasource_cache.hpp
   trunk/include/envelope.hpp
   trunk/include/expression.hpp
   trunk/include/factory.hpp
   trunk/include/feature.hpp
   trunk/include/feature_factory.hpp
   trunk/include/feature_layer_desc.hpp
   trunk/include/feature_style_processor.hpp
   trunk/include/feature_type_style.hpp
   trunk/include/fill.hpp
   trunk/include/filter.hpp
   trunk/include/filter_expression.hpp
   trunk/include/filter_factory.hpp
   trunk/include/filter_parser.hpp
   trunk/include/filter_parser_ast.hpp
   trunk/include/filter_visitor.hpp
   trunk/include/font_engine_freetype.hpp
   trunk/include/gamma.hpp
   trunk/include/geom_util.hpp
   trunk/include/geometry.hpp
   trunk/include/global.hpp
   trunk/include/graphics.hpp
   trunk/include/image_data.hpp
   trunk/include/image_reader.hpp
   trunk/include/image_util.hpp
   trunk/include/label_collision_detector.hpp
   trunk/include/label_placement.hpp
   trunk/include/layer.hpp
   trunk/include/line_pattern_symbolizer.hpp
   trunk/include/line_symbolizer.hpp
   trunk/include/local_datasource.hpp
   trunk/include/logical.hpp
   trunk/include/map.hpp
   trunk/include/mapnik.hpp
   trunk/include/math_expr.hpp
   trunk/include/memory.hpp
   trunk/include/params.hpp
   trunk/include/plugin.hpp
   trunk/include/point_symbolizer.hpp
   trunk/include/polygon_pattern_symbolizer.hpp
   trunk/include/polygon_symbolizer.hpp
   trunk/include/pool.hpp
   trunk/include/quad_tree.hpp
   trunk/include/query.hpp
   trunk/include/raster.hpp
   trunk/include/raster_symbolizer.hpp
   trunk/include/rule.hpp
   trunk/include/spatial.hpp
   trunk/include/stroke.hpp
   trunk/include/style.hpp
   trunk/include/style_factory.hpp
   trunk/include/symbolizer.hpp
   trunk/include/value.hpp
   trunk/include/vertex.hpp
   trunk/include/vertex_transform.hpp
   trunk/include/vertex_vector.hpp
   trunk/include/wkb.hpp
   trunk/plugins/input/postgis/SConscript
   trunk/plugins/input/postgis/connection.hpp
   trunk/plugins/input/postgis/connection_manager.hpp
   trunk/plugins/input/postgis/postgis.cpp
   trunk/plugins/input/postgis/postgis.hpp
   trunk/plugins/input/postgis/postgisfs.cpp
   trunk/plugins/input/postgis/property_index.hpp
   trunk/plugins/input/postgis/resultset.hpp
   trunk/plugins/input/raster/SConscript
   trunk/plugins/input/raster/raster_datasource.cpp
   trunk/plugins/input/raster/raster_datasource.hpp
   trunk/plugins/input/raster/raster_featureset.cpp
   trunk/plugins/input/raster/raster_featureset.hpp
   trunk/plugins/input/raster/raster_info.cpp
   trunk/plugins/input/raster/raster_info.hpp
   trunk/plugins/input/shape/SConscript
   trunk/plugins/input/shape/dbf_test.cpp
   trunk/plugins/input/shape/dbffile.cpp
   trunk/plugins/input/shape/dbffile.hpp
   trunk/plugins/input/shape/shape.cpp
   trunk/plugins/input/shape/shape.hpp
   trunk/plugins/input/shape/shape_featureset.cpp
   trunk/plugins/input/shape/shape_featureset.hpp
   trunk/plugins/input/shape/shape_index_featureset.cpp
   trunk/plugins/input/shape/shape_index_featureset.hpp
   trunk/plugins/input/shape/shape_io.cpp
   trunk/plugins/input/shape/shape_io.hpp
   trunk/plugins/input/shape/shapefile.cpp
   trunk/plugins/input/shape/shapefile.hpp
   trunk/plugins/input/shape/shp_index.cpp
   trunk/plugins/input/shape/shp_index.hpp
   trunk/src/SConscript
   trunk/src/agg_renderer.cpp
   trunk/src/datasource_cache.cpp
   trunk/src/envelope.cpp
   trunk/src/font_engine_freetype.cpp
   trunk/src/graphics.cpp
   trunk/src/image_reader.cpp
   trunk/src/image_util.cpp
   trunk/src/layer.cpp
   trunk/src/line_pattern_symbolizer.cpp
   trunk/src/map.cpp
   trunk/src/mapnik.cpp
   trunk/src/memory.cpp
   trunk/src/params.cpp
   trunk/src/plugin.cpp
   trunk/src/png_reader.cpp
   trunk/src/point_symbolizer.cpp
   trunk/src/polygon_pattern_symbolizer.cpp
   trunk/src/text_symbolizer.cpp
   trunk/src/tiff_reader.cpp
   trunk/src/wkb.cpp
   trunk/utils/shapeindex/SConscript
   trunk/utils/shapeindex/quadtree.hpp
   trunk/utils/shapeindex/shapeindex.cpp
Log:
changing licence from GPL to LGPL

Modified: trunk/COPYING
===================================================================
--- trunk/COPYING	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/COPYING	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,221 +1,397 @@
-		    GNU GENERAL PUBLIC LICENSE
-		       Version 2, June 1991
+		  GNU LESSER GENERAL PUBLIC LICENSE
+		       Version 2.1, February 1999
 
- Copyright (C) 1989, 1991 Free Software Foundation, Inc.
+ Copyright (C) 1991, 1999 Free Software Foundation, Inc.
      59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  Everyone is permitted to copy and distribute verbatim copies
  of this license document, but changing it is not allowed.
 
+[This is the first released version of the Lesser GPL.  It also counts
+ as the successor of the GNU Library Public License, version 2, hence
+ the version number 2.1.]
+
 			    Preamble
 
   The licenses for most software are designed to take away your
 freedom to share and change it.  By contrast, the GNU General Public
-License is intended to guarantee your freedom to share and change free
-software--to make sure the software is free for all its users.  This
-General Public License applies to most of the Free Software
-Foundation's software and to any other program whose authors commit to
-using it.  (Some other Free Software Foundation software is covered by
-the GNU Library General Public License instead.)  You can apply it to
-your programs, too.
+Licenses are intended to guarantee your freedom to share and change
+free software--to make sure the software is free for all its users.
 
-  When we speak of free software, we are referring to freedom, not
-price.  Our General Public Licenses are designed to make sure that you
-have the freedom to distribute copies of free software (and charge for
-this service if you wish), that you receive source code or can get it
-if you want it, that you can change the software or use pieces of it
-in new free programs; and that you know you can do these things.
+  This license, the Lesser General Public License, applies to some
+specially designated software packages--typically libraries--of the
+Free Software Foundation and other authors who decide to use it.  You
+can use it too, but we suggest you first think carefully about whether
+this license or the ordinary General Public License is the better
+strategy to use in any particular case, based on the explanations below.
 
+  When we speak of free software, we are referring to freedom of use,
+not price.  Our General Public Licenses are designed to make sure that
+you have the freedom to distribute copies of free software (and charge
+for this service if you wish); that you receive source code or can get
+it if you want it; that you can change the software and use pieces of
+it in new free programs; and that you are informed that you can do
+these things.
+
   To protect your rights, we need to make restrictions that forbid
-anyone to deny you these rights or to ask you to surrender the rights.
-These restrictions translate to certain responsibilities for you if you
-distribute copies of the software, or if you modify it.
+distributors to deny you these rights or to ask you to surrender these
+rights.  These restrictions translate to certain responsibilities for
+you if you distribute copies of the library or if you modify it.
 
-  For example, if you distribute copies of such a program, whether
-gratis or for a fee, you must give the recipients all the rights that
-you have.  You must make sure that they, too, receive or can get the
-source code.  And you must show them these terms so they know their
-rights.
+  For example, if you distribute copies of the library, whether gratis
+or for a fee, you must give the recipients all the rights that we gave
+you.  You must make sure that they, too, receive or can get the source
+code.  If you link other code with the library, you must provide
+complete object files to the recipients, so that they can relink them
+with the library after making changes to the library and recompiling
+it.  And you must show them these terms so they know their rights.
 
-  We protect your rights with two steps: (1) copyright the software, and
-(2) offer you this license which gives you legal permission to copy,
-distribute and/or modify the software.
+  We protect your rights with a two-step method: (1) we copyright the
+library, and (2) we offer you this license, which gives you legal
+permission to copy, distribute and/or modify the library.
 
-  Also, for each author's protection and ours, we want to make certain
-that everyone understands that there is no warranty for this free
-software.  If the software is modified by someone else and passed on, we
-want its recipients to know that what they have is not the original, so
-that any problems introduced by others will not reflect on the original
-authors' reputations.
+  To protect each distributor, we want to make it very clear that
+there is no warranty for the free library.  Also, if the library is
+modified by someone else and passed on, the recipients should know
+that what they have is not the original version, so that the original
+author's reputation will not be affected by problems that might be
+introduced by others.
+
+  Finally, software patents pose a constant threat to the existence of
+any free program.  We wish to make sure that a company cannot
+effectively restrict the users of a free program by obtaining a
+restrictive license from a patent holder.  Therefore, we insist that
+any patent license obtained for a version of the library must be
+consistent with the full freedom of use specified in this license.
 
-  Finally, any free program is threatened constantly by software
-patents.  We wish to avoid the danger that redistributors of a free
-program will individually obtain patent licenses, in effect making the
-program proprietary.  To prevent this, we have made it clear that any
-patent must be licensed for everyone's free use or not licensed at all.
+  Most GNU software, including some libraries, is covered by the
+ordinary GNU General Public License.  This license, the GNU Lesser
+General Public License, applies to certain designated libraries, and
+is quite different from the ordinary General Public License.  We use
+this license for certain libraries in order to permit linking those
+libraries into non-free programs.
 
+  When a program is linked with a library, whether statically or using
+a shared library, the combination of the two is legally speaking a
+combined work, a derivative of the original library.  The ordinary
+General Public License therefore permits such linking only if the
+entire combination fits its criteria of freedom.  The Lesser General
+Public License permits more lax criteria for linking other code with
+the library.
+
+  We call this license the "Lesser" General Public License because it
+does Less to protect the user's freedom than the ordinary General
+Public License.  It also provides other free software developers Less
+of an advantage over competing non-free programs.  These disadvantages
+are the reason we use the ordinary General Public License for many
+libraries.  However, the Lesser license provides advantages in certain
+special circumstances.
+
+  For example, on rare occasions, there may be a special need to
+encourage the widest possible use of a certain library, so that it becomes
+a de-facto standard.  To achieve this, non-free programs must be
+allowed to use the library.  A more frequent case is that a free
+library does the same job as widely used non-free libraries.  In this
+case, there is little to gain by limiting the free library to free
+software only, so we use the Lesser General Public License.
+
+  In other cases, permission to use a particular library in non-free
+programs enables a greater number of people to use a large body of
+free software.  For example, permission to use the GNU C Library in
+non-free programs enables many more people to use the whole GNU
+operating system, as well as its variant, the GNU/Linux operating
+system.
+
+  Although the Lesser General Public License is Less protective of the
+users' freedom, it does ensure that the user of a program that is
+linked with the Library has the freedom and the wherewithal to run
+that program using a modified version of the Library.
+
   The precise terms and conditions for copying, distribution and
-modification follow.
+modification follow.  Pay close attention to the difference between a
+"work based on the library" and a "work that uses the library".  The
+former contains code derived from the library, whereas the latter must
+be combined with the library in order to run.
 
-		    GNU GENERAL PUBLIC LICENSE
+		  GNU LESSER GENERAL PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 
-  0. This License applies to any program or other work which contains
-a notice placed by the copyright holder saying it may be distributed
-under the terms of this General Public License.  The "Program", below,
-refers to any such program or work, and a "work based on the Program"
-means either the Program or any derivative work under copyright law:
-that is to say, a work containing the Program or a portion of it,
-either verbatim or with modifications and/or translated into another
-language.  (Hereinafter, translation is included without limitation in
-the term "modification".)  Each licensee is addressed as "you".
+  0. This License Agreement applies to any software library or other
+program which contains a notice placed by the copyright holder or
+other authorized party saying it may be distributed under the terms of
+this Lesser General Public License (also called "this License").
+Each licensee is addressed as "you".
 
-Activities other than copying, distribution and modification are not
-covered by this License; they are outside its scope.  The act of
-running the Program is not restricted, and the output from the Program
-is covered only if its contents constitute a work based on the
-Program (independent of having been made by running the Program).
-Whether that is true depends on what the Program does.
+  A "library" means a collection of software functions and/or data
+prepared so as to be conveniently linked with application programs
+(which use some of those functions and data) to form executables.
 
-  1. You may copy and distribute verbatim copies of the Program's
-source code as you receive it, in any medium, provided that you
-conspicuously and appropriately publish on each copy an appropriate
-copyright notice and disclaimer of warranty; keep intact all the
-notices that refer to this License and to the absence of any warranty;
-and give any other recipients of the Program a copy of this License
-along with the Program.
+  The "Library", below, refers to any such software library or work
+which has been distributed under these terms.  A "work based on the
+Library" means either the Library or any derivative work under
+copyright law: that is to say, a work containing the Library or a
+portion of it, either verbatim or with modifications and/or translated
+straightforwardly into another language.  (Hereinafter, translation is
+included without limitation in the term "modification".)
 
-You may charge a fee for the physical act of transferring a copy, and
-you may at your option offer warranty protection in exchange for a fee.
+  "Source code" for a work means the preferred form of the work for
+making modifications to it.  For a library, complete source code means
+all the source code for all modules it contains, plus any associated
+interface definition files, plus the scripts used to control compilation
+and installation of the library.
 
-  2. You may modify your copy or copies of the Program or any portion
-of it, thus forming a work based on the Program, and copy and
+  Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running a program using the Library is not restricted, and output from
+such a program is covered only if its contents constitute a work based
+on the Library (independent of the use of the Library in a tool for
+writing it).  Whether that is true depends on what the Library does
+and what the program that uses the Library does.
+  
+  1. You may copy and distribute verbatim copies of the Library's
+complete source code as you receive it, in any medium, provided that
+you conspicuously and appropriately publish on each copy an
+appropriate copyright notice and disclaimer of warranty; keep intact
+all the notices that refer to this License and to the absence of any
+warranty; and distribute a copy of this License along with the
+Library.
+
+  You may charge a fee for the physical act of transferring a copy,
+and you may at your option offer warranty protection in exchange for a
+fee.
+
+  2. You may modify your copy or copies of the Library or any portion
+of it, thus forming a work based on the Library, and copy and
 distribute such modifications or work under the terms of Section 1
 above, provided that you also meet all of these conditions:
 
-    a) You must cause the modified files to carry prominent notices
+    a) The modified work must itself be a software library.
+
+    b) You must cause the files modified to carry prominent notices
     stating that you changed the files and the date of any change.
 
-    b) You must cause any work that you distribute or publish, that in
-    whole or in part contains or is derived from the Program or any
-    part thereof, to be licensed as a whole at no charge to all third
-    parties under the terms of this License.
+    c) You must cause the whole of the work to be licensed at no
+    charge to all third parties under the terms of this License.
 
-    c) If the modified program normally reads commands interactively
-    when run, you must cause it, when started running for such
-    interactive use in the most ordinary way, to print or display an
-    announcement including an appropriate copyright notice and a
-    notice that there is no warranty (or else, saying that you provide
-    a warranty) and that users may redistribute the program under
-    these conditions, and telling the user how to view a copy of this
-    License.  (Exception: if the Program itself is interactive but
-    does not normally print such an announcement, your work based on
-    the Program is not required to print an announcement.)
-
+    d) If a facility in the modified Library refers to a function or a
+    table of data to be supplied by an application program that uses
+    the facility, other than as an argument passed when the facility
+    is invoked, then you must make a good faith effort to ensure that,
+    in the event an application does not supply such function or
+    table, the facility still operates, and performs whatever part of
+    its purpose remains meaningful.
+
+    (For example, a function in a library to compute square roots has
+    a purpose that is entirely well-defined independent of the
+    application.  Therefore, Subsection 2d requires that any
+    application-supplied function or table used by this function must
+    be optional: if the application does not supply it, the square
+    root function must still compute square roots.)
+
 These requirements apply to the modified work as a whole.  If
-identifiable sections of that work are not derived from the Program,
+identifiable sections of that work are not derived from the Library,
 and can be reasonably considered independent and separate works in
 themselves, then this License, and its terms, do not apply to those
 sections when you distribute them as separate works.  But when you
 distribute the same sections as part of a whole which is a work based
-on the Program, the distribution of the whole must be on the terms of
+on the Library, the distribution of the whole must be on the terms of
 this License, whose permissions for other licensees extend to the
-entire whole, and thus to each and every part regardless of who wrote it.
+entire whole, and thus to each and every part regardless of who wrote
+it.
 
 Thus, it is not the intent of this section to claim rights or contest
 your rights to work written entirely by you; rather, the intent is to
 exercise the right to control the distribution of derivative or
-collective works based on the Program.
+collective works based on the Library.
 
-In addition, mere aggregation of another work not based on the Program
-with the Program (or with a work based on the Program) on a volume of
+In addition, mere aggregation of another work not based on the Library
+with the Library (or with a work based on the Library) on a volume of
 a storage or distribution medium does not bring the other work under
 the scope of this License.
 
-  3. You may copy and distribute the Program (or a work based on it,
-under Section 2) in object code or executable form under the terms of
-Sections 1 and 2 above provided that you also do one of the following:
+  3. You may opt to apply the terms of the ordinary GNU General Public
+License instead of this License to a given copy of the Library.  To do
+this, you must alter all the notices that refer to this License, so
+that they refer to the ordinary GNU General Public License, version 2,
+instead of to this License.  (If a newer version than version 2 of the
+ordinary GNU General Public License has appeared, then you can specify
+that version instead if you wish.)  Do not make any other change in
+these notices.
+
+  Once this change is made in a given copy, it is irreversible for
+that copy, so the ordinary GNU General Public License applies to all
+subsequent copies and derivative works made from that copy.
 
-    a) Accompany it with the complete corresponding machine-readable
-    source code, which must be distributed under the terms of Sections
-    1 and 2 above on a medium customarily used for software interchange; or,
+  This option is useful when you wish to copy part of the code of
+the Library into a program that is not a library.
 
-    b) Accompany it with a written offer, valid for at least three
-    years, to give any third party, for a charge no more than your
-    cost of physically performing source distribution, a complete
-    machine-readable copy of the corresponding source code, to be
-    distributed under the terms of Sections 1 and 2 above on a medium
-    customarily used for software interchange; or,
+  4. You may copy and distribute the Library (or a portion or
+derivative of it, under Section 2) in object code or executable form
+under the terms of Sections 1 and 2 above provided that you accompany
+it with the complete corresponding machine-readable source code, which
+must be distributed under the terms of Sections 1 and 2 above on a
+medium customarily used for software interchange.
 
-    c) Accompany it with the information you received as to the offer
-    to distribute corresponding source code.  (This alternative is
-    allowed only for noncommercial distribution and only if you
-    received the program in object code or executable form with such
-    an offer, in accord with Subsection b above.)
+  If distribution of object code is made by offering access to copy
+from a designated place, then offering equivalent access to copy the
+source code from the same place satisfies the requirement to
+distribute the source code, even though third parties are not
+compelled to copy the source along with the object code.
 
-The source code for a work means the preferred form of the work for
-making modifications to it.  For an executable work, complete source
-code means all the source code for all modules it contains, plus any
-associated interface definition files, plus the scripts used to
-control compilation and installation of the executable.  However, as a
-special exception, the source code distributed need not include
-anything that is normally distributed (in either source or binary
-form) with the major components (compiler, kernel, and so on) of the
-operating system on which the executable runs, unless that component
-itself accompanies the executable.
+  5. A program that contains no derivative of any portion of the
+Library, but is designed to work with the Library by being compiled or
+linked with it, is called a "work that uses the Library".  Such a
+work, in isolation, is not a derivative work of the Library, and
+therefore falls outside the scope of this License.
 
-If distribution of executable or object code is made by offering
-access to copy from a designated place, then offering equivalent
-access to copy the source code from the same place counts as
-distribution of the source code, even though third parties are not
-compelled to copy the source along with the object code.
+  However, linking a "work that uses the Library" with the Library
+creates an executable that is a derivative of the Library (because it
+contains portions of the Library), rather than a "work that uses the
+library".  The executable is therefore covered by this License.
+Section 6 states terms for distribution of such executables.
+
+  When a "work that uses the Library" uses material from a header file
+that is part of the Library, the object code for the work may be a
+derivative work of the Library even though the source code is not.
+Whether this is true is especially significant if the work can be
+linked without the Library, or if the work is itself a library.  The
+threshold for this to be true is not precisely defined by law.
+
+  If such an object file uses only numerical parameters, data
+structure layouts and accessors, and small macros and small inline
+functions (ten lines or less in length), then the use of the object
+file is unrestricted, regardless of whether it is legally a derivative
+work.  (Executables containing this object code plus portions of the
+Library will still fall under Section 6.)
+
+  Otherwise, if the work is a derivative of the Library, you may
+distribute the object code for the work under the terms of Section 6.
+Any executables containing that work also fall under Section 6,
+whether or not they are linked directly with the Library itself.
 
-  4. You may not copy, modify, sublicense, or distribute the Program
-except as expressly provided under this License.  Any attempt
-otherwise to copy, modify, sublicense or distribute the Program is
-void, and will automatically terminate your rights under this License.
-However, parties who have received copies, or rights, from you under
-this License will not have their licenses terminated so long as such
-parties remain in full compliance.
+  6. As an exception to the Sections above, you may also combine or
+link a "work that uses the Library" with the Library to produce a
+work containing portions of the Library, and distribute that work
+under terms of your choice, provided that the terms permit
+modification of the work for the customer's own use and reverse
+engineering for debugging such modifications.
 
-  5. You are not required to accept this License, since you have not
+  You must give prominent notice with each copy of the work that the
+Library is used in it and that the Library and its use are covered by
+this License.  You must supply a copy of this License.  If the work
+during execution displays copyright notices, you must include the
+copyright notice for the Library among them, as well as a reference
+directing the user to the copy of this License.  Also, you must do one
+of these things:
+
+    a) Accompany the work with the complete corresponding
+    machine-readable source code for the Library including whatever
+    changes were used in the work (which must be distributed under
+    Sections 1 and 2 above); and, if the work is an executable linked
+    with the Library, with the complete machine-readable "work that
+    uses the Library", as object code and/or source code, so that the
+    user can modify the Library and then relink to produce a modified
+    executable containing the modified Library.  (It is understood
+    that the user who changes the contents of definitions files in the
+    Library will not necessarily be able to recompile the application
+    to use the modified definitions.)
+
+    b) Use a suitable shared library mechanism for linking with the
+    Library.  A suitable mechanism is one that (1) uses at run time a
+    copy of the library already present on the user's computer system,
+    rather than copying library functions into the executable, and (2)
+    will operate properly with a modified version of the library, if
+    the user installs one, as long as the modified version is
+    interface-compatible with the version that the work was made with.
+
+    c) Accompany the work with a written offer, valid for at
+    least three years, to give the same user the materials
+    specified in Subsection 6a, above, for a charge no more
+    than the cost of performing this distribution.
+
+    d) If distribution of the work is made by offering access to copy
+    from a designated place, offer equivalent access to copy the above
+    specified materials from the same place.
+
+    e) Verify that the user has already received a copy of these
+    materials or that you have already sent this user a copy.
+
+  For an executable, the required form of the "work that uses the
+Library" must include any data and utility programs needed for
+reproducing the executable from it.  However, as a special exception,
+the materials to be distributed need not include anything that is
+normally distributed (in either source or binary form) with the major
+components (compiler, kernel, and so on) of the operating system on
+which the executable runs, unless that component itself accompanies
+the executable.
+
+  It may happen that this requirement contradicts the license
+restrictions of other proprietary libraries that do not normally
+accompany the operating system.  Such a contradiction means you cannot
+use both them and the Library together in an executable that you
+distribute.
+
+  7. You may place library facilities that are a work based on the
+Library side-by-side in a single library together with other library
+facilities not covered by this License, and distribute such a combined
+library, provided that the separate distribution of the work based on
+the Library and of the other library facilities is otherwise
+permitted, and provided that you do these two things:
+
+    a) Accompany the combined library with a copy of the same work
+    based on the Library, uncombined with any other library
+    facilities.  This must be distributed under the terms of the
+    Sections above.
+
+    b) Give prominent notice with the combined library of the fact
+    that part of it is a work based on the Library, and explaining
+    where to find the accompanying uncombined form of the same work.
+
+  8. You may not copy, modify, sublicense, link with, or distribute
+the Library except as expressly provided under this License.  Any
+attempt otherwise to copy, modify, sublicense, link with, or
+distribute the Library is void, and will automatically terminate your
+rights under this License.  However, parties who have received copies,
+or rights, from you under this License will not have their licenses
+terminated so long as such parties remain in full compliance.
+
+  9. You are not required to accept this License, since you have not
 signed it.  However, nothing else grants you permission to modify or
-distribute the Program or its derivative works.  These actions are
+distribute the Library or its derivative works.  These actions are
 prohibited by law if you do not accept this License.  Therefore, by
-modifying or distributing the Program (or any work based on the
-Program), you indicate your acceptance of this License to do so, and
+modifying or distributing the Library (or any work based on the
+Library), you indicate your acceptance of this License to do so, and
 all its terms and conditions for copying, distributing or modifying
-the Program or works based on it.
+the Library or works based on it.
 
-  6. Each time you redistribute the Program (or any work based on the
-Program), the recipient automatically receives a license from the
-original licensor to copy, distribute or modify the Program subject to
-these terms and conditions.  You may not impose any further
+  10. Each time you redistribute the Library (or any work based on the
+Library), the recipient automatically receives a license from the
+original licensor to copy, distribute, link with or modify the Library
+subject to these terms and conditions.  You may not impose any further
 restrictions on the recipients' exercise of the rights granted herein.
-You are not responsible for enforcing compliance by third parties to
+You are not responsible for enforcing compliance by third parties with
 this License.
-
-  7. If, as a consequence of a court judgment or allegation of patent
+
+  11. If, as a consequence of a court judgment or allegation of patent
 infringement or for any other reason (not limited to patent issues),
 conditions are imposed on you (whether by court order, agreement or
 otherwise) that contradict the conditions of this License, they do not
 excuse you from the conditions of this License.  If you cannot
 distribute so as to satisfy simultaneously your obligations under this
 License and any other pertinent obligations, then as a consequence you
-may not distribute the Program at all.  For example, if a patent
-license would not permit royalty-free redistribution of the Program by
+may not distribute the Library at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Library by
 all those who receive copies directly or indirectly through you, then
 the only way you could satisfy both it and this License would be to
-refrain entirely from distribution of the Program.
+refrain entirely from distribution of the Library.
 
-If any portion of this section is held invalid or unenforceable under
-any particular circumstance, the balance of the section is intended to
-apply and the section as a whole is intended to apply in other
-circumstances.
+If any portion of this section is held invalid or unenforceable under any
+particular circumstance, the balance of the section is intended to apply,
+and the section as a whole is intended to apply in other circumstances.
 
 It is not the purpose of this section to induce you to infringe any
 patents or other property right claims or to contest validity of any
 such claims; this section has the sole purpose of protecting the
-integrity of the free software distribution system, which is
+integrity of the free software distribution system which is
 implemented by public license practices.  Many people have made
 generous contributions to the wide range of software distributed
 through that system in reliance on consistent application of that
@@ -225,116 +401,102 @@
 
 This section is intended to make thoroughly clear what is believed to
 be a consequence of the rest of this License.
-
-  8. If the distribution and/or use of the Program is restricted in
+
+  12. If the distribution and/or use of the Library is restricted in
 certain countries either by patents or by copyrighted interfaces, the
-original copyright holder who places the Program under this License
-may add an explicit geographical distribution limitation excluding
-those countries, so that distribution is permitted only in or among
-countries not thus excluded.  In such case, this License incorporates
-the limitation as if written in the body of this License.
+original copyright holder who places the Library under this License may add
+an explicit geographical distribution limitation excluding those countries,
+so that distribution is permitted only in or among countries not thus
+excluded.  In such case, this License incorporates the limitation as if
+written in the body of this License.
 
-  9. The Free Software Foundation may publish revised and/or new versions
-of the General Public License from time to time.  Such new versions will
-be similar in spirit to the present version, but may differ in detail to
-address new problems or concerns.
+  13. The Free Software Foundation may publish revised and/or new
+versions of the Lesser General Public License from time to time.
+Such new versions will be similar in spirit to the present version,
+but may differ in detail to address new problems or concerns.
 
-Each version is given a distinguishing version number.  If the Program
-specifies a version number of this License which applies to it and "any
-later version", you have the option of following the terms and conditions
-either of that version or of any later version published by the Free
-Software Foundation.  If the Program does not specify a version number of
-this License, you may choose any version ever published by the Free Software
-Foundation.
+Each version is given a distinguishing version number.  If the Library
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation.  If the Library does not specify a
+license version number, you may choose any version ever published by
+the Free Software Foundation.
+
+  14. If you wish to incorporate parts of the Library into other free
+programs whose distribution conditions are incompatible with these,
+write to the author to ask for permission.  For software which is
+copyrighted by the Free Software Foundation, write to the Free
+Software Foundation; we sometimes make exceptions for this.  Our
+decision will be guided by the two goals of preserving the free status
+of all derivatives of our free software and of promoting the sharing
+and reuse of software generally.
 
-  10. If you wish to incorporate parts of the Program into other free
-programs whose distribution conditions are different, write to the author
-to ask for permission.  For software which is copyrighted by the Free
-Software Foundation, write to the Free Software Foundation; we sometimes
-make exceptions for this.  Our decision will be guided by the two goals
-of preserving the free status of all derivatives of our free software and
-of promoting the sharing and reuse of software generally.
-
 			    NO WARRANTY
 
-  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
-FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
-OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
-PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
-OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
-MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
-TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
-PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
-REPAIR OR CORRECTION.
+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
+OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
 
-  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
-WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
-REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
-INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
-OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
-TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
-YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
-PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
-POSSIBILITY OF SUCH DAMAGES.
+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
 
 		     END OF TERMS AND CONDITIONS
 
-	    How to Apply These Terms to Your New Programs
+           How to Apply These Terms to Your New Libraries
 
-  If you develop a new program, and you want it to be of the greatest
-possible use to the public, the best way to achieve this is to make it
-free software which everyone can redistribute and change under these terms.
+  If you develop a new library, and you want it to be of the greatest
+possible use to the public, we recommend making it free software that
+everyone can redistribute and change.  You can do so by permitting
+redistribution under these terms (or, alternatively, under the terms of the
+ordinary General Public License).
 
-  To do so, attach the following notices to the program.  It is safest
-to attach them to the start of each source file to most effectively
-convey the exclusion of warranty; and each file should have at least
-the "copyright" line and a pointer to where the full notice is found.
+  To apply these terms, attach the following notices to the library.  It is
+safest to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
 
-    <one line to give the program's name and a brief idea of what it does.>
+    <one line to give the library's name and a brief idea of what it does.>
     Copyright (C) <year>  <name of author>
 
-    This program is free software; you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation; either version 2 of the License, or
-    (at your option) any later version.
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
 
-    This program is distributed in the hope that it will be useful,
+    This library is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
 
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, write to the Free Software
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
-
 Also add information on how to contact you by electronic and paper mail.
 
-If the program is interactive, make it output a short notice like this
-when it starts in an interactive mode:
-
-    Gnomovision version 69, Copyright (C) year  name of author
-    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
-    This is free software, and you are welcome to redistribute it
-    under certain conditions; type `show c' for details.
-
-The hypothetical commands `show w' and `show c' should show the appropriate
-parts of the General Public License.  Of course, the commands you use may
-be called something other than `show w' and `show c'; they could even be
-mouse-clicks or menu items--whatever suits your program.
-
 You should also get your employer (if you work as a programmer) or your
-school, if any, to sign a "copyright disclaimer" for the program, if
+school, if any, to sign a "copyright disclaimer" for the library, if
 necessary.  Here is a sample; alter the names:
 
-  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
-  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the
+  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
 
-  <signature of Ty Coon>, 1 April 1989
+  <signature of Ty Coon>, 1 April 1990
   Ty Coon, President of Vice
 
-This General Public License does not permit incorporating your program into
-proprietary programs.  If your program is a subroutine library, you may
-consider it more useful to permit linking proprietary applications with the
-library.  If this is what you want to do, use the GNU Library General
-Public License instead of this License.
+That's all there is to it!

Modified: trunk/README
===================================================================
--- trunk/README	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/README	2006-03-31 10:32:02 UTC (rev 222)
@@ -12,4 +12,4 @@
 High-level Python bindings (boost.python) facilitate rapid application development, 
 targeting zope3, django etc.
 
-Mapnik is a free software and is released under GPL (General Public Licence) (see COPYING)
+Mapnik is a free software and is released under LGPL (GNU Lesser General Public Licence) (see COPYING)

Modified: trunk/SConstruct
===================================================================
--- trunk/SConstruct	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/SConstruct	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,22 +1,25 @@
-#  This file is part of Mapnik (c++ mapping toolkit)
-#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
 #
-#  Mapnik is free software; you can redistribute it and/or
-#  modify it under the terms of the GNU General Public License
-#  as published by the Free Software Foundation; either version 2
-#  of the License, or any later version.
+# This file is part of Mapnik (c++ mapping toolkit)
 #
-#  This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
+# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
 #
-#  You should have received a copy of the GNU General Public License
-#  along with this program; if not, write to the Free Software
-#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
 #
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 # $Id$
 
+
 import os, sys
 
 opts = Options()

Modified: trunk/bindings/python/SConscript
===================================================================
--- trunk/bindings/python/SConscript	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/SConscript	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,22 @@
-#  This file is part of Mapnik (c++ mapping toolkit)
-#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
 #
-#  Mapnik is free software; you can redistribute it and/or
-#  modify it under the terms of the GNU General Public License
-#  as published by the Free Software Foundation; either version 2
-#  of the License, or any later version.
-# 
-#  This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-# 
-#  You should have received a copy of the GNU General Public License
-#  along with this program; if not, write to the Free Software
-#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-# 
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 # $Id$
 
 import glob

Modified: trunk/bindings/python/mapnik_color.cpp
===================================================================
--- trunk/bindings/python/mapnik_color.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_color.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -15,7 +15,27 @@
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  */
-
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: mapnik_color.cc 17 2005-03-08 23:58:43Z pavlenko $
 
 

Modified: trunk/bindings/python/mapnik_datasource_cache.cpp
===================================================================
--- trunk/bindings/python/mapnik_datasource_cache.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_datasource_cache.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/bindings/python/mapnik_envelope.cpp
===================================================================
--- trunk/bindings/python/mapnik_envelope.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_envelope.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: mapnik_envelope.cc 27 2005-03-30 21:45:40Z pavlenko $
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_filter.cpp
===================================================================
--- trunk/bindings/python/mapnik_filter.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_filter.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_font_engine.cpp
===================================================================
--- trunk/bindings/python/mapnik_font_engine.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_font_engine.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for moprovpoly_lyrre details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_image.cpp
===================================================================
--- trunk/bindings/python/mapnik_image.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_image.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 # include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_layer.cpp
===================================================================
--- trunk/bindings/python/mapnik_layer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_layer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: mapnik_layer.cc 17 2005-03-08 23:58:43Z pavlenko $
 
 

Modified: trunk/bindings/python/mapnik_line_pattern_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_line_pattern_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_line_pattern_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_line_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_line_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_line_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_map.cpp
===================================================================
--- trunk/bindings/python/mapnik_map.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_map.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: mapnik_map.cc 17 2005-03-08 23:58:43Z pavlenko $
 
 

Modified: trunk/bindings/python/mapnik_parameters.cpp
===================================================================
--- trunk/bindings/python/mapnik_parameters.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_parameters.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: mapnik_parameters.cc 17 2005-03-08 23:58:43Z pavlenko $
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_point_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_point_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_point_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_polygon_pattern_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_polygon_pattern_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_polygon_pattern_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_polygon_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_polygon_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_polygon_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_python.cpp
===================================================================
--- trunk/bindings/python/mapnik_python.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_python.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,22 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURP
-OSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: mapnik_python.cc 27 2005-03-30 21:45:40Z pavlenko $
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_raster_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_raster_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_raster_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_rule.cpp
===================================================================
--- trunk/bindings/python/mapnik_rule.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_rule.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 

Modified: trunk/bindings/python/mapnik_stroke.cpp
===================================================================
--- trunk/bindings/python/mapnik_stroke.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_stroke.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_style.cpp
===================================================================
--- trunk/bindings/python/mapnik_style.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_style.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/bindings/python/mapnik_text_symbolizer.cpp
===================================================================
--- trunk/bindings/python/mapnik_text_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/bindings/python/mapnik_text_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of python_mapnik (c++/python mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include <boost/python.hpp>

Modified: trunk/include/agg_renderer.hpp
===================================================================
--- trunk/include/agg_renderer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/agg_renderer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
  * Copyright (C) 2006 Artem Pavlenko
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/attribute.hpp
===================================================================
--- trunk/include/attribute.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/attribute.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: attribute.hpp 41 2005-04-13 20:21:56Z pavlenko $
 

Modified: trunk/include/attribute_collector.hpp
===================================================================
--- trunk/include/attribute_collector.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/attribute_collector.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/attribute_descriptor.hpp
===================================================================
--- trunk/include/attribute_descriptor.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/attribute_descriptor.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/color.hpp
===================================================================
--- trunk/include/color.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/color.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: color.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/color_factory.hpp
===================================================================
--- trunk/include/color_factory.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/color_factory.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/comparison.hpp
===================================================================
--- trunk/include/comparison.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/comparison.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef COMPARISON_HPP

Modified: trunk/include/config.hpp
===================================================================
--- trunk/include/config.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/config.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,3 +1,25 @@
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
+ * Copyright (C) 2006 Artem Pavlenko
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
+
 #ifndef CONFIG_HPP
 #define CONFIG_HPP
 

Modified: trunk/include/coord.hpp
===================================================================
--- trunk/include/coord.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/coord.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.#include "memory.hpp"
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: coord.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/coord_array.hpp
===================================================================
--- trunk/include/coord_array.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/coord_array.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.#include "memory.hpp"
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: coord_array.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/css_color_parser.hpp
===================================================================
--- trunk/include/css_color_parser.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/css_color_parser.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/ctrans.hpp
===================================================================
--- trunk/include/ctrans.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/ctrans.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: ctrans.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/datasource.hpp
===================================================================
--- trunk/include/datasource.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/datasource.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: datasource.hpp 43 2005-04-22 18:52:47Z pavlenko $
 

Modified: trunk/include/datasource_cache.hpp
===================================================================
--- trunk/include/datasource_cache.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/datasource_cache.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: datasource_cache.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/envelope.hpp
===================================================================
--- trunk/include/envelope.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/envelope.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: envelope.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/expression.hpp
===================================================================
--- trunk/include/expression.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/expression.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/factory.hpp
===================================================================
--- trunk/include/factory.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/factory.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: factory.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/feature.hpp
===================================================================
--- trunk/include/feature.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/feature.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: feature.hpp 40 2005-04-13 20:20:46Z pavlenko $
 

Modified: trunk/include/feature_factory.hpp
===================================================================
--- trunk/include/feature_factory.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/feature_factory.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/feature_layer_desc.hpp
===================================================================
--- trunk/include/feature_layer_desc.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/feature_layer_desc.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.#include "memory.hh"
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/feature_style_processor.hpp
===================================================================
--- trunk/include/feature_style_processor.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/feature_style_processor.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
  * Copyright (C) 2006 Artem Pavlenko
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/feature_type_style.hpp
===================================================================
--- trunk/include/feature_type_style.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/feature_type_style.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/fill.hpp
===================================================================
--- trunk/include/fill.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/fill.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,26 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
+
 //$Id$
 
 #ifndef FILL_HPP

Modified: trunk/include/filter.hpp
===================================================================
--- trunk/include/filter.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/filter.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/filter_expression.hpp
===================================================================
--- trunk/include/filter_expression.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/filter_expression.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/filter_factory.hpp
===================================================================
--- trunk/include/filter_factory.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/filter_factory.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,23 +1,25 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
-//#include "array.hpp"
-
 //$Id$
 
 #ifndef FILTER_FACTORY_HPP

Modified: trunk/include/filter_parser.hpp
===================================================================
--- trunk/include/filter_parser.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/filter_parser.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,26 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
+
 //$Id$
 
 #ifndef FILTER_PARSER_HPP

Modified: trunk/include/filter_parser_ast.hpp
===================================================================
--- trunk/include/filter_parser_ast.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/filter_parser_ast.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/filter_visitor.hpp
===================================================================
--- trunk/include/filter_visitor.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/filter_visitor.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,27 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
+//$Id$
+
 #ifndef FILTER_VISITOR_HPP
 #define FILTER_VISITOR_HPP
 

Modified: trunk/include/font_engine_freetype.hpp
===================================================================
--- trunk/include/font_engine_freetype.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/font_engine_freetype.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
- /* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/gamma.hpp
===================================================================
--- trunk/include/gamma.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/gamma.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: gamma.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/geom_util.hpp
===================================================================
--- trunk/include/geom_util.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/geom_util.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: geom_util.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/geometry.hpp
===================================================================
--- trunk/include/geometry.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/geometry.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,26 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
+
 //$Id: geometry.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef GEOMETRY_HPP

Modified: trunk/include/global.hpp
===================================================================
--- trunk/include/global.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/global.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/graphics.hpp
===================================================================
--- trunk/include/graphics.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/graphics.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: graphics.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/image_data.hpp
===================================================================
--- trunk/include/image_data.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/image_data.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: image_data.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/image_reader.hpp
===================================================================
--- trunk/include/image_reader.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/image_reader.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: image_reader.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/image_util.hpp
===================================================================
--- trunk/include/image_util.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/image_util.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: image_util.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/label_collision_detector.hpp
===================================================================
--- trunk/include/label_collision_detector.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/label_collision_detector.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,24 +1,27 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
  * Copyright (C) 2006 Artem Pavlenko
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 
-
 #if !defined LABEL_COLLISION_DETECTOR
 #define LABEL_COLLISION_DETECTOR
 

Modified: trunk/include/label_placement.hpp
===================================================================
--- trunk/include/label_placement.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/label_placement.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef LABEL_PLACEMENT_HPP

Modified: trunk/include/layer.hpp
===================================================================
--- trunk/include/layer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/layer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: layer.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef LAYER_HPP

Modified: trunk/include/line_pattern_symbolizer.hpp
===================================================================
--- trunk/include/line_pattern_symbolizer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/line_pattern_symbolizer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: polygon_symbolizer.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef LINE_PATTERN_SYMBOLIZER_HPP

Modified: trunk/include/line_symbolizer.hpp
===================================================================
--- trunk/include/line_symbolizer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/line_symbolizer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: line_symbolizer.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef LINE_SYMBOLIZER_HPP

Modified: trunk/include/local_datasource.hpp
===================================================================
--- trunk/include/local_datasource.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/local_datasource.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef LOCAL_DATASOURCE_HPP

Modified: trunk/include/logical.hpp
===================================================================
--- trunk/include/logical.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/logical.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef LOGICAL_HPP

Modified: trunk/include/map.hpp
===================================================================
--- trunk/include/map.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/map.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: map.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef MAP_HPP

Modified: trunk/include/mapnik.hpp
===================================================================
--- trunk/include/mapnik.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/mapnik.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: mapnik.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
@@ -34,7 +38,6 @@
 #include "comparison.hpp"
 #include "regex_filter.hpp"
 #include "utils.hpp"
-//#include "symbolizer.hpp"
 #include "geometry.hpp"
 #include "geom_util.hpp"
 #include "raster.hpp"

Modified: trunk/include/math_expr.hpp
===================================================================
--- trunk/include/math_expr.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/math_expr.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef MATH_EXPR_HPP

Modified: trunk/include/memory.hpp
===================================================================
--- trunk/include/memory.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/memory.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: memory.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef MEMORY_HPP

Modified: trunk/include/params.hpp
===================================================================
--- trunk/include/params.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/params.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: params.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef PARAMS_HPP

Modified: trunk/include/plugin.hpp
===================================================================
--- trunk/include/plugin.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/plugin.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: plugin.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/point_symbolizer.hpp
===================================================================
--- trunk/include/point_symbolizer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/point_symbolizer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: image_symbolizer.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef POINT_SYMBOLIZER_HPP

Modified: trunk/include/polygon_pattern_symbolizer.hpp
===================================================================
--- trunk/include/polygon_pattern_symbolizer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/polygon_pattern_symbolizer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef POLYGON_PATTERN_SYMBOLIZER_HPP

Modified: trunk/include/polygon_symbolizer.hpp
===================================================================
--- trunk/include/polygon_symbolizer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/polygon_symbolizer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,28 +1,30 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: polygon_symbolizer.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef POLYGON_SYMBOLIZER_HPP
 #define POLYGON_SYMBOLIZER_HPP
 
-//#include "symbolizer.hpp"
-//#include <boost/utility.hpp>
 #include "color.hpp"
 
 namespace mapnik 

Modified: trunk/include/pool.hpp
===================================================================
--- trunk/include/pool.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/pool.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: pool.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/include/quad_tree.hpp
===================================================================
--- trunk/include/quad_tree.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/quad_tree.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
  * Copyright (C) 2006 Artem Pavlenko
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #if !defined QUAD_TREE_HPP

Modified: trunk/include/query.hpp
===================================================================
--- trunk/include/query.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/query.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/include/raster.hpp
===================================================================
--- trunk/include/raster.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/raster.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: raster.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef RASTER_HPP

Modified: trunk/include/raster_symbolizer.hpp
===================================================================
--- trunk/include/raster_symbolizer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/raster_symbolizer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef RASTER_SYMBOLIZER_HPP

Modified: trunk/include/rule.hpp
===================================================================
--- trunk/include/rule.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/rule.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #ifndef RULE_HPP
 #define RULE_HPP

Modified: trunk/include/spatial.hpp
===================================================================
--- trunk/include/spatial.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/spatial.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 #ifndef SPATIAL_HPP
 #define SPATIAL_HPP
 

Modified: trunk/include/stroke.hpp
===================================================================
--- trunk/include/stroke.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/stroke.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef STROKE_HPP

Modified: trunk/include/style.hpp
===================================================================
--- trunk/include/style.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/style.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: style.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef STYLE_HPP

Modified: trunk/include/style_factory.hpp
===================================================================
--- trunk/include/style_factory.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/style_factory.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: style_factory.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef STYLE_FACTORY_HPP

Modified: trunk/include/symbolizer.hpp
===================================================================
--- trunk/include/symbolizer.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/symbolizer.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,40 +1,31 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: symbolizer.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef SYMBOLIZER_HPP
 #define SYMBOLIZER_HPP
 
-//#include "graphics.hpp" 
-//#include "feature.hpp"
-//#include "geometry.hpp"
-//#include <limits>
-
 namespace mapnik 
 {
-    //class Image32;
-
-    //struct symbolizer
-    //{
-    //	virtual void render(Feature const& feat, CoordTransform const& t, Image32& image) const=0;
-    //	virtual ~symbolizer() {}
-    //}; 
 }
 
 #endif //SYMBOLIZER_HPP

Modified: trunk/include/value.hpp
===================================================================
--- trunk/include/value.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/value.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #ifndef VALUE_HPP

Modified: trunk/include/vertex.hpp
===================================================================
--- trunk/include/vertex.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/vertex.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.#include "memory.hpp"
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: vertex.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef VERTEX_HPP

Modified: trunk/include/vertex_transform.hpp
===================================================================
--- trunk/include/vertex_transform.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/vertex_transform.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: vertex_transform.hpp 39 2005-04-10 20:39:53Z pavlenko $
 
 #ifndef VERTEX_TRANSFORM_HPP

Modified: trunk/include/vertex_vector.hpp
===================================================================
--- trunk/include/vertex_vector.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/vertex_vector.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.#include "memory.hpp"
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //  Credits:
 //  I gratefully acknowledge the inspiring work of Maxim Shemanarev (McSeem), 
 //  author of Anti-Grain Geometry (http://www.antigrain.com). I have used 

Modified: trunk/include/wkb.hpp
===================================================================
--- trunk/include/wkb.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/include/wkb.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: wkb.hpp 39 2005-04-10 20:39:53Z pavlenko $
 

Modified: trunk/plugins/input/postgis/SConscript
===================================================================
--- trunk/plugins/input/postgis/SConscript	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/SConscript	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,23 +1,24 @@
-#  This file is part of Mapnik (c++ mapping toolkit)
-#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
 #
-#  Mapnik is free software; you can redistribute it and/or
-#  modify it under the terms of the GNU General Public License
-#  as published by the Free Software Foundation; either version 2
-#  of the License, or any later version.
-# 
-#  This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-# 
-#  You should have received a copy of the GNU General Public License
-#  along with this program; if not, write to the Free Software
-#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-# 
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 # $Id$
 
-
 Import ('env')
 
 prefix = env['PREFIX']

Modified: trunk/plugins/input/postgis/connection.hpp
===================================================================
--- trunk/plugins/input/postgis/connection.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/connection.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: connection.hpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/plugins/input/postgis/connection_manager.hpp
===================================================================
--- trunk/plugins/input/postgis/connection_manager.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/connection_manager.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: connection_manager.hpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/plugins/input/postgis/postgis.cpp
===================================================================
--- trunk/plugins/input/postgis/postgis.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/postgis.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: postgis.cc 44 2005-04-22 18:53:54Z pavlenko $
 

Modified: trunk/plugins/input/postgis/postgis.hpp
===================================================================
--- trunk/plugins/input/postgis/postgis.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/postgis.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: postgis.hpp 44 2005-04-22 18:53:54Z pavlenko $
 

Modified: trunk/plugins/input/postgis/postgisfs.cpp
===================================================================
--- trunk/plugins/input/postgis/postgisfs.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/postgisfs.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: postgisfs.cc 34 2005-04-04 13:27:23Z pavlenko $
 

Modified: trunk/plugins/input/postgis/property_index.hpp
===================================================================
--- trunk/plugins/input/postgis/property_index.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/property_index.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/plugins/input/postgis/resultset.hpp
===================================================================
--- trunk/plugins/input/postgis/resultset.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/postgis/resultset.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: resultset.hpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/plugins/input/raster/SConscript
===================================================================
--- trunk/plugins/input/raster/SConscript	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/raster/SConscript	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,23 +1,24 @@
-#  This file is part of Mapnik (c++ mapping toolkit)
-#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
 #
-#  Mapnik is free software; you can redistribute it and/or
-#  modify it under the terms of the GNU General Public License
-#  as published by the Free Software Foundation; either version 2
-#  of the License, or any later version.
-# 
-#  This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-# 
-#  You should have received a copy of the GNU General Public License
-#  along with this program; if not, write to the Free Software
-#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-# 
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 # $Id$
 
-
 Import ('env')
 
 prefix = env['PREFIX']

Modified: trunk/plugins/input/raster/raster_datasource.cpp
===================================================================
--- trunk/plugins/input/raster/raster_datasource.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/raster/raster_datasource.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: raster_datasource.cc 44 2005-04-22 18:53:54Z pavlenko $
 
 #include "raster_datasource.hpp"

Modified: trunk/plugins/input/raster/raster_datasource.hpp
===================================================================
--- trunk/plugins/input/raster/raster_datasource.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/raster/raster_datasource.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: raster_datasource.hh 44 2005-04-22 18:53:54Z pavlenko $
 
 #ifndef RASTER_DATASOURCE_HH

Modified: trunk/plugins/input/raster/raster_featureset.cpp
===================================================================
--- trunk/plugins/input/raster/raster_featureset.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/raster/raster_featureset.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 #include "raster_featureset.hpp"
 #include "image_reader.hpp"
 #include "image_util.hpp"

Modified: trunk/plugins/input/raster/raster_featureset.hpp
===================================================================
--- trunk/plugins/input/raster/raster_featureset.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/raster/raster_featureset.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 #ifndef RASTER_FEATURESET_HH
 #define RASTER_FEATURESET_HH
 

Modified: trunk/plugins/input/raster/raster_info.cpp
===================================================================
--- trunk/plugins/input/raster/raster_info.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/raster/raster_info.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: raster_info.cc 17 2005-03-08 23:58:43Z pavlenko $
 
 #include "raster_info.hpp"

Modified: trunk/plugins/input/raster/raster_info.hpp
===================================================================
--- trunk/plugins/input/raster/raster_info.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/raster/raster_info.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: raster_info.hh 17 2005-03-08 23:58:43Z pavlenko $
 
 #ifndef RASTER_INFO

Modified: trunk/plugins/input/shape/SConscript
===================================================================
--- trunk/plugins/input/shape/SConscript	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/SConscript	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,22 +1,25 @@
-#  This file is part of Mapnik (c++ mapping toolkit)
-#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
 #
-#  Mapnik is free software; you can redistribute it and/or
-#  modify it under the terms of the GNU General Public License
-#  as published by the Free Software Foundation; either version 2
-#  of the License, or any later version.
-# 
-#  This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-# 
-#  You should have received a copy of the GNU General Public License
-#  along with this program; if not, write to the Free Software
-#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-# 
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 # $Id$
 
+
 Import ('env')
 
 prefix = env['PREFIX']

Modified: trunk/plugins/input/shape/dbf_test.cpp
===================================================================
--- trunk/plugins/input/shape/dbf_test.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/dbf_test.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #include <iostream>
 #include <iomanip>

Modified: trunk/plugins/input/shape/dbffile.cpp
===================================================================
--- trunk/plugins/input/shape/dbffile.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/dbffile.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #include "dbffile.hpp"
 #include "utils.hpp"

Modified: trunk/plugins/input/shape/dbffile.hpp
===================================================================
--- trunk/plugins/input/shape/dbffile.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/dbffile.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #ifndef DBFFILE_HH
 #define DBFFILE_HH

Modified: trunk/plugins/input/shape/shape.cpp
===================================================================
--- trunk/plugins/input/shape/shape.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #include "shape.hpp"
 #include "shape_featureset.hpp"

Modified: trunk/plugins/input/shape/shape.hpp
===================================================================
--- trunk/plugins/input/shape/shape.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #ifndef SHAPE_HH
 #define SHAPE_HH

Modified: trunk/plugins/input/shape/shape_featureset.cpp
===================================================================
--- trunk/plugins/input/shape/shape_featureset.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape_featureset.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #include "shape_featureset.hpp"
 #include <iostream>

Modified: trunk/plugins/input/shape/shape_featureset.hpp
===================================================================
--- trunk/plugins/input/shape/shape_featureset.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape_featureset.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #ifndef SHAPE_FS_HH
 #define SHAPE_FS_HH

Modified: trunk/plugins/input/shape/shape_index_featureset.cpp
===================================================================
--- trunk/plugins/input/shape/shape_index_featureset.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape_index_featureset.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: shape_index_featureset.cc 36 2005-04-05 14:32:18Z pavlenko $
 

Modified: trunk/plugins/input/shape/shape_index_featureset.hpp
===================================================================
--- trunk/plugins/input/shape/shape_index_featureset.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape_index_featureset.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #ifndef SHAPE_SQT_FS_HH
 #define SHAPE_SQT_FS_HH

Modified: trunk/plugins/input/shape/shape_io.cpp
===================================================================
--- trunk/plugins/input/shape/shape_io.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape_io.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: shape_io.cc 26 2005-03-29 19:18:59Z pavlenko $
 

Modified: trunk/plugins/input/shape/shape_io.hpp
===================================================================
--- trunk/plugins/input/shape/shape_io.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shape_io.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #ifndef SHAPE_IO_HH
 #define SHAPE_IO_HH

Modified: trunk/plugins/input/shape/shapefile.cpp
===================================================================
--- trunk/plugins/input/shape/shapefile.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shapefile.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #include "shapefile.hpp"
 

Modified: trunk/plugins/input/shape/shapefile.hpp
===================================================================
--- trunk/plugins/input/shape/shapefile.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shapefile.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: shapefile.hh 33 2005-04-04 13:01:03Z pavlenko $
 

Modified: trunk/plugins/input/shape/shp_index.cpp
===================================================================
--- trunk/plugins/input/shape/shp_index.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shp_index.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #include "shp_index.hpp"
 #include "geom_util.hpp"

Modified: trunk/plugins/input/shape/shp_index.hpp
===================================================================
--- trunk/plugins/input/shape/shp_index.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/plugins/input/shape/shp_index.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 #ifndef SHP_INDEX_HH
 #define SHP_INDEX_HH

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/SConscript	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,22 +1,25 @@
-#  This file is part of Mapnik (c++ mapping toolkit)
-#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
 #
-#  Mapnik is free software; you can redistribute it and/or
-#  modify it under the terms of the GNU General Public License
-#  as published by the Free Software Foundation; either version 2
-#  of the License, or any later version.
-# 
-#  This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-# 
-#  You should have received a copy of the GNU General Public License
-#  along with this program; if not, write to the Free Software
-#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-# 
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 # $Id$
 
+
 import glob
 
 Import('env')

Modified: trunk/src/agg_renderer.cpp
===================================================================
--- trunk/src/agg_renderer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/agg_renderer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
  * Copyright (C) 2006 Artem Pavlenko
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include "agg_renderer.hpp"

Modified: trunk/src/datasource_cache.cpp
===================================================================
--- trunk/src/datasource_cache.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/datasource_cache.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
- /* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+ /*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: datasource_cache.cpp 23 2005-03-22 22:16:34Z pavlenko $
 
 #include "datasource_cache.hpp"

Modified: trunk/src/envelope.cpp
===================================================================
--- trunk/src/envelope.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/envelope.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: envelope.cpp 17 2005-03-08 23:58:43Z pavlenko $
 
 #include "envelope.hpp"

Modified: trunk/src/font_engine_freetype.cpp
===================================================================
--- trunk/src/font_engine_freetype.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/font_engine_freetype.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
+ *
  * Copyright (C) 2006 Artem Pavlenko
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id$
 
 #include "font_engine_freetype.hpp"

Modified: trunk/src/graphics.cpp
===================================================================
--- trunk/src/graphics.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/graphics.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: graphics.cpp 17 2005-03-08 23:58:43Z pavlenko $
 
 #include <cassert>

Modified: trunk/src/image_reader.cpp
===================================================================
--- trunk/src/image_reader.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/image_reader.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: image_reader.cpp 17 2005-03-08 23:58:43Z pavlenko $
 
 

Modified: trunk/src/image_util.cpp
===================================================================
--- trunk/src/image_util.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/image_util.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: image_util.cpp 36 2005-04-05 14:32:18Z pavlenko $
 

Modified: trunk/src/layer.cpp
===================================================================
--- trunk/src/layer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/layer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: layer.cpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/src/line_pattern_symbolizer.cpp
===================================================================
--- trunk/src/line_pattern_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/line_pattern_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/src/map.cpp
===================================================================
--- trunk/src/map.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/map.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: map.cpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/src/mapnik.cpp
===================================================================
--- trunk/src/mapnik.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/mapnik.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/src/memory.cpp
===================================================================
--- trunk/src/memory.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/memory.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: memory.cpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/src/params.cpp
===================================================================
--- trunk/src/params.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/params.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: params.cpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/src/plugin.cpp
===================================================================
--- trunk/src/plugin.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/plugin.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: plugin.cpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/src/png_reader.cpp
===================================================================
--- trunk/src/png_reader.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/png_reader.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: png_reader.cpp 33 2005-04-04 13:01:03Z pavlenko $
 

Modified: trunk/src/point_symbolizer.cpp
===================================================================
--- trunk/src/point_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/point_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/src/polygon_pattern_symbolizer.cpp
===================================================================
--- trunk/src/polygon_pattern_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/polygon_pattern_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/src/text_symbolizer.cpp
===================================================================
--- trunk/src/text_symbolizer.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/text_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id$
 

Modified: trunk/src/tiff_reader.cpp
===================================================================
--- trunk/src/tiff_reader.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/tiff_reader.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: tiff_reader.cpp 17 2005-03-08 23:58:43Z pavlenko $
 

Modified: trunk/src/wkb.cpp
===================================================================
--- trunk/src/wkb.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/src/wkb.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 
 //$Id: wkb.cpp 19 2005-03-22 13:53:27Z pavlenko $
 

Modified: trunk/utils/shapeindex/SConscript
===================================================================
--- trunk/utils/shapeindex/SConscript	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/utils/shapeindex/SConscript	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,20 +1,22 @@
-#  This file is part of Mapnik (c++ mapping toolkit)
-#  Copyright (C) 2005 Artem Pavlenko, Jean-Francois Doyon
 #
-#  Mapnik is free software; you can redistribute it and/or
-#  modify it under the terms of the GNU General Public License
-#  as published by the Free Software Foundation; either version 2
-#  of the License, or any later version.
-# 
-#  This program is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-# 
-#  You should have received a copy of the GNU General Public License
-#  along with this program; if not, write to the Free Software
-#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-# 
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
 # $Id$
 
 import glob

Modified: trunk/utils/shapeindex/quadtree.hpp
===================================================================
--- trunk/utils/shapeindex/quadtree.hpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/utils/shapeindex/quadtree.hpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: quadtree.hh 17 2005-03-08 23:58:43Z pavlenko $
 
 #ifndef QUADTREE_HH

Modified: trunk/utils/shapeindex/shapeindex.cpp
===================================================================
--- trunk/utils/shapeindex/shapeindex.cpp	2006-03-31 09:00:10 UTC (rev 221)
+++ trunk/utils/shapeindex/shapeindex.cpp	2006-03-31 10:32:02 UTC (rev 222)
@@ -1,21 +1,24 @@
-/* This file is part of Mapnik (c++ mapping toolkit)
- * Copyright (C) 2005 Artem Pavlenko
+/*****************************************************************************
+ * 
+ * This file is part of Mapnik (c++ mapping toolkit)
  *
- * Mapnik is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or any later version.
+ * Copyright (C) 2006 Artem Pavlenko
  *
- * This program is distributed in the hope that it will be useful,
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
- */
-
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *****************************************************************************/
 //$Id: shapeindex.cc 27 2005-03-30 21:45:40Z pavlenko $
 
 #include "shape.hpp"



