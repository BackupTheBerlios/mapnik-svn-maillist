From pavlenko at berlios.de  Wed Apr  5 10:27:58 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Wed, 5 Apr 2006 10:27:58 +0200
Subject: [Mapnik-svn] r223 - in trunk: include src
Message-ID: <200604050827.k358RwTj001365@sheep.berlios.de>

Author: pavlenko
Date: 2006-04-05 10:27:45 +0200 (Wed, 05 Apr 2006)
New Revision: 223

Modified:
   trunk/include/color.hpp
   trunk/include/layer.hpp
   trunk/include/mapnik.hpp
   trunk/src/layer.cpp
   trunk/src/line_pattern_symbolizer.cpp
   trunk/src/png_reader.cpp
   trunk/src/point_symbolizer.cpp
   trunk/src/polygon_pattern_symbolizer.cpp
   trunk/src/tiff_reader.cpp
Log:
1. validate image reader 
2. open files in binary mode (win32)
 


Modified: trunk/include/color.hpp
===================================================================
--- trunk/include/color.hpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/include/color.hpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -100,11 +100,11 @@
 	}
 
 	inline std::string to_string() const
-	{
+        {
 	    std::stringstream ss;
 	    ss << "rgb (" << red() << ","  << green() << ","  << blue() <<")";
 	    return ss.str();
-	} 
+        } 
     };    
 }
 

Modified: trunk/include/layer.hpp
===================================================================
--- trunk/include/layer.hpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/include/layer.hpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -53,11 +53,9 @@
 	double maxZoom_;
 	bool active_;
 	bool selectable_;
-	
-	std::vector<std::string>  styles_;
-	std::string selection_style_;
-
 	mutable datasource_p ds_;
+	std::vector<std::string>  styles_;
+	std::string selection_style_;	
 	mutable std::vector<boost::shared_ptr<Feature> > selection_;
         
     public:

Modified: trunk/include/mapnik.hpp
===================================================================
--- trunk/include/mapnik.hpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/include/mapnik.hpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -78,8 +78,8 @@
 
 namespace mapnik
 {
-    void save_to_xml(Map const& map,const char* filename);  
-    void load_from_xml(Map & map, const char * filename);
+    void MAPNIK_DECL save_to_xml(Map const& map,const char* filename);  
+    void MAPNIK_DECL load_from_xml(Map & map, const char * filename);
 }
 
 #endif //MAPNIK_HPP

Modified: trunk/src/layer.cpp
===================================================================
--- trunk/src/layer.cpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/src/layer.cpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -85,11 +85,11 @@
         maxZoom_=rhs.maxZoom_;
         active_=rhs.active_;
         selectable_=rhs.selectable_;
-        //ds_=rhs.ds_;
         styles_=rhs.styles_;
+	ds_=rhs.ds_;
 	selection_style_=rhs.selection_style_;
     }
-
+    
     Layer::~Layer() {}
 
     parameters const& Layer::params() const

Modified: trunk/src/line_pattern_symbolizer.cpp
===================================================================
--- trunk/src/line_pattern_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/src/line_pattern_symbolizer.cpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -37,7 +37,8 @@
 	try 
 	{
 	    std::auto_ptr<ImageReader> reader(get_image_reader(type,file));
-	    reader->read(0,0,*pattern_);		
+	    if (reader.get())
+		reader->read(0,0,*pattern_);		
 	} 
 	catch (...) 
 	{

Modified: trunk/src/png_reader.cpp
===================================================================
--- trunk/src/png_reader.cpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/src/png_reader.cpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -31,170 +31,185 @@
     class PngReader : public ImageReader 
     {
     private:
-	std::string fileName_;
-	unsigned width_;
-	unsigned height_;
-	int bit_depth_;
-	int color_type_;
+        std::string fileName_;
+        unsigned width_;
+        unsigned height_;
+        int bit_depth_;
+        int color_type_;
     public:
-	explicit PngReader(const std::string& fileName);
-	~PngReader();
-	unsigned width() const;
-	unsigned height() const;
-	void read(unsigned x,unsigned y,ImageData32& image);	
+        explicit PngReader(const std::string& fileName);
+        ~PngReader();
+        unsigned width() const;
+        unsigned height() const;
+        void read(unsigned x,unsigned y,ImageData32& image);	
     private:
-	PngReader(const PngReader&);	
-	PngReader& operator=(const PngReader&);
-	void init();
+        PngReader(const PngReader&);	
+        PngReader& operator=(const PngReader&);
+        void init();
     };
-    
+
     namespace 
     {
-	ImageReader* createPngReader(const std::string& file)
-	{
-	    return new PngReader(file);
-	}
-	const bool registered = register_image_reader("png",createPngReader);
+        ImageReader* createPngReader(const std::string& file)
+        {
+            return new PngReader(file);
+        }
+        const bool registered = register_image_reader("png",createPngReader);
     }
 
     PngReader::PngReader(const std::string& fileName) 
-	: fileName_(fileName),
+        : fileName_(fileName),
 	  width_(0),
 	  height_(0),
 	  bit_depth_(0),
 	  color_type_(0)
     {
-	try 
-	{
-	    init();
-	} 
-	catch (const ImageReaderException& e) 
-	{
-	    std::clog<<e.what()<<std::endl;
-	    throw;
-	}
+        try 
+        {
+            init();
+        } 
+        catch (const ImageReaderException& e) 
+        {
+            std::clog<<e.what()<<std::endl;
+            throw;
+        }
     }
 
     PngReader::~PngReader() {}
-    
+
+    static void
+    png_read_data(png_structp png_ptr, png_bytep data, png_size_t length)
+    {
+        png_size_t check;
+        check = (png_size_t)fread(data, (png_size_t)1, length,
+				  (FILE *)png_ptr->io_ptr);
+
+        if (check != length)
+        {
+            png_error(png_ptr, "Read Error");
+        }
+    }
+  
+
     void PngReader::init()
     {
-	FILE *fp=fopen(fileName_.c_str(),"r");
-	if (!fp) throw ImageReaderException("cannot open image file "+fileName_);
-	png_byte header[8];
-	memset(header,0,8);
-	fread(header,1,8,fp);
-	int is_png=!png_sig_cmp(header,0,8);
-	if (!is_png)
-	{
-	    fclose(fp);
-	    throw ImageReaderException(fileName_ + " is not a png file");
-	}
+        FILE *fp=fopen(fileName_.c_str(),"rb");
+        if (!fp) throw ImageReaderException("cannot open image file "+fileName_);
+        png_byte header[8];
+        memset(header,0,8);
+        fread(header,1,8,fp);
+        int is_png=!png_sig_cmp(header,0,8);
+        if (!is_png)
+        {
+            fclose(fp);
+            throw ImageReaderException(fileName_ + " is not a png file");
+        }
         png_structp png_ptr = png_create_read_struct
-	    (PNG_LIBPNG_VER_STRING,0,0,0);
-	
-	if (!png_ptr) 
-	{
-	    fclose(fp);
-	    throw ImageReaderException("failed to allocate png_ptr");
-	}
-	png_infop info_ptr = png_create_info_struct(png_ptr);
-	if (!info_ptr)
-	{
-	    png_destroy_read_struct(&png_ptr,0,0);
-	    fclose(fp);
-	    throw ImageReaderException("failed to create info_ptr");
-	}
+            (PNG_LIBPNG_VER_STRING,0,0,0);
 
-	png_init_io(png_ptr, fp);
-	png_set_sig_bytes(png_ptr,8);
-	png_read_info(png_ptr, info_ptr);
+        if (!png_ptr) 
+        {
+            fclose(fp);
+            throw ImageReaderException("failed to allocate png_ptr");
+        }
+        png_infop info_ptr = png_create_info_struct(png_ptr);
+        if (!info_ptr)
+        {
+            png_destroy_read_struct(&png_ptr,0,0);
+            fclose(fp);
+            throw ImageReaderException("failed to create info_ptr");
+        }
 
-	png_uint_32  width, height;
-	png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth_, &color_type_,0,0,0);
-	
-	width_=width;
-	height_=height;
-	
-	std::clog<<"bit_depth="<<bit_depth_<<" color_type="<<color_type_<<std::endl;
-	png_destroy_read_struct(&png_ptr,&info_ptr,0);	
-	fclose(fp);
+        png_set_read_fn(png_ptr, (png_voidp)fp, png_read_data);
+
+        png_set_sig_bytes(png_ptr,8);
+        png_read_info(png_ptr, info_ptr);
+
+        png_uint_32  width, height;
+        png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth_, &color_type_,0,0,0);
+
+        width_=width;
+        height_=height;
+
+        std::clog<<"bit_depth="<<bit_depth_<<" color_type="<<color_type_<<std::endl;
+        png_destroy_read_struct(&png_ptr,&info_ptr,0);	
+        fclose(fp);
     }
-    
+
     unsigned PngReader::width() const 
     {
-	return width_;
+        return width_;
     }
-    
+
     unsigned PngReader::height() const 
     {
-	return height_;
+        return height_;
     }
     
     void PngReader::read(unsigned x0, unsigned y0,ImageData32& image) 
     {
-	FILE *fp=fopen(fileName_.c_str(),"r");
-	if (!fp) throw ImageReaderException("cannot open image file "+fileName_);
-	
+        FILE *fp=fopen(fileName_.c_str(),"rb");
+        if (!fp) throw ImageReaderException("cannot open image file "+fileName_);
+
         png_structp png_ptr = png_create_read_struct
-	    (PNG_LIBPNG_VER_STRING,0,0,0);
-	
-	if (!png_ptr) 
-	{
-	    fclose(fp);
-	    throw ImageReaderException("failed to allocate png_ptr");
-	}
-	
-	png_infop info_ptr = png_create_info_struct(png_ptr);
-	if (!info_ptr)
-	{
-	    png_destroy_read_struct(&png_ptr,0,0);
-	    fclose(fp);
-	    throw ImageReaderException("failed to create info_ptr");
-	}
+            (PNG_LIBPNG_VER_STRING,0,0,0);
 
-	png_init_io(png_ptr, fp);
-	png_read_info(png_ptr, info_ptr);
-	
-	if (color_type_ == PNG_COLOR_TYPE_PALETTE)
-	    png_set_expand(png_ptr);
-	if (color_type_ == PNG_COLOR_TYPE_GRAY && bit_depth_ < 8)
-	    png_set_expand(png_ptr);
-	if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS))
-	    png_set_expand(png_ptr);
-	if (bit_depth_ == 16)
-	    png_set_strip_16(png_ptr);
-	if (color_type_ == PNG_COLOR_TYPE_GRAY ||
-	    color_type_ == PNG_COLOR_TYPE_GRAY_ALPHA)
-	    png_set_gray_to_rgb(png_ptr);
-	
-	// quick hack -- only work in >=libpng 1.2.7
-	png_set_add_alpha(png_ptr,1,1);
- 
-	double gamma;
-	if (png_get_gAMA(png_ptr, info_ptr, &gamma))
-	    png_set_gamma(png_ptr, 2.2, gamma);
+        if (!png_ptr) 
+        {
+            fclose(fp);
+            throw ImageReaderException("failed to allocate png_ptr");
+        }
 
-	png_read_update_info(png_ptr, info_ptr);
-	
-	//START read image rows
-	unsigned w=std::min((unsigned)image.width(),width_);
-	unsigned h=std::min((unsigned)image.height(),height_);
-	
-	unsigned rowbytes=png_get_rowbytes(png_ptr, info_ptr);
-	unsigned char* row= new unsigned char[rowbytes];
-	for (unsigned i=0;i<height_;++i)
-	{
-	    png_read_row(png_ptr,row,0);
-	    if (i>=y0 && i<h) 
-	    {
-		image.setRow(i-y0,(unsigned*) &row[x0],w);
-	    } 
-	}
-	//END
-	delete [] row;
-	png_read_end(png_ptr,0);
-	png_destroy_read_struct(&png_ptr, &info_ptr,0);
-	fclose(fp);
+        png_infop info_ptr = png_create_info_struct(png_ptr);
+        if (!info_ptr)
+        {
+            png_destroy_read_struct(&png_ptr,0,0);
+            fclose(fp);
+            throw ImageReaderException("failed to create info_ptr");
+        }
+
+        png_set_read_fn(png_ptr, (png_voidp)fp, png_read_data);
+        png_read_info(png_ptr, info_ptr);
+
+        if (color_type_ == PNG_COLOR_TYPE_PALETTE)
+            png_set_expand(png_ptr);
+        if (color_type_ == PNG_COLOR_TYPE_GRAY && bit_depth_ < 8)
+            png_set_expand(png_ptr);
+        if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS))
+            png_set_expand(png_ptr);
+        if (bit_depth_ == 16)
+            png_set_strip_16(png_ptr);
+        if (color_type_ == PNG_COLOR_TYPE_GRAY ||
+            color_type_ == PNG_COLOR_TYPE_GRAY_ALPHA)
+            png_set_gray_to_rgb(png_ptr);
+
+        // quick hack -- only work in >=libpng 1.2.7
+        png_set_add_alpha(png_ptr,1,1);
+
+        double gamma;
+        if (png_get_gAMA(png_ptr, info_ptr, &gamma))
+            png_set_gamma(png_ptr, 2.2, gamma);
+
+        png_read_update_info(png_ptr, info_ptr);
+
+        //START read image rows
+        unsigned w=std::min((unsigned)image.width(),width_);
+        unsigned h=std::min((unsigned)image.height(),height_);
+
+        unsigned rowbytes=png_get_rowbytes(png_ptr, info_ptr);
+        unsigned char* row= new unsigned char[rowbytes];
+        for (unsigned i=0;i<height_;++i)
+        {
+            png_read_row(png_ptr,row,0);
+            if (i>=y0 && i<h) 
+            {
+                image.setRow(i-y0,(unsigned*) &row[x0],w);
+            } 
+        }
+        //END
+        delete [] row;
+        png_read_end(png_ptr,0);
+        png_destroy_read_struct(&png_ptr, &info_ptr,0);
+        fclose(fp);
     }
 }

Modified: trunk/src/point_symbolizer.cpp
===================================================================
--- trunk/src/point_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/src/point_symbolizer.cpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -36,7 +36,10 @@
 	try 
 	{
 	    std::auto_ptr<ImageReader> reader(get_image_reader(type,file));
-	    reader->read(0,0,*symbol_);		
+	    if (reader.get())
+	    {
+		reader->read(0,0,*symbol_);		
+	    }
 	} 
 	catch (...) 
 	{

Modified: trunk/src/polygon_pattern_symbolizer.cpp
===================================================================
--- trunk/src/polygon_pattern_symbolizer.cpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/src/polygon_pattern_symbolizer.cpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -36,7 +36,8 @@
 	try 
 	{
 	    std::auto_ptr<ImageReader> reader(get_image_reader(type,file));
-	    reader->read(0,0,*pattern_);		
+	    if (reader.get())
+		reader->read(0,0,*pattern_);		
 	} 
 	catch (...) 
 	{

Modified: trunk/src/tiff_reader.cpp
===================================================================
--- trunk/src/tiff_reader.cpp	2006-03-31 10:32:02 UTC (rev 222)
+++ trunk/src/tiff_reader.cpp	2006-04-05 08:27:45 UTC (rev 223)
@@ -29,9 +29,9 @@
 namespace mapnik 
 {
 
-	using std::min;
-	using std::max;
-	
+    using std::min;
+    using std::max;
+
     class TiffReader : public ImageReader
     {
     private:
@@ -44,11 +44,11 @@
         int tile_height_;
     public:
         enum
-	{
-	    generic=1,
-	    stripped,
-	    tiled
-	};
+	    {
+		generic=1,
+		stripped,
+		tiled
+	    };
         explicit TiffReader(const std::string& file_name);
         virtual ~TiffReader();
         unsigned width() const;
@@ -65,16 +65,16 @@
 
     namespace
     {
-	ImageReader* createTiffReader(const std::string& file)
-	{
-	    return new TiffReader(file);
-	}
+        ImageReader* createTiffReader(const std::string& file)
+        {
+            return new TiffReader(file);
+        }
 
-	const bool registered = register_image_reader("tiff",createTiffReader);
+        const bool registered = register_image_reader("tiff",createTiffReader);
     }
 
     TiffReader::TiffReader(const std::string& file_name)
-	: file_name_(file_name),
+        : file_name_(file_name),
 	  read_method_(generic),
 	  width_(0),
 	  height_(0),
@@ -82,177 +82,177 @@
 	  tile_width_(0),
 	  tile_height_(0)
     {
-	try
-	{
-	    init();
-	}
-	catch (ImageReaderException& ex)
-	{
-	    std::clog<<ex.what()<<std::endl;
-	    throw;
-	}
+        try
+        {
+            init();
+        }
+        catch (ImageReaderException& ex)
+        {
+            std::clog<<ex.what()<<std::endl;
+            throw;
+        }
     }
 
 
     void TiffReader::init()
     {
-	TIFF* tif = TIFFOpen(file_name_.c_str(), "r");
-	if (!tif) throw ImageReaderException("cannot open "+file_name_);
-	char msg[1024];
+        TIFF* tif = TIFFOpen(file_name_.c_str(), "rb");
+        if (!tif) throw ImageReaderException("cannot open "+file_name_);
+        char msg[1024];
 
-	if (TIFFRGBAImageOK(tif,msg))
-	{
-	    TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &width_);
-	    TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &height_);
-	    if (TIFFIsTiled(tif))
-	    {
-		TIFFGetField(tif, TIFFTAG_TILEWIDTH, &tile_width_);
-		TIFFGetField(tif, TIFFTAG_TILELENGTH, &tile_height_);
-		read_method_=tiled;
-	    }
-	    else if (TIFFGetField(tif,TIFFTAG_ROWSPERSTRIP,&rows_per_strip_)!=0)
-	    {
-		read_method_=stripped;
-	    }
-	    TIFFClose(tif);
-	}
-	else
-	{
-	    TIFFClose(tif);
-	    throw ImageReaderException(msg);
-	}
+        if (TIFFRGBAImageOK(tif,msg))
+        {
+            TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &width_);
+            TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &height_);
+            if (TIFFIsTiled(tif))
+            {
+                TIFFGetField(tif, TIFFTAG_TILEWIDTH, &tile_width_);
+                TIFFGetField(tif, TIFFTAG_TILELENGTH, &tile_height_);
+                read_method_=tiled;
+            }
+            else if (TIFFGetField(tif,TIFFTAG_ROWSPERSTRIP,&rows_per_strip_)!=0)
+            {
+                read_method_=stripped;
+            }
+            TIFFClose(tif);
+        }
+        else
+        {
+            TIFFClose(tif);
+            throw ImageReaderException(msg);
+        }
     }
 
 
     TiffReader::~TiffReader()
     {
-	//
+        //
     }
 
 
     unsigned TiffReader::width() const
     {
-	return width_;
+        return width_;
     }
 
 
     unsigned TiffReader::height() const
     {
-	return height_;
+        return height_;
     }
 
 
     void TiffReader::read(unsigned x,unsigned y,ImageData32& image)
     {    
-	if (read_method_==stripped)
-	{
-	    read_stripped(x,y,image);
-	}
-	else if (read_method_==tiled)
-	{
-	    read_tiled(x,y,image);
-	}
-	else
-	{
-	    read_generic(x,y,image);
-	}
+        if (read_method_==stripped)
+        {
+            read_stripped(x,y,image);
+        }
+        else if (read_method_==tiled)
+        {
+            read_tiled(x,y,image);
+        }
+        else
+        {
+            read_generic(x,y,image);
+        }
     }
 
 
     void TiffReader::read_generic(unsigned x,unsigned y,ImageData32& image)
     {
-	TIFF* tif = TIFFOpen(file_name_.c_str(), "r");
-	if (tif)
-	{
-	    std::clog<<"TODO:tiff is not stripped or tiled\n";
-	    TIFFClose(tif);
-	}
+        TIFF* tif = TIFFOpen(file_name_.c_str(), "rb");
+        if (tif)
+        {
+            std::clog<<"TODO:tiff is not stripped or tiled\n";
+            TIFFClose(tif);
+        }
     }
 
 
     void TiffReader::read_tiled(unsigned x0,unsigned y0,ImageData32& image)
     {
-	TIFF* tif=TIFFOpen(file_name_.c_str(), "r");
-	if (tif)
-	{
-	    uint32* buf = (uint32*)_TIFFmalloc(tile_width_*tile_height_*sizeof(uint32));
-	    int width=image.width();
-	    int height=image.height();
+        TIFF* tif=TIFFOpen(file_name_.c_str(), "rb");
+        if (tif)
+        {
+            uint32* buf = (uint32*)_TIFFmalloc(tile_width_*tile_height_*sizeof(uint32));
+            int width=image.width();
+            int height=image.height();
 
-	    int start_y=(y0/tile_height_)*tile_height_;
-	    int end_y=((y0+height)/tile_height_+1)*tile_height_;
+            int start_y=(y0/tile_height_)*tile_height_;
+            int end_y=((y0+height)/tile_height_+1)*tile_height_;
 
-	    int start_x=(x0/tile_width_)*tile_width_;
-	    int end_x=((x0+width)/tile_width_+1)*tile_width_;
-	    int row,tx0,tx1,ty0,ty1;
+            int start_x=(x0/tile_width_)*tile_width_;
+            int end_x=((x0+width)/tile_width_+1)*tile_width_;
+            int row,tx0,tx1,ty0,ty1;
 
-	    for (int y=start_y;y<end_y;y+=tile_height_)
-	    {
-			ty0 = max(y0,(unsigned)y) - y;
-			ty1 = min(height+y0,(unsigned)(y+tile_height_)) - y;
+            for (int y=start_y;y<end_y;y+=tile_height_)
+            {
+                ty0 = max(y0,(unsigned)y) - y;
+                ty1 = min(height+y0,(unsigned)(y+tile_height_)) - y;
 
-			int n0=tile_height_-ty1;
-			int n1=tile_height_-ty0-1;
-	        
-			for (int x=start_x;x<end_x;x+=tile_width_)
-			{
+                int n0=tile_height_-ty1;
+                int n1=tile_height_-ty0-1;
 
-				if (!TIFFReadRGBATile(tif,x,y,buf)) break;
+                for (int x=start_x;x<end_x;x+=tile_width_)
+                {
 
-				tx0=max(x0,(unsigned)x);
-				tx1=min(width+x0,(unsigned)(x+tile_width_));
-				row=y+ty0-y0;
-				for (int n=n1;n>=n0;--n)
-				{
-					image.setRow(row,tx0-x0,tx1-x0,(const unsigned*)&buf[n*tile_width_+tx0-x]);
-					++row;
-				}
-			}
-	    }
-	    _TIFFfree(buf);
-	    TIFFClose(tif);
-	}
+                    if (!TIFFReadRGBATile(tif,x,y,buf)) break;
+
+                    tx0=max(x0,(unsigned)x);
+                    tx1=min(width+x0,(unsigned)(x+tile_width_));
+                    row=y+ty0-y0;
+                    for (int n=n1;n>=n0;--n)
+                    {
+                        image.setRow(row,tx0-x0,tx1-x0,(const unsigned*)&buf[n*tile_width_+tx0-x]);
+                        ++row;
+                    }
+                }
+            }
+            _TIFFfree(buf);
+            TIFFClose(tif);
+        }
     }
 
 
     void TiffReader::read_stripped(unsigned x0,unsigned y0,ImageData32& image)
     {
-	TIFF* tif = TIFFOpen(file_name_.c_str(), "r");
-	if (tif)
-	{
-	    uint32* buf = (uint32*)_TIFFmalloc(width_*rows_per_strip_*sizeof(uint32));
+        TIFF* tif = TIFFOpen(file_name_.c_str(), "rb");
+        if (tif)
+        {
+            uint32* buf = (uint32*)_TIFFmalloc(width_*rows_per_strip_*sizeof(uint32));
 
-	    int width=image.width();
-	    int height=image.height();
-   
-	    unsigned start_y=(y0/rows_per_strip_)*rows_per_strip_;
-	    unsigned end_y=((y0+height)/rows_per_strip_+1)*rows_per_strip_;
-	    bool laststrip=((unsigned)end_y > height_)?true:false;
-	    int row,tx0,tx1,ty0,ty1;
+            int width=image.width();
+            int height=image.height();
 
-	    tx0=x0;
-	    tx1=min(width+x0,(unsigned)width_);
+            unsigned start_y=(y0/rows_per_strip_)*rows_per_strip_;
+            unsigned end_y=((y0+height)/rows_per_strip_+1)*rows_per_strip_;
+            bool laststrip=((unsigned)end_y > height_)?true:false;
+            int row,tx0,tx1,ty0,ty1;
 
-	    for (unsigned y=start_y; y < end_y; y+=rows_per_strip_)
-	    {
-		ty0 = max(y0,y)-y;
-		ty1 = min(height+y0,y+rows_per_strip_)-y;
+            tx0=x0;
+            tx1=min(width+x0,(unsigned)width_);
 
-		if (!TIFFReadRGBAStrip(tif,y,buf)) break;
-		
-		row=y+ty0-y0;
-	
-		int n0=laststrip ? 0:(rows_per_strip_-ty1);
-		int n1=laststrip ? (ty1-ty0-1):(rows_per_strip_-ty0-1);
-		for (int n=n1;n>=n0;--n)
-		{
-		    image.setRow(row,tx0-x0,tx1-x0,(const unsigned*)&buf[n*width_+tx0]);
-		    ++row;
-		}
-	    }
-	    _TIFFfree(buf);
-	    TIFFClose(tif);
-	}
+            for (unsigned y=start_y; y < end_y; y+=rows_per_strip_)
+            {
+                ty0 = max(y0,y)-y;
+                ty1 = min(height+y0,y+rows_per_strip_)-y;
+
+                if (!TIFFReadRGBAStrip(tif,y,buf)) break;
+
+                row=y+ty0-y0;
+
+                int n0=laststrip ? 0:(rows_per_strip_-ty1);
+                int n1=laststrip ? (ty1-ty0-1):(rows_per_strip_-ty0-1);
+                for (int n=n1;n>=n0;--n)
+                {
+                    image.setRow(row,tx0-x0,tx1-x0,(const unsigned*)&buf[n*width_+tx0]);
+                    ++row;
+                }
+            }
+            _TIFFfree(buf);
+            TIFFClose(tif);
+        }
     }
 }
 



From jdoyon at berlios.de  Fri Apr  7 01:19:40 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Fri, 7 Apr 2006 01:19:40 +0200
Subject: [Mapnik-svn] r224 - in trunk/demo: data python
Message-ID: <200604062319.k36NJe2f031403@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-07 01:18:44 +0200 (Fri, 07 Apr 2006)
New Revision: 224

Added:
   trunk/demo/data/boundaries.prj
   trunk/demo/data/boundaries.sbn
   trunk/demo/data/boundaries.sbx
   trunk/demo/data/boundaries.shp.xml
   trunk/demo/data/boundaries_l.prj
   trunk/demo/data/boundaries_l.sbn
   trunk/demo/data/boundaries_l.sbx
   trunk/demo/data/boundaries_l.shp.xml
   trunk/demo/data/new/
   trunk/demo/data/ontdrainage.prj
   trunk/demo/data/ontdrainage.sbn
   trunk/demo/data/ontdrainage.sbx
   trunk/demo/data/ontdrainage.shp.xml
   trunk/demo/data/popplaces.prj
   trunk/demo/data/popplaces.sbn
   trunk/demo/data/popplaces.sbx
   trunk/demo/data/popplaces.shp.xml
   trunk/demo/data/qcdrainage.prj
   trunk/demo/data/qcdrainage.sbn
   trunk/demo/data/qcdrainage.sbx
   trunk/demo/data/qcdrainage.shp.xml
   trunk/demo/data/roads.prj
   trunk/demo/data/roads.sbn
   trunk/demo/data/roads.sbx
   trunk/demo/data/roads.shp.xml
Modified:
   trunk/demo/data/boundaries.dbf
   trunk/demo/data/boundaries.shp
   trunk/demo/data/boundaries.shx
   trunk/demo/data/boundaries_l.dbf
   trunk/demo/data/boundaries_l.shp
   trunk/demo/data/boundaries_l.shx
   trunk/demo/data/ontdrainage.dbf
   trunk/demo/data/ontdrainage.shp
   trunk/demo/data/ontdrainage.shx
   trunk/demo/data/popplaces.dbf
   trunk/demo/data/popplaces.shp
   trunk/demo/data/popplaces.shx
   trunk/demo/data/qcdrainage.dbf
   trunk/demo/data/qcdrainage.shp
   trunk/demo/data/qcdrainage.shx
   trunk/demo/data/roads.dbf
   trunk/demo/data/roads.shp
   trunk/demo/data/roads.shx
   trunk/demo/python/rundemo.py
Log:
The data has been transformed to a slightly different projection (EPSG:42304).  Also full files are included for ESRI tools, in case someone wants to manipulate it further.

Modified: trunk/demo/data/boundaries.dbf
===================================================================
(Binary files differ)

Added: trunk/demo/data/boundaries.prj
===================================================================
--- trunk/demo/data/boundaries.prj	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/boundaries.prj	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1 @@
+PROJCS["Atlas of Canada Lambert Conformal Conic",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-95.0],PARAMETER["Standard_Parallel_1",49.0],PARAMETER["Standard_Parallel_2",77.0],PARAMETER["Latitude_Of_Origin",49.0],UNIT["Meter",1.0]]
\ No newline at end of file

Added: trunk/demo/data/boundaries.sbn
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries.sbn
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/boundaries.sbx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries.sbx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: trunk/demo/data/boundaries.shp
===================================================================
(Binary files differ)

Added: trunk/demo/data/boundaries.shp.xml
===================================================================
--- trunk/demo/data/boundaries.shp.xml	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/boundaries.shp.xml	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1,3 @@
+<?xml version="1.0"?>
+<!--<!DOCTYPE metadata SYSTEM "http://www.esri.com/metadata/esriprof80.dtd">-->
+<metadata xml:lang="en"><Esri><CreaDate>20060405</CreaDate><CreaTime>20435800</CreaTime><SyncOnce>TRUE</SyncOnce><DataProperties><lineage><Process Name="Project_1" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Project" Date="20060405" Time="202939">Project Z:\mapnik-trunk\demo\data\boundaries.shp Z:\mapnik-trunk\demo\data\boundaries_Project.shp PROJCS['Canada_Lambert_Conformal_Conic',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Lambert_Conformal_Conic'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-96.0],PARAMETER['Standard_Parallel_1',50.0],PARAMETER['Standard_Parallel_2',70.0],PARAMETER['Latitude_Of_Origin',40.0],UNIT['Meter',1.0]] #</Process><Process Name="Rename_3" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" !
 Date="20060405" Time="203122">Rename Z:\mapnik-trunk\demo\data\boundaries_Project.shp Z:\mapnik-trunk\demo\data\boundaries.shp ShapeFile</Process><Process Name="Rename_27" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" Date="20060405" Time="204652">Rename Z:\mapnik-trunk\demo\data\boundaries_shp.shp Z:\mapnik-trunk\demo\data\boundaries.shp ShapeFile</Process></lineage></DataProperties><MetaID>{11E7D7C0-9F4D-4BB6-BFF8-F3FE77C30F38}</MetaID></Esri><idinfo><citation><citeinfo><onlink Sync="TRUE"></onlink></citeinfo></citation></idinfo><distInfo><distributor><distorTran><onLineSrc><linkage Sync="TRUE">file://</linkage><protocol Sync="TRUE">Local Area Network</protocol></onLineSrc></distorTran></distributor></distInfo><dataqual><lineage><procstep><procdesc Sync="TRUE">Dataset copied.</procdesc><srcused Sync="TRUE"></srcused><date Sync="TRUE">20060405</date><time Sync="TRUE">20435800</time></procstep></lineage></dataqual></metadata>

Modified: trunk/demo/data/boundaries.shx
===================================================================
(Binary files differ)

Modified: trunk/demo/data/boundaries_l.dbf
===================================================================
(Binary files differ)

Added: trunk/demo/data/boundaries_l.prj
===================================================================
--- trunk/demo/data/boundaries_l.prj	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/boundaries_l.prj	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1 @@
+PROJCS["Atlas of Canada Lambert Conformal Conic",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-95.0],PARAMETER["Standard_Parallel_1",49.0],PARAMETER["Standard_Parallel_2",77.0],PARAMETER["Latitude_Of_Origin",49.0],UNIT["Meter",1.0]]
\ No newline at end of file

Added: trunk/demo/data/boundaries_l.sbn
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries_l.sbn
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/boundaries_l.sbx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/boundaries_l.sbx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: trunk/demo/data/boundaries_l.shp
===================================================================
(Binary files differ)

Added: trunk/demo/data/boundaries_l.shp.xml
===================================================================
--- trunk/demo/data/boundaries_l.shp.xml	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/boundaries_l.shp.xml	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1,3 @@
+<?xml version="1.0"?>
+<!--<!DOCTYPE metadata SYSTEM "http://www.esri.com/metadata/esriprof80.dtd">-->
+<metadata xml:lang="en"><Esri><CreaDate>20060405</CreaDate><CreaTime>20435900</CreaTime><SyncOnce>TRUE</SyncOnce><DataProperties><lineage><Process Name="Project_4" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Project" Date="20060405" Time="203244">Project Z:\mapnik-trunk\demo\data\boundaries_l.shp Z:\mapnik-trunk\demo\data\boundaries_l_Project.shp PROJCS['Canada_Lambert_Conformal_Conic',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Lambert_Conformal_Conic'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-96.0],PARAMETER['Standard_Parallel_1',50.0],PARAMETER['Standard_Parallel_2',70.0],PARAMETER['Latitude_Of_Origin',40.0],UNIT['Meter',1.0]] #</Process><Process Name="Rename_6" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rena!
 me" Date="20060405" Time="203309">Rename Z:\mapnik-trunk\demo\data\boundaries_l_Project.shp Z:\mapnik-trunk\demo\data\boundaries_l.shp ShapeFile</Process><Process Name="Rename_26" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" Date="20060405" Time="204641">Rename Z:\mapnik-trunk\demo\data\boundaries_l_shp.shp Z:\mapnik-trunk\demo\data\boundaries_l.shp ShapeFile</Process></lineage></DataProperties><MetaID>{6498D899-968E-419C-96BC-4A6039E0D319}</MetaID></Esri><idinfo><citation><citeinfo><onlink Sync="TRUE"></onlink></citeinfo></citation></idinfo><distInfo><distributor><distorTran><onLineSrc><linkage Sync="TRUE">file://</linkage><protocol Sync="TRUE">Local Area Network</protocol></onLineSrc></distorTran></distributor></distInfo><dataqual><lineage><procstep><procdesc Sync="TRUE">Dataset copied.</procdesc><srcused Sync="TRUE"></srcused><date Sync="TRUE">20060405</date><time Sync="TRUE">20435900</time></procstep></lineage></dataqual></m!
 etadata>

Modified: trunk/demo/data/boundaries_l.shx
===================================================================
(Binary files differ)

Modified: trunk/demo/data/ontdrainage.dbf
===================================================================
(Binary files differ)

Added: trunk/demo/data/ontdrainage.prj
===================================================================
--- trunk/demo/data/ontdrainage.prj	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/ontdrainage.prj	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1 @@
+PROJCS["Atlas of Canada Lambert Conformal Conic",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-95.0],PARAMETER["Standard_Parallel_1",49.0],PARAMETER["Standard_Parallel_2",77.0],PARAMETER["Latitude_Of_Origin",49.0],UNIT["Meter",1.0]]
\ No newline at end of file

Added: trunk/demo/data/ontdrainage.sbn
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/ontdrainage.sbn
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/ontdrainage.sbx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/ontdrainage.sbx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: trunk/demo/data/ontdrainage.shp
===================================================================
(Binary files differ)

Added: trunk/demo/data/ontdrainage.shp.xml
===================================================================
--- trunk/demo/data/ontdrainage.shp.xml	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/ontdrainage.shp.xml	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1,3 @@
+<?xml version="1.0"?>
+<!--<!DOCTYPE metadata SYSTEM "http://www.esri.com/metadata/esriprof80.dtd">-->
+<metadata xml:lang="en"><Esri><CreaDate>20060405</CreaDate><CreaTime>20440100</CreaTime><SyncOnce>TRUE</SyncOnce><DataProperties><lineage><Process Name="Project_7" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Project" Date="20060405" Time="203436">Project Z:\mapnik-trunk\demo\data\ontdrainage.shp Z:\mapnik-trunk\demo\data\ontdrainage_Project.shp PROJCS['Canada_Lambert_Conformal_Conic',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Lambert_Conformal_Conic'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-96.0],PARAMETER['Standard_Parallel_1',50.0],PARAMETER['Standard_Parallel_2',70.0],PARAMETER['Latitude_Of_Origin',40.0],UNIT['Meter',1.0]] #</Process><Process Name="Rename_9" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename!
 " Date="20060405" Time="203518">Rename Z:\mapnik-trunk\demo\data\ontdrainage_Project.shp Z:\mapnik-trunk\demo\data\ontdrainage.shp ShapeFile</Process><Process Name="Rename_28" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" Date="20060405" Time="204707">Rename Z:\mapnik-trunk\demo\data\ontdrainage_shp.shp Z:\mapnik-trunk\demo\data\ontdrainage.shp ShapeFile</Process></lineage></DataProperties><MetaID>{FB3824F8-C9DD-41CD-950D-7CDE493F1C80}</MetaID></Esri><idinfo><citation><citeinfo><onlink Sync="TRUE"></onlink></citeinfo></citation></idinfo><distInfo><distributor><distorTran><onLineSrc><linkage Sync="TRUE">file://</linkage><protocol Sync="TRUE">Local Area Network</protocol></onLineSrc></distorTran></distributor></distInfo><dataqual><lineage><procstep><procdesc Sync="TRUE">Dataset copied.</procdesc><srcused Sync="TRUE"></srcused><date Sync="TRUE">20060405</date><time Sync="TRUE">20440100</time></procstep></lineage></dataqual></metadat!
 a>

Modified: trunk/demo/data/ontdrainage.shx
===================================================================
(Binary files differ)

Modified: trunk/demo/data/popplaces.dbf
===================================================================
(Binary files differ)

Added: trunk/demo/data/popplaces.prj
===================================================================
--- trunk/demo/data/popplaces.prj	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/popplaces.prj	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1 @@
+PROJCS["Atlas of Canada Lambert Conformal Conic",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-95.0],PARAMETER["Standard_Parallel_1",49.0],PARAMETER["Standard_Parallel_2",77.0],PARAMETER["Latitude_Of_Origin",49.0],UNIT["Meter",1.0]]
\ No newline at end of file

Added: trunk/demo/data/popplaces.sbn
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/popplaces.sbn
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/popplaces.sbx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/popplaces.sbx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: trunk/demo/data/popplaces.shp
===================================================================
(Binary files differ)

Added: trunk/demo/data/popplaces.shp.xml
===================================================================
--- trunk/demo/data/popplaces.shp.xml	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/popplaces.shp.xml	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1,3 @@
+<?xml version="1.0"?>
+<!--<!DOCTYPE metadata SYSTEM "http://www.esri.com/metadata/esriprof80.dtd">-->
+<metadata xml:lang="en"><Esri><CreaDate>20060405</CreaDate><CreaTime>20440200</CreaTime><SyncOnce>TRUE</SyncOnce><DataProperties><lineage><Process Name="Project_10" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Project" Date="20060405" Time="203711">Project Z:\mapnik-trunk\demo\data\popplaces.shp Z:\mapnik-trunk\demo\data\popplaces_Project.shp PROJCS['Canada_Lambert_Conformal_Conic',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Lambert_Conformal_Conic'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-96.0],PARAMETER['Standard_Parallel_1',50.0],PARAMETER['Standard_Parallel_2',70.0],PARAMETER['Latitude_Of_Origin',40.0],UNIT['Meter',1.0]] #</Process><Process Name="Rename_12" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" !
 Date="20060405" Time="203732">Rename Z:\mapnik-trunk\demo\data\popplaces_Project.shp Z:\mapnik-trunk\demo\data\popplaces.shp ShapeFile</Process><Process Name="Rename_29" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" Date="20060405" Time="204718">Rename Z:\mapnik-trunk\demo\data\popplaces_shp.shp Z:\mapnik-trunk\demo\data\popplaces.shp ShapeFile</Process></lineage></DataProperties><MetaID>{976BB2B2-C17F-4944-BE7B-C454E656918D}</MetaID></Esri><idinfo><citation><citeinfo><onlink Sync="TRUE"></onlink></citeinfo></citation></idinfo><distInfo><distributor><distorTran><onLineSrc><linkage Sync="TRUE">file://</linkage><protocol Sync="TRUE">Local Area Network</protocol></onLineSrc></distorTran></distributor></distInfo><dataqual><lineage><procstep><procdesc Sync="TRUE">Dataset copied.</procdesc><srcused Sync="TRUE"></srcused><date Sync="TRUE">20060405</date><time Sync="TRUE">20440200</time></procstep></lineage></dataqual></metadata>

Modified: trunk/demo/data/popplaces.shx
===================================================================
(Binary files differ)

Modified: trunk/demo/data/qcdrainage.dbf
===================================================================
(Binary files differ)

Added: trunk/demo/data/qcdrainage.prj
===================================================================
--- trunk/demo/data/qcdrainage.prj	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/qcdrainage.prj	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1 @@
+PROJCS["Atlas of Canada Lambert Conformal Conic",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-95.0],PARAMETER["Standard_Parallel_1",49.0],PARAMETER["Standard_Parallel_2",77.0],PARAMETER["Latitude_Of_Origin",49.0],UNIT["Meter",1.0]]
\ No newline at end of file

Added: trunk/demo/data/qcdrainage.sbn
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/qcdrainage.sbn
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/qcdrainage.sbx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/qcdrainage.sbx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: trunk/demo/data/qcdrainage.shp
===================================================================
(Binary files differ)

Added: trunk/demo/data/qcdrainage.shp.xml
===================================================================
--- trunk/demo/data/qcdrainage.shp.xml	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/qcdrainage.shp.xml	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1,3 @@
+<?xml version="1.0"?>
+<!--<!DOCTYPE metadata SYSTEM "http://www.esri.com/metadata/esriprof80.dtd">-->
+<metadata xml:lang="en"><Esri><CreaDate>20060405</CreaDate><CreaTime>20440300</CreaTime><SyncOnce>TRUE</SyncOnce><DataProperties><lineage><Process Name="Project_13" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Project" Date="20060405" Time="203819">Project Z:\mapnik-trunk\demo\data\qcdrainage.shp Z:\mapnik-trunk\demo\data\qcdrainage_Project.shp PROJCS['Canada_Lambert_Conformal_Conic',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Lambert_Conformal_Conic'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-96.0],PARAMETER['Standard_Parallel_1',50.0],PARAMETER['Standard_Parallel_2',70.0],PARAMETER['Latitude_Of_Origin',40.0],UNIT['Meter',1.0]] #</Process><Process Name="Rename_15" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename!
 " Date="20060405" Time="203837">Rename Z:\mapnik-trunk\demo\data\qcdrainage_Project.shp Z:\mapnik-trunk\demo\data\qcdrainage.shp ShapeFile</Process><Process Name="Rename_30" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" Date="20060405" Time="204729">Rename Z:\mapnik-trunk\demo\data\qcdrainage_shp.shp Z:\mapnik-trunk\demo\data\qcdrainage.shp ShapeFile</Process></lineage></DataProperties><MetaID>{4C6B0852-DD15-4FB1-828C-E3FE1F5083FB}</MetaID></Esri><idinfo><citation><citeinfo><onlink Sync="TRUE"></onlink></citeinfo></citation></idinfo><distInfo><distributor><distorTran><onLineSrc><linkage Sync="TRUE">file://</linkage><protocol Sync="TRUE">Local Area Network</protocol></onLineSrc></distorTran></distributor></distInfo><dataqual><lineage><procstep><procdesc Sync="TRUE">Dataset copied.</procdesc><srcused Sync="TRUE"></srcused><date Sync="TRUE">20060405</date><time Sync="TRUE">20440300</time></procstep></lineage></dataqual></metadata>

Modified: trunk/demo/data/qcdrainage.shx
===================================================================
(Binary files differ)

Modified: trunk/demo/data/roads.dbf
===================================================================
(Binary files differ)

Added: trunk/demo/data/roads.prj
===================================================================
--- trunk/demo/data/roads.prj	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/roads.prj	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1 @@
+PROJCS["Atlas of Canada Lambert Conformal Conic",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Lambert_Conformal_Conic"],PARAMETER["False_Easting",0.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-95.0],PARAMETER["Standard_Parallel_1",49.0],PARAMETER["Standard_Parallel_2",77.0],PARAMETER["Latitude_Of_Origin",49.0],UNIT["Meter",1.0]]
\ No newline at end of file

Added: trunk/demo/data/roads.sbn
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/roads.sbn
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/demo/data/roads.sbx
===================================================================
(Binary files differ)


Property changes on: trunk/demo/data/roads.sbx
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: trunk/demo/data/roads.shp
===================================================================
(Binary files differ)

Added: trunk/demo/data/roads.shp.xml
===================================================================
--- trunk/demo/data/roads.shp.xml	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/data/roads.shp.xml	2006-04-06 23:18:44 UTC (rev 224)
@@ -0,0 +1,3 @@
+<?xml version="1.0"?>
+<!--<!DOCTYPE metadata SYSTEM "http://www.esri.com/metadata/esriprof80.dtd">-->
+<metadata xml:lang="en"><Esri><CreaDate>20060405</CreaDate><CreaTime>20440600</CreaTime><SyncOnce>TRUE</SyncOnce><DataProperties><lineage><Process Name="Project_16" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Project" Date="20060405" Time="203859">Project Z:\mapnik-trunk\demo\data\roads.shp Z:\mapnik-trunk\demo\data\roads_Project.shp PROJCS['Canada_Lambert_Conformal_Conic',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Lambert_Conformal_Conic'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-96.0],PARAMETER['Standard_Parallel_1',50.0],PARAMETER['Standard_Parallel_2',70.0],PARAMETER['Latitude_Of_Origin',40.0],UNIT['Meter',1.0]] #</Process><Process Name="Rename_18" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" Date="20!
 060405" Time="203920">Rename Z:\mapnik-trunk\demo\data\roads_Project.shp Z:\mapnik-trunk\demo\data\roads.shp ShapeFile</Process><Process Name="Rename_31" ToolSource="C:\Program Files\ArcGIS\ArcToolbox\Toolboxes\Data Management Tools.tbx\Rename" Date="20060405" Time="204740">Rename Z:\mapnik-trunk\demo\data\roads_shp.shp Z:\mapnik-trunk\demo\data\roads.shp ShapeFile</Process></lineage></DataProperties><MetaID>{8D5C6277-B191-49E2-BF58-09F1C9803B91}</MetaID></Esri><idinfo><citation><citeinfo><onlink Sync="TRUE"></onlink></citeinfo></citation></idinfo><distInfo><distributor><distorTran><onLineSrc><linkage Sync="TRUE">file://</linkage><protocol Sync="TRUE">Local Area Network</protocol></onLineSrc></distorTran></distributor></distInfo><dataqual><lineage><procstep><procdesc Sync="TRUE">Dataset copied.</procdesc><srcused Sync="TRUE"></srcused><date Sync="TRUE">20060405</date><time Sync="TRUE">20440600</time></procstep></lineage></dataqual></metadata>

Modified: trunk/demo/data/roads.shx
===================================================================
(Binary files differ)

Modified: trunk/demo/python/rundemo.py
===================================================================
--- trunk/demo/python/rundemo.py	2006-04-05 08:27:45 UTC (rev 223)
+++ trunk/demo/python/rundemo.py	2006-04-06 23:18:44 UTC (rev 224)
@@ -288,7 +288,7 @@
 
 # Set the initial extent of the map.
 
-m.zoom_to_box(Envelope(7622019.99659767, 2966323.17001496, 7909470.44644348, 2755360.15422466))
+m.zoom_to_box(Envelope(1405120.04127408,-247003.813399447,1706357.31328276,-25098.593149577))
 
 # Render two maps, one PNG, one JPEG.
 



From jdoyon at berlios.de  Sat Apr  8 08:19:14 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Sat, 8 Apr 2006 08:19:14 +0200
Subject: [Mapnik-svn] r225 - in trunk/bindings/python/mapnik: . ogcserver
Message-ID: <200604080619.k386JEHd001812@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-08 08:18:50 +0200 (Sat, 08 Apr 2006)
New Revision: 225

Added:
   trunk/bindings/python/mapnik/ogcserver/
   trunk/bindings/python/mapnik/ogcserver/__init__.py
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/exceptions.py
   trunk/bindings/python/mapnik/ogcserver/wms.py
Log:
Adding the initial implementation of an OGC server in Python for Mapnik.  Although it works, it needs polishing and documentation, which will follow shortly.


Property changes on: trunk/bindings/python/mapnik/ogcserver
___________________________________________________________________
Name: svn:ignore
   + .sconsign


Added: trunk/bindings/python/mapnik/ogcserver/__init__.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/__init__.py	2006-04-06 23:18:44 UTC (rev 224)
+++ trunk/bindings/python/mapnik/ogcserver/__init__.py	2006-04-08 06:18:50 UTC (rev 225)
@@ -0,0 +1,20 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
\ No newline at end of file

Added: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-06 23:18:44 UTC (rev 224)
+++ trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-08 06:18:50 UTC (rev 225)
@@ -0,0 +1,87 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+import jon.cgi as cgi
+from os import environ, access
+from exceptions import OGCException
+import sys
+from copy import deepcopy
+from tempfile import gettempdir
+
+environ['PYTHON_EGG_CACHE'] = gettempdir()
+from lxml import etree as ElementTree
+
+class Handler(cgi.DebugHandler):
+
+    ogcexcetree = ElementTree.fromstring("""<?xml version='1.0' encoding="UTF-8"?>
+    <ServiceExceptionReport version="1.1.1">
+      <ServiceException />
+    </ServiceExceptionReport>
+    """)
+
+    def __init__(self):
+        self.requesthandlers = {}
+
+    def process(self, req):
+        reqparams = {}
+        for key, value in req.params.items():
+            reqparams[key.lower()] = value
+        onlineresource = 'http://%s:%s%s' % (req.environ['SERVER_NAME'], req.environ['SERVER_PORT'], req.environ['SCRIPT_NAME'])
+        try:
+            if not reqparams.has_key('request'):
+                raise OGCException('Missing request parameter.')
+            request = reqparams['request'].lower()
+            if request == 'getcapabilities' and not reqparams.has_key('service'):
+                raise OGCException('Missing service parameter.')
+            if request in ['getmap', 'getfeatureinfo']:
+                reqparams['service'] = 'wms'
+            service = reqparams['service'].lower()
+            srkey = (service, request)
+            if self.requesthandlers.has_key(srkey):
+                requesthandler = self.requesthandlers[srkey]
+            else:
+                try:
+                    mapnikmodule = __import__('mapnik.ogcserver.' + service)
+                except ImportError:
+                    raise OGCException('Service "%s" not supported.' % service)
+                ServiceFactory = getattr(mapnikmodule.ogcserver, service).ServiceFactory
+                servicehandler = ServiceFactory(self.configpath, self.factory, onlineresource, reqparams.get('version', None))
+                if request not in servicehandler.SERVICE_PARAMS.keys():
+                    raise OGCException('Operation "%s" not supported.' % request, 'OperationNotSupported')
+                ogcparams = servicehandler.processParameters(request, reqparams)
+                try:
+                    requesthandler = getattr(servicehandler, request)
+                except:
+                    raise OGCException('Operation "%s" not supported.' % request, 'OperationNotSupported')
+                else:
+                    self.requesthandlers[srkey] = requesthandler
+            response = requesthandler(ogcparams)
+        except OGCException:
+            req.set_header('Content-Type', 'text/xml')
+            ogcexcetree = deepcopy(self.ogcexcetree)
+            e = ogcexcetree.find('ServiceException')
+            e.text = sys.exc_value.args[0]
+            if len(sys.exc_value.args) == 2:
+                e.set('code', sys.exc_value.args[1])
+            req.write(ElementTree.tostring(ogcexcetree))
+        else:
+            req.set_header('Content-Type', response.content_type)
+            req.write(response.content)
\ No newline at end of file

Added: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-06 23:18:44 UTC (rev 224)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-08 06:18:50 UTC (rev 225)
@@ -0,0 +1,161 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+from exceptions import OGCException, ServerConfigurationError
+from mapnik import Color
+import re
+
+PIL_TYPE_MAPPING = {'image/jpeg': 'JPEG', 'image/png': 'PNG', 'image/gif': 'GIF'}
+
+class ParameterDefinition:
+
+    def __init__(self, mandatory, default=None, allowedvalues=None, fallback=False, match=None, cast=None):
+        """ An OGC request parameter definition.  Used to describe a
+            parameter's characteristics.
+
+            @param mandatory: Is this parameter required by the request?
+            @type mandatory: Boolean.
+            
+            @param default: Default value to use if one is not provided
+                            and the parameter is optional.
+            @type default: None or any valid value.
+            
+            @param allowedvalues: A list of allowed values for the parameter.
+                                  If a value is provided that is not in this
+                                  list, an error is raised.
+            @type allowedvalues: A python tuple of values.
+            
+            @param fallback: Whether the value of the parameter should fall
+                             back to the default should an illegal value be
+                             provided.
+            @type fallback: Boolean.
+            
+            @return: A L{ParameterDefinition} instance.
+        """
+        if match and cast:
+            raise ServerConfigurationError("'cast' and 'match' are mutually exclusive.")
+        if not match and not cast:
+            raise ServerConfigurationError("One of 'cast' or 'match' MUST be used.")
+        if match:
+            try:
+                self.pattern = re.compile(match)
+            except:
+                raise ServerConfigurationError("Invalid regular expression.")
+        else:
+            self.pattern = None
+        if cast and not callable(cast):
+            raise ServerConfigurationError('Cast parameter definition must be callable.')
+        self.cast = cast
+        if mandatory not in [True, False]:
+            raise ServerConfigurationError("Bad value for 'mandatory' parameter, must be True or False.")
+        self.mandatory = mandatory
+        self.default = default
+        if allowedvalues and type(allowedvalues) != type(()):
+            raise ServerConfigurationError("Bad value for 'allowedvalues' parameter, must be a tuple.")
+        self.allowedvalues = allowedvalues
+        if fallback not in [True, False]:
+            raise ServerConfigurationError("Bad value for 'fallback' parameter, must be True or False.")
+        self.fallback = fallback
+
+class BaseServiceHandler:
+
+    def processParameters(self, requestname, params):
+        finalparams = {}
+        for paramname, paramdef in self.SERVICE_PARAMS[requestname].items():
+            if paramname not in params.keys() and paramdef.mandatory:
+                raise OGCException("Mandatory parameter '%s' missing from request." % paramname)
+            elif paramname in params.keys():
+                if paramdef.pattern:
+                    if not paramdef.pattern.match(params[paramname]):
+                        raise OGCException("Parameter '%s' has an illegal value." % paramname)
+                elif paramdef.cast:
+                    try:
+                        params[paramname] = paramdef.cast(params[paramname])
+                    except:
+                        raise OGCException("Parameter '%s' has an illegal value." % paramname)
+                if paramdef.allowedvalues and params[paramname] not in paramdef.allowedvalues:
+                    if not paramdef.fallback:
+                        raise OGCException("Parameter '%s' has an illegal value." % paramname)
+                    else:
+                        finalparams[paramname] = paramdef.default
+                else:
+                    finalparams[paramname] = params[paramname]
+            elif not paramdef.mandatory and paramdef.default:
+                finalparams[paramname] = paramdef.default
+        return finalparams
+
+class Response:
+
+    def __init__(self, content_type, content):
+        self.content_type = content_type
+        self.content = content
+
+class Version:
+
+    def __init__(self, version):
+        version = version.split('.')
+        if len(version) != 3:
+            raise OGCException('Badly formatted version number.')
+        try:
+            version = map(int, version)
+        except:
+            raise OGCException('Badly formatted version number.')
+        self.version = version
+
+    def __repr__(self):
+        return '%s.%s.%s' % (self.version[0], self.version[1], self.version[2])
+
+    def __cmp__(self, other):
+        if isinstance(other, str):
+            other = Version(other)
+        if not isinstance(other, Version):
+            raise TypeError('Version instances can only be compared to each other, or version strings.')
+        if self.version[0] < other.version[0]:
+            return -1
+        elif self.version[0] > other.version[0]:
+            return 1
+        else:
+            if self.version[1] < other.version[1]:
+                return -1
+            elif self.version[1] > other.version[1]:
+                return 1
+            else:
+                if self.version[2] < other.version[2]:
+                    return -1
+                elif self.version[2] > other.version[2]:
+                    return 1
+                else:
+                    return 0
+
+class ListFactory:
+    
+    def __init__(self, cast):
+        self.cast = cast
+    
+    def __call__(self, string):
+        seq = string.split(',')
+        return map(self.cast, seq)
+
+def ColorFactory(colorstring):
+    if re.match('^0x[a-fA-F0-9]{6}$', colorstring):
+        return Color(eval('0x' + colorstring[2:4]), eval('0x' + colorstring[4:6]), eval('0x' + colorstring[6:8]))
+    else:
+        raise OGCException("Invalid color value.")
\ No newline at end of file

Added: trunk/bindings/python/mapnik/ogcserver/exceptions.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-06 23:18:44 UTC (rev 224)
+++ trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-08 06:18:50 UTC (rev 225)
@@ -0,0 +1,26 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+class OGCException(Exception):
+    pass
+
+class ServerConfigurationError(Exception):
+    pass
\ No newline at end of file

Added: trunk/bindings/python/mapnik/ogcserver/wms.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-06 23:18:44 UTC (rev 224)
+++ trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-08 06:18:50 UTC (rev 225)
@@ -0,0 +1,411 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+from common import ParameterDefinition, BaseServiceHandler, Response, \
+                   PIL_TYPE_MAPPING, Version, ListFactory, ColorFactory
+from exceptions import OGCException, ServerConfigurationError
+from ConfigParser import SafeConfigParser
+from mapnik import Map, Color, Envelope, render, rawdata, Image, Projection, \
+                   DEGREES
+from PIL.Image import fromstring
+from StringIO import StringIO
+from lxml import etree as ElementTree
+
+class ServiceHandler111(BaseServiceHandler):
+
+    SERVICE_PARAMS = {
+        'getcapabilities': {
+            'updatesequence': ParameterDefinition(False, cast=str)
+        },
+        'getmap': {
+            'version': ParameterDefinition(True, allowedvalues=(Version('1.1.1'),), cast=Version),
+            'layers': ParameterDefinition(True, cast=ListFactory(str)),
+            'styles': ParameterDefinition(True, cast=ListFactory(str)),
+            'srs': ParameterDefinition(True, match='^EPSG:\d+$'),
+            'bbox': ParameterDefinition(True, cast=ListFactory(float)),
+            'width': ParameterDefinition(True, cast=int),
+            'height': ParameterDefinition(True, cast=int),
+            'format': ParameterDefinition(True, allowedvalues=('image/png','image/jpeg','image/gif'), cast=str.lower),
+            'transparent': ParameterDefinition(False, 'FALSE', allowedvalues=('true','false'), cast=str.lower),
+            'bgcolor': ParameterDefinition(False, ColorFactory('0xFFFFFF'), cast=ColorFactory),
+            'exceptions': ParameterDefinition(False, 'application/vnd.ogc.se_xml', ('application/vnd.ogc.se_xml',), cast=str)
+        }
+    }
+
+    CONF_SERVICE = [
+        ['title', 'Title', str],
+        ['abstract', 'Abstract', str],
+        ['onlineresource', 'OnlineResource', str],
+        ['fees', 'Fees', str],
+        ['accessconstraints', 'AccessConstraints', str],
+    ]
+
+    capabilitiesxmltemplate = """<?xml version='1.0' encoding="UTF-8" standalone="no"?>
+    <!DOCTYPE WMT_MS_Capabilities SYSTEM "http://www.digitalearth.gov/wmt/xml/capabilities_1_1_1.dtd">
+    <WMT_MS_Capabilities version="1.1.1" updateSequence="0" xmlns:xlink="http://www.w3.org/1999/xlink">
+      <Service>
+        <Name>WMS</Name>
+      </Service>
+      <Capability>
+        <Request>
+          <GetCapabilities>
+            <Format>application/vnd.ogc.wms_xml</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetCapabilities>
+          <GetMap>
+            <Format>image/png</Format>
+            <Format>image/jpeg</Format>
+            <Format>image/gif</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetMap>
+        </Request>
+        <Exception>
+          <Format>application/vnd.ogc.se_xml</Format>
+        </Exception>
+        <Layer>
+          <Title>A Mapnik WMS Server</Title>
+          <Abstract>A Mapnik WMS Server</Abstract>
+          <SRS/>
+        </Layer>
+      </Capability>
+    </WMT_MS_Capabilities>
+    """
+
+    def __init__(self, configpath, factory, opsonlineresource):
+        self.factory = factory
+        self.conf = SafeConfigParser()
+        self.conf.readfp(open(configpath))
+        if self.conf.has_option('service', 'epsg'):
+            self.epsgcode = self.conf.get('service', 'epsg')
+            self.proj = Projection(['init=epsg:' + self.epsgcode])
+        else:
+            raise "Missing EPSG code"
+        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
+
+        capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
+        
+        elements = capetree.findall('Capability//OnlineResource')
+        for element in elements:
+            element.set('{http://www.w3.org/1999/xlink}href', opsonlineresource)
+
+        if len(self.conf.items('service')) > 0:
+            servicee = capetree.find('Service')
+            for item in self.CONF_SERVICE:
+                if self.conf.has_option('service', item[0]):
+                    value = self.conf.get('service', item[0])
+                    try:
+                        item[2](value)
+                    except:
+                        raise ServerConfigurationError('Configuration parameter [%s]->%s has an invalid value: %s.' % ('service', item[0], value))
+                    if item[0] == 'onlineresource':
+                        element = ElementTree.Element('%s' % item[1])
+                        servicee.append(element)
+                        element.set('{http://www.w3.org/1999/xlink}href', value)
+                        element.set('{http://www.w3.org/1999/xlink}type', 'simple')
+                    else:
+                        element = ElementTree.Element('%s' % item[1])
+                        element.text = value
+                        servicee.append(element)
+
+        rootlayerelem = capetree.find('Capability/Layer')
+        
+        rootlayersrs = rootlayerelem.find('SRS')
+        rootlayersrs.text = 'EPSG:%s' % self.epsgcode
+
+        dict = self.factory()
+
+        for layer in dict['layers']:
+            layername = ElementTree.Element('Name')
+            layername.text = layer.name()
+            layertitle = ElementTree.Element('Title')
+            layertitle.text = layer.name()
+            env = layer.envelope()
+            llp = self.proj.Inverse(env.minx, env.miny)
+            urp = self.proj.Inverse(env.maxx, env.maxy)
+            latlonbb = ElementTree.Element('LatLonBoundingBox')
+            latlonbb.set('minx', str(llp[0]))
+            latlonbb.set('miny', str(llp[1]))
+            latlonbb.set('maxx', str(urp[0]))
+            latlonbb.set('maxy', str(urp[1]))
+            layerbbox = ElementTree.Element('BoundingBox')
+            layerbbox.set('SRS', 'EPSG:%s' % self.epsgcode)
+            layerbbox.set('minx', str(env.minx))
+            layerbbox.set('miny', str(env.miny))
+            layerbbox.set('maxx', str(env.maxx))
+            layerbbox.set('maxy', str(env.maxy))
+            layere = ElementTree.Element('Layer')
+            layere.append(layername)
+            layere.append(layertitle)
+            layere.append(latlonbb)
+            layere.append(layerbbox)
+            rootlayerelem.append(layere)
+        
+        self.capabilities = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' + ElementTree.tostring(capetree)
+
+    def getcapabilities(self, params):
+        response = Response('application/vnd.ogc.wms_xml', self.capabilities)
+        return response
+        
+    def getmap(self, params):
+        m = Map(params['width'], params['height'])
+        if params['transparent'].lower() == 'false':
+            m.background = params['bgcolor']
+        mo = self.factory()
+        for layername in params['layers']:
+            for layer in mo['layers']:
+                if layer.name() == layername:
+                    for stylename in layer.styles:
+                        if stylename in mo['styles'].keys():
+                            m.append_style(stylename, mo['styles'][stylename])
+                    m.layers.append(layer)
+        m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
+        im = Image(params['width'], params['height'])
+        render(m, im)
+        im2 = fromstring('RGBA', (params['width'], params['height']), rawdata(im))
+        fh = StringIO()
+        im2.save(fh, PIL_TYPE_MAPPING[params['format']])
+        fh.seek(0)
+        response = Response(params['format'], fh.read())
+        return response
+
+class ServiceHandler130(BaseServiceHandler):
+
+    SERVICE_PARAMS = {
+        'getcapabilities': {
+            'format': ParameterDefinition(False, 'text/xml', ('text/xml',), True, cast=str),
+        },
+        'getmap': {
+            'version': ParameterDefinition(True, allowedvalues=('1.3.0',), cast=Version),
+            'layers': ParameterDefinition(True, cast=ListFactory(str)),
+            'styles': ParameterDefinition(True, cast=ListFactory(str)),
+            'crs': ParameterDefinition(True, match='^EPSG:\d+$'),
+            'bbox': ParameterDefinition(True, cast=ListFactory(float)),
+            'width': ParameterDefinition(True, cast=int),
+            'height': ParameterDefinition(True, cast=int),
+            'format': ParameterDefinition(True, allowedvalues=('image/gif','image/png','image/jpeg'), cast=str.lower),
+            'transparent': ParameterDefinition(False, allowedvalues=('true','false'), cast=str.lower),
+            'bgcolor': ParameterDefinition(False, ColorFactory('0xFFFFFF'), cast=ColorFactory),
+            'exceptions': ParameterDefinition(False, 'xml', ('xml',), cast=str.lower),
+        }
+    }
+
+    CONF_SERVICE = [
+        ['title', 'Title', str],
+        ['abstract', 'Abstract', str],
+        ['onlineresource', 'OnlineResource', str],
+        ['fees', 'Fees', str],
+        ['accessconstraints', 'AccessConstraints', str],
+        ['layerlimit', 'LayerLimit', int],
+        ['maxwidth', 'MaxWidth', int],
+        ['maxheight', 'MaxHeight', int]
+    ]
+
+    capabilitiesxmltemplate = """<?xml version="1.0" encoding="UTF-8"?>
+    <WMS_Capabilities version="1.3.0" xmlns="http://www.opengis.net/wms"
+                                      xmlns:xlink="http://www.w3.org/1999/xlink"
+                                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+                                      xsi:schemaLocation="http://www.opengis.net/wms http://schemas.opengis.net/wms/1.3.0/capabilities_1_3_0.xsd">
+      <Service>
+        <Name>WMS</Name>
+      </Service>
+      <Capability>
+        <Request>
+          <GetCapabilities>
+            <Format>text/xml</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetCapabilities>
+          <GetMap>
+            <Format>image/png</Format>
+            <Format>image/jpeg</Format>
+            <Format>image/gif</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetMap>
+        </Request>
+        <Exception>
+          <Format>XML</Format>
+        </Exception>
+        <Layer>
+          <Title>A Mapnik WMS Server</Title>
+          <Abstract>A Mapnik WMS Server</Abstract>
+          <CRS/>
+        </Layer>
+      </Capability>
+    </WMS_Capabilities>
+    """
+
+    def __init__(self, configpath, factory, opsonlineresource):
+        self.factory = factory
+        self.conf = SafeConfigParser()
+        self.conf.readfp(open(configpath))
+        if self.conf.has_option('service', 'epsg'):
+            self.epsgcode = self.conf.get('service', 'epsg')
+            self.proj = Projection(['init=epsg:' + self.epsgcode])
+        else:
+            raise "Missing EPSG code"
+        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
+
+        capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
+        
+        elements = capetree.findall('{http://www.opengis.net/wms}Capability//{http://www.opengis.net/wms}OnlineResource')
+        for element in elements:
+            element.set('{http://www.w3.org/1999/xlink}href', opsonlineresource)
+
+        if len(self.conf.items('service')) > 0:
+            servicee = capetree.find('{http://www.opengis.net/wms}Service')
+            for item in self.CONF_SERVICE:
+                if self.conf.has_option('service', item[0]):
+                    value = self.conf.get('service', item[0])
+                    try:
+                        item[2](value)
+                    except:
+                        raise ServerConfigurationError('Configuration parameter [%s]->%s has an invalid value: %s.' % ('service', item[0], value))
+                    if item[0] == 'onlineresource':
+                        element = ElementTree.Element('%s' % item[1])
+                        servicee.append(element)
+                        element.set('{http://www.w3.org/1999/xlink}href', value)
+                        element.set('{http://www.w3.org/1999/xlink}type', 'simple')
+                    else:
+                        element = ElementTree.Element('%s' % item[1])
+                        element.text = value
+                        servicee.append(element)
+
+        
+        rootlayerelem = capetree.find('{http://www.opengis.net/wms}Capability/{http://www.opengis.net/wms}Layer')
+
+        rootlayercrs = rootlayerelem.find('{http://www.opengis.net/wms}CRS')
+        rootlayercrs.text = 'EPSG:%s' % self.epsgcode
+        
+        dict = self.factory()
+        
+        for layer in dict['layers']:
+            layername = ElementTree.Element('Name')
+            layername.text = layer.name()
+            layertitle = ElementTree.Element('Title')
+            layertitle.text = layer.name()
+            env = layer.envelope()
+            layerexgbb = ElementTree.Element('EX_GeographicBoundingBox')
+            ll = self.proj.Inverse(env.minx, env.miny)
+            ur = self.proj.Inverse(env.maxx, env.maxy)
+            exgbb_wbl = ElementTree.Element('westBoundLongitude')
+            exgbb_wbl.text = str(ll[0])
+            layerexgbb.append(exgbb_wbl)
+            exgbb_ebl = ElementTree.Element('eastBoundLongitude')
+            exgbb_ebl.text = str(ur[0])
+            layerexgbb.append(exgbb_ebl)
+            exgbb_sbl = ElementTree.Element('southBoundLatitude')
+            exgbb_sbl.text = str(ll[1])
+            layerexgbb.append(exgbb_sbl)
+            exgbb_nbl = ElementTree.Element('northBoundLatitude')
+            exgbb_nbl.text = str(ur[1])
+            layerexgbb.append(exgbb_nbl)
+            layerbbox = ElementTree.Element('BoundingBox')
+            layerbbox.set('CRS', 'EPSG:%s' % self.epsgcode)
+            layerbbox.set('minx', str(env.minx))
+            layerbbox.set('miny', str(env.miny))
+            layerbbox.set('maxx', str(env.maxx))
+            layerbbox.set('maxy', str(env.maxy))
+            layere = ElementTree.Element('Layer')
+            layere.append(layername)
+            layere.append(layertitle)
+            layere.append(layerexgbb)
+            layere.append(layerbbox)
+            rootlayerelem.append(layere)
+        
+        self.capabilities = '<?xml version="1.0" encoding="UTF-8"?>\n' + ElementTree.tostring(capetree)
+
+    def getcapabilities(self, params):
+        response = Response('text/xml', self.capabilities)
+        return response
+        
+    def getmap(self, params):
+        if params['width'] > int(self.conf.get('service', 'maxwidth')) and height > int(self.conf.get('service', 'maxheight')):
+            raise OGCException('Bad map size.')
+        m = Map(params['width'], params['height'])
+        if params.has_key('transparent') and params['transparent'].lower() == 'false':
+            m.background = params['bgcolor']
+        mo = self.factory()
+        for layername in params['layers']:
+            for layer in mo['layers']:
+                if layer.name() == layername:
+                    for stylename in layer.styles:
+                        if stylename in mo['styles'].keys():
+                            m.append_style(stylename, mo['styles'][stylename])
+                    m.layers.append(layer)
+        m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
+        im = Image(params['width'], params['height'])
+        render(m, im)
+        im2 = fromstring('RGBA', (params['width'], params['height']), rawdata(im))
+        fh = StringIO()
+        im2.save(fh, PIL_TYPE_MAPPING[params['format']])
+        fh.seek(0)
+        response = Response(params['format'], fh.read())
+        return response
+
+def ServiceFactory(configpath, factory, onlineresource, version):
+    if not version:
+        version = Version('1.3.0')
+    else:
+        try:
+            version = Version(version)
+        except:
+            raise OGCException("Parameter 'version' has an illegal value.")
+    if version >= '1.3.0':
+        return ServiceHandler130(configpath, factory, onlineresource)
+    else:
+        return ServiceHandler111(configpath, factory, onlineresource)
+    
+    
\ No newline at end of file



From jdoyon at berlios.de  Sat Apr  8 08:21:29 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Sat, 8 Apr 2006 08:21:29 +0200
Subject: [Mapnik-svn] r226 - trunk/bindings/python/mapnik/ogcserver
Message-ID: <200604080621.k386LT30002453@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-08 08:21:26 +0200 (Sat, 08 Apr 2006)
New Revision: 226

Modified:
   trunk/bindings/python/mapnik/ogcserver/__init__.py
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/exceptions.py
   trunk/bindings/python/mapnik/ogcserver/wms.py
Log:
Setting the Id keyword on the new files.


Property changes on: trunk/bindings/python/mapnik/ogcserver/__init__.py
___________________________________________________________________
Name: svn:keywords
   + Id


Property changes on: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
___________________________________________________________________
Name: svn:keywords
   + Id


Property changes on: trunk/bindings/python/mapnik/ogcserver/common.py
___________________________________________________________________
Name: svn:keywords
   + Id


Property changes on: trunk/bindings/python/mapnik/ogcserver/exceptions.py
___________________________________________________________________
Name: svn:keywords
   + Id


Property changes on: trunk/bindings/python/mapnik/ogcserver/wms.py
___________________________________________________________________
Name: svn:keywords
   + Id



From jdoyon at berlios.de  Sat Apr  8 23:53:38 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Sat, 8 Apr 2006 23:53:38 +0200
Subject: [Mapnik-svn] r227 - trunk/bindings/python/mapnik/ogcserver
Message-ID: <200604082153.k38LrcB3029254@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-08 23:53:36 +0200 (Sat, 08 Apr 2006)
New Revision: 227

Added:
   trunk/bindings/python/mapnik/ogcserver/wms111.py
   trunk/bindings/python/mapnik/ogcserver/wms130.py
Modified:
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/exceptions.py
   trunk/bindings/python/mapnik/ogcserver/wms.py
Log:
- Improved error handling and detection
- Refactored WMS code quite a bit
- TODO: better map factory.

Modified: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-08 06:21:26 UTC (rev 226)
+++ trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-08 21:53:36 UTC (rev 227)
@@ -19,28 +19,26 @@
 #
 # $Id$
 
-import jon.cgi as cgi
 from os import environ, access
+from tempfile import gettempdir
+environ['PYTHON_EGG_CACHE'] = gettempdir()
+
+import jon.cgi as cgi
 from exceptions import OGCException
 import sys
 from copy import deepcopy
-from tempfile import gettempdir
-
-environ['PYTHON_EGG_CACHE'] = gettempdir()
+from traceback import print_tb
+from StringIO import StringIO
+from wms130 import ExceptionHandler
 from lxml import etree as ElementTree
 
 class Handler(cgi.DebugHandler):
 
-    ogcexcetree = ElementTree.fromstring("""<?xml version='1.0' encoding="UTF-8"?>
-    <ServiceExceptionReport version="1.1.1">
-      <ServiceException />
-    </ServiceExceptionReport>
-    """)
-
     def __init__(self):
         self.requesthandlers = {}
 
     def process(self, req):
+        exceptionhandler = ExceptionHandler
         reqparams = {}
         for key, value in req.params.items():
             reqparams[key.lower()] = value
@@ -60,10 +58,10 @@
             else:
                 try:
                     mapnikmodule = __import__('mapnik.ogcserver.' + service)
-                except ImportError:
-                    raise OGCException('Service "%s" not supported.' % service)
+                except:
+                    raise OGCException('Unsupported service "%s".' % service)
                 ServiceFactory = getattr(mapnikmodule.ogcserver, service).ServiceFactory
-                servicehandler = ServiceFactory(self.configpath, self.factory, onlineresource, reqparams.get('version', None))
+                servicehandler, exceptionhandler = ServiceFactory(self.configpath, self.factory, onlineresource, reqparams.get('version', None))
                 if request not in servicehandler.SERVICE_PARAMS.keys():
                     raise OGCException('Operation "%s" not supported.' % request, 'OperationNotSupported')
                 ogcparams = servicehandler.processParameters(request, reqparams)
@@ -75,13 +73,10 @@
                     self.requesthandlers[srkey] = requesthandler
             response = requesthandler(ogcparams)
         except OGCException:
-            req.set_header('Content-Type', 'text/xml')
-            ogcexcetree = deepcopy(self.ogcexcetree)
-            e = ogcexcetree.find('ServiceException')
-            e.text = sys.exc_value.args[0]
-            if len(sys.exc_value.args) == 2:
-                e.set('code', sys.exc_value.args[1])
-            req.write(ElementTree.tostring(ogcexcetree))
+            exc_type, exc_value, exc_tb = sys.exc_info()
+            eh = exceptionhandler()
+            req.set_header('Content-Type', eh.mimetype)
+            req.write(ElementTree.tostring(eh.getexcetree(exc_value)))
         else:
             req.set_header('Content-Type', response.content_type)
             req.write(response.content)
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-08 06:21:26 UTC (rev 226)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-08 21:53:36 UTC (rev 227)
@@ -20,14 +20,22 @@
 # $Id$
 
 from exceptions import OGCException, ServerConfigurationError
-from mapnik import Color
+from mapnik import Map, Color, Envelope, render, rawdata, Image, Projection
+from PIL.Image import fromstring
+from StringIO import StringIO
 import re
+# from elementtree import ElementTree
+# ElementTree._namespace_map.update({'http://www.opengis.net/wms': 'wms',
+#                                    'http://www.opengis.net/ogc': 'ogc',
+#                                    'http://www.w3.org/1999/xlink': 'xlink',
+#                                    'http://www.w3.org/2001/XMLSchema-instance': 'xsi'
+#                                    })
 
 PIL_TYPE_MAPPING = {'image/jpeg': 'JPEG', 'image/png': 'PNG', 'image/gif': 'GIF'}
 
 class ParameterDefinition:
 
-    def __init__(self, mandatory, default=None, allowedvalues=None, fallback=False, match=None, cast=None):
+    def __init__(self, mandatory, cast, default=None, allowedvalues=None, fallback=False):
         """ An OGC request parameter definition.  Used to describe a
             parameter's characteristics.
 
@@ -50,23 +58,12 @@
             
             @return: A L{ParameterDefinition} instance.
         """
-        if match and cast:
-            raise ServerConfigurationError("'cast' and 'match' are mutually exclusive.")
-        if not match and not cast:
-            raise ServerConfigurationError("One of 'cast' or 'match' MUST be used.")
-        if match:
-            try:
-                self.pattern = re.compile(match)
-            except:
-                raise ServerConfigurationError("Invalid regular expression.")
-        else:
-            self.pattern = None
-        if cast and not callable(cast):
-            raise ServerConfigurationError('Cast parameter definition must be callable.')
-        self.cast = cast
         if mandatory not in [True, False]:
             raise ServerConfigurationError("Bad value for 'mandatory' parameter, must be True or False.")
         self.mandatory = mandatory
+        if not callable(cast):
+            raise ServerConfigurationError('Cast parameter definition must be callable.')
+        self.cast = cast
         self.default = default
         if allowedvalues and type(allowedvalues) != type(()):
             raise ServerConfigurationError("Bad value for 'allowedvalues' parameter, must be a tuple.")
@@ -83,14 +80,12 @@
             if paramname not in params.keys() and paramdef.mandatory:
                 raise OGCException("Mandatory parameter '%s' missing from request." % paramname)
             elif paramname in params.keys():
-                if paramdef.pattern:
-                    if not paramdef.pattern.match(params[paramname]):
-                        raise OGCException("Parameter '%s' has an illegal value." % paramname)
-                elif paramdef.cast:
-                    try:
-                        params[paramname] = paramdef.cast(params[paramname])
-                    except:
-                        raise OGCException("Parameter '%s' has an illegal value." % paramname)
+                try:
+                    params[paramname] = paramdef.cast(params[paramname])
+                except OGCException:
+                    raise
+                except:
+                    raise OGCException('Invalid value "%s" for parameter "%s".' % (params[paramname], paramname))
                 if paramdef.allowedvalues and params[paramname] not in paramdef.allowedvalues:
                     if not paramdef.fallback:
                         raise OGCException("Parameter '%s' has an illegal value." % paramname)
@@ -126,8 +121,6 @@
     def __cmp__(self, other):
         if isinstance(other, str):
             other = Version(other)
-        if not isinstance(other, Version):
-            raise TypeError('Version instances can only be compared to each other, or version strings.')
         if self.version[0] < other.version[0]:
             return -1
         elif self.version[0] > other.version[0]:
@@ -158,4 +151,69 @@
     if re.match('^0x[a-fA-F0-9]{6}$', colorstring):
         return Color(eval('0x' + colorstring[2:4]), eval('0x' + colorstring[4:6]), eval('0x' + colorstring[6:8]))
     else:
-        raise OGCException("Invalid color value.")
\ No newline at end of file
+        raise OGCException('Invalid color value. Must be of format "0xFFFFFF".')
+
+class CRS:
+    
+    def __init__(self, namespace, code):
+        self.namespace = namespace
+        self.code = int(code)
+        self.proj = None
+    
+    def __repr__(self):
+        return '%s:%s' % (self.namespace, self.code)
+    
+    def __eq__(self, other):
+        if str(other) == str(self):
+            return True
+        return False
+
+    def Inverse(self, x, y):
+        if not self.proj:
+            self.proj = Projection(['init=%s' % str(self).lower()])
+        return self.proj.Inverse(x, y)
+    
+    def Forward(self, x, y):
+        if not self.proj:
+            self.proj = Projection(['init=%s' % str(self).lower()])
+        return self.proj.Forward(x, y)
+
+class CRSFactory:
+    
+    def __init__(self, allowednamespaces):
+        self.allowednamespaces = allowednamespaces
+    
+    def __call__(self, crsstring):
+        if not re.match('^[A-Z]{3,5}:\d+$', crsstring):
+            raise OGCException('Invalid format for the CRS parameter: %s' % crsstring, 'InvalidCRS')
+        crsparts = crsstring.split(':')
+        if crsparts[0] in self.allowednamespaces:
+            return CRS(crsparts[0], crsparts[1])
+        else:
+            raise OGCException('Invalid CRS Namespace: %s' % crsparts[0], 'InvalidCRS')
+
+class WMSBaseServiceHandler(BaseServiceHandler):
+    
+    def getmap(self, params):
+        if str(params['crs']) != str(self.crs):
+            raise OGCException('Unsupported CRS requested.  Must be "%s" and not "%s".' % (self.crs, params['crs']), 'InvalidCRS')
+        m = Map(params['width'], params['height'])
+        if params.has_key('transparent') and params['transparent'] == 'FALSE':
+            m.background = params['bgcolor']
+        mo = self.factory()
+        for layername in params['layers']:
+            for layer in mo['layers']:
+                if layer.name() == layername:
+                    for stylename in layer.styles:
+                        if stylename in mo['styles'].keys():
+                            m.append_style(stylename, mo['styles'][stylename])
+                    m.layers.append(layer)
+        m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
+        im = Image(params['width'], params['height'])
+        render(m, im)
+        im2 = fromstring('RGBA', (params['width'], params['height']), rawdata(im))
+        fh = StringIO()
+        im2.save(fh, PIL_TYPE_MAPPING[params['format']])
+        fh.seek(0)
+        response = Response(params['format'], fh.read())
+        return response
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/exceptions.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-08 06:21:26 UTC (rev 226)
+++ trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-08 21:53:36 UTC (rev 227)
@@ -19,8 +19,21 @@
 #
 # $Id$
 
+from copy import deepcopy
+
 class OGCException(Exception):
     pass
 
 class ServerConfigurationError(Exception):
-    pass
\ No newline at end of file
+    pass
+
+class BaseExceptionHandler:
+    
+    def getexcetree(self, exc):
+        ogcexcetree = deepcopy(self.xmltemplate)
+        e = ogcexcetree.find(self.xpath)
+        if len(exc.args) > 0:
+            e.text = exc.args[0]
+            if len(exc.args) > 1:
+                e.set('code', exc.args[1])
+        return ogcexcetree
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-08 06:21:26 UTC (rev 226)
+++ trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-08 21:53:36 UTC (rev 227)
@@ -19,393 +19,23 @@
 #
 # $Id$
 
-from common import ParameterDefinition, BaseServiceHandler, Response, \
-                   PIL_TYPE_MAPPING, Version, ListFactory, ColorFactory
-from exceptions import OGCException, ServerConfigurationError
-from ConfigParser import SafeConfigParser
-from mapnik import Map, Color, Envelope, render, rawdata, Image, Projection, \
-                   DEGREES
-from PIL.Image import fromstring
-from StringIO import StringIO
-from lxml import etree as ElementTree
+from common import Version
+from exceptions import OGCException
+from wms111 import ServiceHandler as ServiceHandler111, \
+                   ExceptionHandler as ExceptionHandler111
+from wms130 import ServiceHandler as ServiceHandler130, \
+                   ExceptionHandler as ExceptionHandler130
 
-class ServiceHandler111(BaseServiceHandler):
-
-    SERVICE_PARAMS = {
-        'getcapabilities': {
-            'updatesequence': ParameterDefinition(False, cast=str)
-        },
-        'getmap': {
-            'version': ParameterDefinition(True, allowedvalues=(Version('1.1.1'),), cast=Version),
-            'layers': ParameterDefinition(True, cast=ListFactory(str)),
-            'styles': ParameterDefinition(True, cast=ListFactory(str)),
-            'srs': ParameterDefinition(True, match='^EPSG:\d+$'),
-            'bbox': ParameterDefinition(True, cast=ListFactory(float)),
-            'width': ParameterDefinition(True, cast=int),
-            'height': ParameterDefinition(True, cast=int),
-            'format': ParameterDefinition(True, allowedvalues=('image/png','image/jpeg','image/gif'), cast=str.lower),
-            'transparent': ParameterDefinition(False, 'FALSE', allowedvalues=('true','false'), cast=str.lower),
-            'bgcolor': ParameterDefinition(False, ColorFactory('0xFFFFFF'), cast=ColorFactory),
-            'exceptions': ParameterDefinition(False, 'application/vnd.ogc.se_xml', ('application/vnd.ogc.se_xml',), cast=str)
-        }
-    }
-
-    CONF_SERVICE = [
-        ['title', 'Title', str],
-        ['abstract', 'Abstract', str],
-        ['onlineresource', 'OnlineResource', str],
-        ['fees', 'Fees', str],
-        ['accessconstraints', 'AccessConstraints', str],
-    ]
-
-    capabilitiesxmltemplate = """<?xml version='1.0' encoding="UTF-8" standalone="no"?>
-    <!DOCTYPE WMT_MS_Capabilities SYSTEM "http://www.digitalearth.gov/wmt/xml/capabilities_1_1_1.dtd">
-    <WMT_MS_Capabilities version="1.1.1" updateSequence="0" xmlns:xlink="http://www.w3.org/1999/xlink">
-      <Service>
-        <Name>WMS</Name>
-      </Service>
-      <Capability>
-        <Request>
-          <GetCapabilities>
-            <Format>application/vnd.ogc.wms_xml</Format>
-            <DCPType>
-              <HTTP>
-                <Get>
-                  <OnlineResource xlink:type="simple"/>
-                </Get>
-                <Post>
-                  <OnlineResource xlink:type="simple"/>
-                </Post>
-              </HTTP>
-            </DCPType>
-          </GetCapabilities>
-          <GetMap>
-            <Format>image/png</Format>
-            <Format>image/jpeg</Format>
-            <Format>image/gif</Format>
-            <DCPType>
-              <HTTP>
-                <Get>
-                  <OnlineResource xlink:type="simple"/>
-                </Get>
-                <Post>
-                  <OnlineResource xlink:type="simple"/>
-                </Post>
-              </HTTP>
-            </DCPType>
-          </GetMap>
-        </Request>
-        <Exception>
-          <Format>application/vnd.ogc.se_xml</Format>
-        </Exception>
-        <Layer>
-          <Title>A Mapnik WMS Server</Title>
-          <Abstract>A Mapnik WMS Server</Abstract>
-          <SRS/>
-        </Layer>
-      </Capability>
-    </WMT_MS_Capabilities>
-    """
-
-    def __init__(self, configpath, factory, opsonlineresource):
-        self.factory = factory
-        self.conf = SafeConfigParser()
-        self.conf.readfp(open(configpath))
-        if self.conf.has_option('service', 'epsg'):
-            self.epsgcode = self.conf.get('service', 'epsg')
-            self.proj = Projection(['init=epsg:' + self.epsgcode])
-        else:
-            raise "Missing EPSG code"
-        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
-
-        capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
-        
-        elements = capetree.findall('Capability//OnlineResource')
-        for element in elements:
-            element.set('{http://www.w3.org/1999/xlink}href', opsonlineresource)
-
-        if len(self.conf.items('service')) > 0:
-            servicee = capetree.find('Service')
-            for item in self.CONF_SERVICE:
-                if self.conf.has_option('service', item[0]):
-                    value = self.conf.get('service', item[0])
-                    try:
-                        item[2](value)
-                    except:
-                        raise ServerConfigurationError('Configuration parameter [%s]->%s has an invalid value: %s.' % ('service', item[0], value))
-                    if item[0] == 'onlineresource':
-                        element = ElementTree.Element('%s' % item[1])
-                        servicee.append(element)
-                        element.set('{http://www.w3.org/1999/xlink}href', value)
-                        element.set('{http://www.w3.org/1999/xlink}type', 'simple')
-                    else:
-                        element = ElementTree.Element('%s' % item[1])
-                        element.text = value
-                        servicee.append(element)
-
-        rootlayerelem = capetree.find('Capability/Layer')
-        
-        rootlayersrs = rootlayerelem.find('SRS')
-        rootlayersrs.text = 'EPSG:%s' % self.epsgcode
-
-        dict = self.factory()
-
-        for layer in dict['layers']:
-            layername = ElementTree.Element('Name')
-            layername.text = layer.name()
-            layertitle = ElementTree.Element('Title')
-            layertitle.text = layer.name()
-            env = layer.envelope()
-            llp = self.proj.Inverse(env.minx, env.miny)
-            urp = self.proj.Inverse(env.maxx, env.maxy)
-            latlonbb = ElementTree.Element('LatLonBoundingBox')
-            latlonbb.set('minx', str(llp[0]))
-            latlonbb.set('miny', str(llp[1]))
-            latlonbb.set('maxx', str(urp[0]))
-            latlonbb.set('maxy', str(urp[1]))
-            layerbbox = ElementTree.Element('BoundingBox')
-            layerbbox.set('SRS', 'EPSG:%s' % self.epsgcode)
-            layerbbox.set('minx', str(env.minx))
-            layerbbox.set('miny', str(env.miny))
-            layerbbox.set('maxx', str(env.maxx))
-            layerbbox.set('maxy', str(env.maxy))
-            layere = ElementTree.Element('Layer')
-            layere.append(layername)
-            layere.append(layertitle)
-            layere.append(latlonbb)
-            layere.append(layerbbox)
-            rootlayerelem.append(layere)
-        
-        self.capabilities = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' + ElementTree.tostring(capetree)
-
-    def getcapabilities(self, params):
-        response = Response('application/vnd.ogc.wms_xml', self.capabilities)
-        return response
-        
-    def getmap(self, params):
-        m = Map(params['width'], params['height'])
-        if params['transparent'].lower() == 'false':
-            m.background = params['bgcolor']
-        mo = self.factory()
-        for layername in params['layers']:
-            for layer in mo['layers']:
-                if layer.name() == layername:
-                    for stylename in layer.styles:
-                        if stylename in mo['styles'].keys():
-                            m.append_style(stylename, mo['styles'][stylename])
-                    m.layers.append(layer)
-        m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
-        im = Image(params['width'], params['height'])
-        render(m, im)
-        im2 = fromstring('RGBA', (params['width'], params['height']), rawdata(im))
-        fh = StringIO()
-        im2.save(fh, PIL_TYPE_MAPPING[params['format']])
-        fh.seek(0)
-        response = Response(params['format'], fh.read())
-        return response
-
-class ServiceHandler130(BaseServiceHandler):
-
-    SERVICE_PARAMS = {
-        'getcapabilities': {
-            'format': ParameterDefinition(False, 'text/xml', ('text/xml',), True, cast=str),
-        },
-        'getmap': {
-            'version': ParameterDefinition(True, allowedvalues=('1.3.0',), cast=Version),
-            'layers': ParameterDefinition(True, cast=ListFactory(str)),
-            'styles': ParameterDefinition(True, cast=ListFactory(str)),
-            'crs': ParameterDefinition(True, match='^EPSG:\d+$'),
-            'bbox': ParameterDefinition(True, cast=ListFactory(float)),
-            'width': ParameterDefinition(True, cast=int),
-            'height': ParameterDefinition(True, cast=int),
-            'format': ParameterDefinition(True, allowedvalues=('image/gif','image/png','image/jpeg'), cast=str.lower),
-            'transparent': ParameterDefinition(False, allowedvalues=('true','false'), cast=str.lower),
-            'bgcolor': ParameterDefinition(False, ColorFactory('0xFFFFFF'), cast=ColorFactory),
-            'exceptions': ParameterDefinition(False, 'xml', ('xml',), cast=str.lower),
-        }
-    }
-
-    CONF_SERVICE = [
-        ['title', 'Title', str],
-        ['abstract', 'Abstract', str],
-        ['onlineresource', 'OnlineResource', str],
-        ['fees', 'Fees', str],
-        ['accessconstraints', 'AccessConstraints', str],
-        ['layerlimit', 'LayerLimit', int],
-        ['maxwidth', 'MaxWidth', int],
-        ['maxheight', 'MaxHeight', int]
-    ]
-
-    capabilitiesxmltemplate = """<?xml version="1.0" encoding="UTF-8"?>
-    <WMS_Capabilities version="1.3.0" xmlns="http://www.opengis.net/wms"
-                                      xmlns:xlink="http://www.w3.org/1999/xlink"
-                                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-                                      xsi:schemaLocation="http://www.opengis.net/wms http://schemas.opengis.net/wms/1.3.0/capabilities_1_3_0.xsd">
-      <Service>
-        <Name>WMS</Name>
-      </Service>
-      <Capability>
-        <Request>
-          <GetCapabilities>
-            <Format>text/xml</Format>
-            <DCPType>
-              <HTTP>
-                <Get>
-                  <OnlineResource xlink:type="simple"/>
-                </Get>
-                <Post>
-                  <OnlineResource xlink:type="simple"/>
-                </Post>
-              </HTTP>
-            </DCPType>
-          </GetCapabilities>
-          <GetMap>
-            <Format>image/png</Format>
-            <Format>image/jpeg</Format>
-            <Format>image/gif</Format>
-            <DCPType>
-              <HTTP>
-                <Get>
-                  <OnlineResource xlink:type="simple"/>
-                </Get>
-                <Post>
-                  <OnlineResource xlink:type="simple"/>
-                </Post>
-              </HTTP>
-            </DCPType>
-          </GetMap>
-        </Request>
-        <Exception>
-          <Format>XML</Format>
-        </Exception>
-        <Layer>
-          <Title>A Mapnik WMS Server</Title>
-          <Abstract>A Mapnik WMS Server</Abstract>
-          <CRS/>
-        </Layer>
-      </Capability>
-    </WMS_Capabilities>
-    """
-
-    def __init__(self, configpath, factory, opsonlineresource):
-        self.factory = factory
-        self.conf = SafeConfigParser()
-        self.conf.readfp(open(configpath))
-        if self.conf.has_option('service', 'epsg'):
-            self.epsgcode = self.conf.get('service', 'epsg')
-            self.proj = Projection(['init=epsg:' + self.epsgcode])
-        else:
-            raise "Missing EPSG code"
-        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
-
-        capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
-        
-        elements = capetree.findall('{http://www.opengis.net/wms}Capability//{http://www.opengis.net/wms}OnlineResource')
-        for element in elements:
-            element.set('{http://www.w3.org/1999/xlink}href', opsonlineresource)
-
-        if len(self.conf.items('service')) > 0:
-            servicee = capetree.find('{http://www.opengis.net/wms}Service')
-            for item in self.CONF_SERVICE:
-                if self.conf.has_option('service', item[0]):
-                    value = self.conf.get('service', item[0])
-                    try:
-                        item[2](value)
-                    except:
-                        raise ServerConfigurationError('Configuration parameter [%s]->%s has an invalid value: %s.' % ('service', item[0], value))
-                    if item[0] == 'onlineresource':
-                        element = ElementTree.Element('%s' % item[1])
-                        servicee.append(element)
-                        element.set('{http://www.w3.org/1999/xlink}href', value)
-                        element.set('{http://www.w3.org/1999/xlink}type', 'simple')
-                    else:
-                        element = ElementTree.Element('%s' % item[1])
-                        element.text = value
-                        servicee.append(element)
-
-        
-        rootlayerelem = capetree.find('{http://www.opengis.net/wms}Capability/{http://www.opengis.net/wms}Layer')
-
-        rootlayercrs = rootlayerelem.find('{http://www.opengis.net/wms}CRS')
-        rootlayercrs.text = 'EPSG:%s' % self.epsgcode
-        
-        dict = self.factory()
-        
-        for layer in dict['layers']:
-            layername = ElementTree.Element('Name')
-            layername.text = layer.name()
-            layertitle = ElementTree.Element('Title')
-            layertitle.text = layer.name()
-            env = layer.envelope()
-            layerexgbb = ElementTree.Element('EX_GeographicBoundingBox')
-            ll = self.proj.Inverse(env.minx, env.miny)
-            ur = self.proj.Inverse(env.maxx, env.maxy)
-            exgbb_wbl = ElementTree.Element('westBoundLongitude')
-            exgbb_wbl.text = str(ll[0])
-            layerexgbb.append(exgbb_wbl)
-            exgbb_ebl = ElementTree.Element('eastBoundLongitude')
-            exgbb_ebl.text = str(ur[0])
-            layerexgbb.append(exgbb_ebl)
-            exgbb_sbl = ElementTree.Element('southBoundLatitude')
-            exgbb_sbl.text = str(ll[1])
-            layerexgbb.append(exgbb_sbl)
-            exgbb_nbl = ElementTree.Element('northBoundLatitude')
-            exgbb_nbl.text = str(ur[1])
-            layerexgbb.append(exgbb_nbl)
-            layerbbox = ElementTree.Element('BoundingBox')
-            layerbbox.set('CRS', 'EPSG:%s' % self.epsgcode)
-            layerbbox.set('minx', str(env.minx))
-            layerbbox.set('miny', str(env.miny))
-            layerbbox.set('maxx', str(env.maxx))
-            layerbbox.set('maxy', str(env.maxy))
-            layere = ElementTree.Element('Layer')
-            layere.append(layername)
-            layere.append(layertitle)
-            layere.append(layerexgbb)
-            layere.append(layerbbox)
-            rootlayerelem.append(layere)
-        
-        self.capabilities = '<?xml version="1.0" encoding="UTF-8"?>\n' + ElementTree.tostring(capetree)
-
-    def getcapabilities(self, params):
-        response = Response('text/xml', self.capabilities)
-        return response
-        
-    def getmap(self, params):
-        if params['width'] > int(self.conf.get('service', 'maxwidth')) and height > int(self.conf.get('service', 'maxheight')):
-            raise OGCException('Bad map size.')
-        m = Map(params['width'], params['height'])
-        if params.has_key('transparent') and params['transparent'].lower() == 'false':
-            m.background = params['bgcolor']
-        mo = self.factory()
-        for layername in params['layers']:
-            for layer in mo['layers']:
-                if layer.name() == layername:
-                    for stylename in layer.styles:
-                        if stylename in mo['styles'].keys():
-                            m.append_style(stylename, mo['styles'][stylename])
-                    m.layers.append(layer)
-        m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
-        im = Image(params['width'], params['height'])
-        render(m, im)
-        im2 = fromstring('RGBA', (params['width'], params['height']), rawdata(im))
-        fh = StringIO()
-        im2.save(fh, PIL_TYPE_MAPPING[params['format']])
-        fh.seek(0)
-        response = Response(params['format'], fh.read())
-        return response
-
 def ServiceFactory(configpath, factory, onlineresource, version):
+
     if not version:
         version = Version('1.3.0')
     else:
         try:
             version = Version(version)
         except:
-            raise OGCException("Parameter 'version' has an illegal value.")
+            raise OGCException('Parameter "version" is not properly formatted.  Format must be "x.x.x".')
     if version >= '1.3.0':
-        return ServiceHandler130(configpath, factory, onlineresource)
+        return (ServiceHandler130(configpath, factory, onlineresource), ExceptionHandler130)
     else:
-        return ServiceHandler111(configpath, factory, onlineresource)
-    
-    
\ No newline at end of file
+        return (ServiceHandler111(configpath, factory, onlineresource), ExceptionHandler111)
\ No newline at end of file

Added: trunk/bindings/python/mapnik/ogcserver/wms111.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-08 06:21:26 UTC (rev 226)
+++ trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-08 21:53:36 UTC (rev 227)
@@ -0,0 +1,192 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+from common import ParameterDefinition, BaseServiceHandler, Response, \
+                   PIL_TYPE_MAPPING, Version, ListFactory, ColorFactory, \
+                   CRSFactory, WMSBaseServiceHandler, CRS
+from exceptions import OGCException, ServerConfigurationError, BaseExceptionHandler
+from ConfigParser import SafeConfigParser
+from lxml import etree as ElementTree
+
+class ServiceHandler(WMSBaseServiceHandler):
+
+    SERVICE_PARAMS = {
+        'getcapabilities': {
+            'updatesequence': ParameterDefinition(False, str)
+        },
+        'getmap': {
+            'version': ParameterDefinition(True, Version, allowedvalues=(Version('1.1.1'),)),
+            'layers': ParameterDefinition(True, ListFactory(str)),
+            'styles': ParameterDefinition(True, ListFactory(str)),
+            'srs': ParameterDefinition(True, CRSFactory(['EPSG'])),
+            'bbox': ParameterDefinition(True, ListFactory(float)),
+            'width': ParameterDefinition(True, int),
+            'height': ParameterDefinition(True, int),
+            'format': ParameterDefinition(True, str, allowedvalues=('image/png','image/jpeg','image/gif')),
+            'transparent': ParameterDefinition(False, str, 'FALSE', ('TRUE','FALSE')),
+            'bgcolor': ParameterDefinition(False, ColorFactory, ColorFactory('0xFFFFFF')),
+            'exceptions': ParameterDefinition(False, str, 'application/vnd.ogc.se_xml', ('application/vnd.ogc.se_xml',))
+        }
+    }
+
+    CONF_SERVICE = [
+        ['title', 'Title', str],
+        ['abstract', 'Abstract', str],
+        ['onlineresource', 'OnlineResource', str],
+        ['fees', 'Fees', str],
+        ['accessconstraints', 'AccessConstraints', str],
+    ]
+
+    capabilitiesxmltemplate = """<?xml version='1.0' encoding="UTF-8" standalone="no"?>
+    <!DOCTYPE WMT_MS_Capabilities SYSTEM "http://www.digitalearth.gov/wmt/xml/capabilities_1_1_1.dtd">
+    <WMT_MS_Capabilities version="1.1.1" updateSequence="0" xmlns:xlink="http://www.w3.org/1999/xlink">
+      <Service>
+        <Name>WMS</Name>
+      </Service>
+      <Capability>
+        <Request>
+          <GetCapabilities>
+            <Format>application/vnd.ogc.wms_xml</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetCapabilities>
+          <GetMap>
+            <Format>image/png</Format>
+            <Format>image/jpeg</Format>
+            <Format>image/gif</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetMap>
+        </Request>
+        <Exception>
+          <Format>application/vnd.ogc.se_xml</Format>
+        </Exception>
+        <Layer>
+          <Title>A Mapnik WMS Server</Title>
+          <Abstract>A Mapnik WMS Server</Abstract>
+          <SRS/>
+        </Layer>
+      </Capability>
+    </WMT_MS_Capabilities>
+    """
+
+    def __init__(self, configpath, factory, opsonlineresource):
+        self.factory = factory
+        self.conf = SafeConfigParser()
+        self.conf.readfp(open(configpath))
+        if self.conf.has_option('service', 'epsg'):
+            self.crs = CRS('EPSG', self.conf.get('service', 'epsg'))
+        else:
+            ServerConfigurationError('EPSG code not properly configured.')
+        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
+
+        capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
+        
+        elements = capetree.findall('Capability//OnlineResource')
+        for element in elements:
+            element.set('{http://www.w3.org/1999/xlink}href', opsonlineresource)
+
+        if len(self.conf.items('service')) > 0:
+            servicee = capetree.find('Service')
+            for item in self.CONF_SERVICE:
+                if self.conf.has_option('service', item[0]):
+                    value = self.conf.get('service', item[0])
+                    try:
+                        item[2](value)
+                    except:
+                        raise ServerConfigurationError('Configuration parameter [%s]->%s has an invalid value: %s.' % ('service', item[0], value))
+                    if item[0] == 'onlineresource':
+                        element = ElementTree.Element('%s' % item[1])
+                        servicee.append(element)
+                        element.set('{http://www.w3.org/1999/xlink}href', value)
+                        element.set('{http://www.w3.org/1999/xlink}type', 'simple')
+                    else:
+                        element = ElementTree.Element('%s' % item[1])
+                        element.text = value
+                        servicee.append(element)
+
+        rootlayerelem = capetree.find('Capability/Layer')
+        
+        rootlayersrs = rootlayerelem.find('SRS')
+        rootlayersrs.text = str(self.crs)
+
+        dict = self.factory()
+
+        for layer in dict['layers']:
+            layername = ElementTree.Element('Name')
+            layername.text = layer.name()
+            layertitle = ElementTree.Element('Title')
+            layertitle.text = layer.name()
+            env = layer.envelope()
+            llp = self.crs.Inverse(env.minx, env.miny)
+            urp = self.crs.Inverse(env.maxx, env.maxy)
+            latlonbb = ElementTree.Element('LatLonBoundingBox')
+            latlonbb.set('minx', str(llp[0]))
+            latlonbb.set('miny', str(llp[1]))
+            latlonbb.set('maxx', str(urp[0]))
+            latlonbb.set('maxy', str(urp[1]))
+            layerbbox = ElementTree.Element('BoundingBox')
+            layerbbox.set('SRS', str(self.crs))
+            layerbbox.set('minx', str(env.minx))
+            layerbbox.set('miny', str(env.miny))
+            layerbbox.set('maxx', str(env.maxx))
+            layerbbox.set('maxy', str(env.maxy))
+            layere = ElementTree.Element('Layer')
+            layere.append(layername)
+            layere.append(layertitle)
+            layere.append(latlonbb)
+            layere.append(layerbbox)
+            rootlayerelem.append(layere)
+        
+        self.capabilities = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' + ElementTree.tostring(capetree)
+
+    def getcapabilities(self, params):
+        response = Response('application/vnd.ogc.wms_xml', self.capabilities)
+        return response
+
+class ExceptionHandler(BaseExceptionHandler):
+    
+    mimetype = "application/vnd.ogc.se_xml"
+    
+    xmltemplate = ElementTree.fromstring("""<?xml version='1.0' encoding="UTF-8" standalone="no"?>
+    <!DOCTYPE ServiceExceptionReport SYSTEM "http://www.digitalearth.gov/wmt/xml/exception_1_1_1.dtd">
+    <ServiceExceptionReport version="1.1.1">
+      <ServiceException />
+    </ServiceExceptionReport>
+    """)
+    
+    xpath = 'ServiceException'
\ No newline at end of file


Property changes on: trunk/bindings/python/mapnik/ogcserver/wms111.py
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/bindings/python/mapnik/ogcserver/wms130.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-08 06:21:26 UTC (rev 226)
+++ trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-08 21:53:36 UTC (rev 227)
@@ -0,0 +1,213 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+from common import ParameterDefinition, Response, PIL_TYPE_MAPPING, Version, \
+                   ListFactory, ColorFactory, CRSFactory, CRS, WMSBaseServiceHandler
+from exceptions import OGCException, ServerConfigurationError, BaseExceptionHandler
+from ConfigParser import SafeConfigParser
+from lxml import etree as ElementTree
+
+class ServiceHandler(WMSBaseServiceHandler):
+
+    SERVICE_PARAMS = {
+        'getcapabilities': {
+            'format': ParameterDefinition(False, str, 'text/xml', ('text/xml',), True),
+            'updatesequence': ParameterDefinition(False, str)
+        },
+        'getmap': {
+            'version': ParameterDefinition(True, Version, allowedvalues=(Version('1.3.0'),)),
+            'layers': ParameterDefinition(True, ListFactory(str)),
+            'styles': ParameterDefinition(True, ListFactory(str)),
+            'crs': ParameterDefinition(True, CRSFactory(['EPSG'])),
+            'bbox': ParameterDefinition(True, ListFactory(float)),
+            'width': ParameterDefinition(True, int),
+            'height': ParameterDefinition(True, int),
+            'format': ParameterDefinition(True, str, allowedvalues=('image/gif','image/png','image/jpeg')),
+            'transparent': ParameterDefinition(False, str, 'FALSE', ('TRUE','FALSE')),
+            'bgcolor': ParameterDefinition(False, ColorFactory, ColorFactory('0xFFFFFF')),
+            'exceptions': ParameterDefinition(False, str, 'XML', ('XML',)),
+        }
+    }
+
+    CONF_SERVICE = [
+        ['title', 'Title', str],
+        ['abstract', 'Abstract', str],
+        ['onlineresource', 'OnlineResource', str],
+        ['fees', 'Fees', str],
+        ['accessconstraints', 'AccessConstraints', str],
+        ['layerlimit', 'LayerLimit', int],
+        ['maxwidth', 'MaxWidth', int],
+        ['maxheight', 'MaxHeight', int]
+    ]
+
+    capabilitiesxmltemplate = """<?xml version="1.0" encoding="UTF-8"?>
+    <WMS_Capabilities version="1.3.0" xmlns="http://www.opengis.net/wms"
+                                      xmlns:xlink="http://www.w3.org/1999/xlink"
+                                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+                                      xsi:schemaLocation="http://www.opengis.net/wms http://schemas.opengis.net/wms/1.3.0/capabilities_1_3_0.xsd">
+      <Service>
+        <Name>WMS</Name>
+      </Service>
+      <Capability>
+        <Request>
+          <GetCapabilities>
+            <Format>text/xml</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetCapabilities>
+          <GetMap>
+            <Format>image/png</Format>
+            <Format>image/jpeg</Format>
+            <Format>image/gif</Format>
+            <DCPType>
+              <HTTP>
+                <Get>
+                  <OnlineResource xlink:type="simple"/>
+                </Get>
+                <Post>
+                  <OnlineResource xlink:type="simple"/>
+                </Post>
+              </HTTP>
+            </DCPType>
+          </GetMap>
+        </Request>
+        <Exception>
+          <Format>XML</Format>
+        </Exception>
+        <Layer>
+          <Title>A Mapnik WMS Server</Title>
+          <Abstract>A Mapnik WMS Server</Abstract>
+          <CRS/>
+        </Layer>
+      </Capability>
+    </WMS_Capabilities>
+    """
+
+    def __init__(self, configpath, factory, opsonlineresource):
+        self.factory = factory
+        self.conf = SafeConfigParser()
+        self.conf.readfp(open(configpath))
+        if self.conf.has_option('service', 'epsg'):
+            self.crs = CRS('EPSG', self.conf.get('service', 'epsg'))
+        else:
+            raise ServerConfigurationError('EPSG code not properly configured.')
+        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
+
+        capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
+        
+        elements = capetree.findall('{http://www.opengis.net/wms}Capability//{http://www.opengis.net/wms}OnlineResource')
+        for element in elements:
+            element.set('{http://www.w3.org/1999/xlink}href', opsonlineresource)
+
+        if len(self.conf.items('service')) > 0:
+            servicee = capetree.find('{http://www.opengis.net/wms}Service')
+            for item in self.CONF_SERVICE:
+                if self.conf.has_option('service', item[0]):
+                    value = self.conf.get('service', item[0])
+                    try:
+                        item[2](value)
+                    except:
+                        raise ServerConfigurationError('Configuration parameter [%s]->%s has an invalid value: %s.' % ('service', item[0], value))
+                    if item[0] == 'onlineresource':
+                        element = ElementTree.Element('%s' % item[1])
+                        servicee.append(element)
+                        element.set('{http://www.w3.org/1999/xlink}href', value)
+                        element.set('{http://www.w3.org/1999/xlink}type', 'simple')
+                    else:
+                        element = ElementTree.Element('%s' % item[1])
+                        element.text = value
+                        servicee.append(element)
+
+        
+        rootlayerelem = capetree.find('{http://www.opengis.net/wms}Capability/{http://www.opengis.net/wms}Layer')
+
+        rootlayercrs = rootlayerelem.find('{http://www.opengis.net/wms}CRS')
+        rootlayercrs.text = str(self.crs)
+        
+        dict = self.factory()
+        
+        for layer in dict['layers']:
+            layername = ElementTree.Element('Name')
+            layername.text = layer.name()
+            layertitle = ElementTree.Element('Title')
+            layertitle.text = layer.name()
+            env = layer.envelope()
+            layerexgbb = ElementTree.Element('EX_GeographicBoundingBox')
+            ll = self.crs.Inverse(env.minx, env.miny)
+            ur = self.crs.Inverse(env.maxx, env.maxy)
+            exgbb_wbl = ElementTree.Element('westBoundLongitude')
+            exgbb_wbl.text = str(ll[0])
+            layerexgbb.append(exgbb_wbl)
+            exgbb_ebl = ElementTree.Element('eastBoundLongitude')
+            exgbb_ebl.text = str(ur[0])
+            layerexgbb.append(exgbb_ebl)
+            exgbb_sbl = ElementTree.Element('southBoundLatitude')
+            exgbb_sbl.text = str(ll[1])
+            layerexgbb.append(exgbb_sbl)
+            exgbb_nbl = ElementTree.Element('northBoundLatitude')
+            exgbb_nbl.text = str(ur[1])
+            layerexgbb.append(exgbb_nbl)
+            layerbbox = ElementTree.Element('BoundingBox')
+            layerbbox.set('CRS', str(self.crs))
+            layerbbox.set('minx', str(env.minx))
+            layerbbox.set('miny', str(env.miny))
+            layerbbox.set('maxx', str(env.maxx))
+            layerbbox.set('maxy', str(env.maxy))
+            layere = ElementTree.Element('Layer')
+            layere.append(layername)
+            layere.append(layertitle)
+            layere.append(layerexgbb)
+            layere.append(layerbbox)
+            rootlayerelem.append(layere)
+        
+        self.capabilities = '<?xml version="1.0" encoding="UTF-8"?>' + ElementTree.tostring(capetree)
+
+    def getcapabilities(self, params):
+        response = Response('text/xml', self.capabilities)
+        return response
+        
+    def getmap(self, params):
+        if params['width'] > int(self.conf.get('service', 'maxwidth')) or params['height'] > int(self.conf.get('service', 'maxheight')):
+            raise OGCException('Requested map size exceeds limits set by this server.')
+        return WMSBaseServiceHandler.getmap(self, params)
+
+class ExceptionHandler(BaseExceptionHandler):
+    
+    mimetype = "text/xml"
+    
+    xmltemplate = ElementTree.fromstring("""<?xml version='1.0' encoding="UTF-8"?>
+    <ServiceExceptionReport version="1.3.0"
+                            xmlns="http://www.opengis.net/ogc"
+                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+                            xsi:schemaLocation="http://www.opengis.net/ogc http://schemas.opengis.net/wms/1.3.0/exceptions_1_3_0.xsd">
+      <ServiceException/>
+    </ServiceExceptionReport>
+    """)
+    
+    xpath = '{http://www.opengis.net/ogc}ServiceException'
\ No newline at end of file


Property changes on: trunk/bindings/python/mapnik/ogcserver/wms130.py
___________________________________________________________________
Name: svn:keywords
   + Id



From jdoyon at berlios.de  Mon Apr 10 08:20:26 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Mon, 10 Apr 2006 08:20:26 +0200
Subject: [Mapnik-svn] r228 - in trunk: bindings/python/mapnik/ogcserver utils utils/ogcserver
Message-ID: <200604100620.k3A6KQO1005428@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-10 08:19:27 +0200 (Mon, 10 Apr 2006)
New Revision: 228

Added:
   trunk/utils/ogcserver/
   trunk/utils/ogcserver/ogcserver.cgi
   trunk/utils/ogcserver/ogcserver.conf
Modified:
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/wms.py
   trunk/bindings/python/mapnik/ogcserver/wms111.py
   trunk/bindings/python/mapnik/ogcserver/wms130.py
Log:
- Add the CGI executable, and a sample configuration file
- Various code optimizations:
  - Remove unnecessary imports
  - Better share/re-use objects
  - Move more work to initialization, to optimize for FastCGI

Modified: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-08 21:53:36 UTC (rev 227)
+++ trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-10 06:19:27 UTC (rev 228)
@@ -19,22 +19,25 @@
 #
 # $Id$
 
-from os import environ, access
+from os import environ
 from tempfile import gettempdir
 environ['PYTHON_EGG_CACHE'] = gettempdir()
 
-import jon.cgi as cgi
+import sys
+from jon import cgi
 from exceptions import OGCException
-import sys
-from copy import deepcopy
-from traceback import print_tb
-from StringIO import StringIO
 from wms130 import ExceptionHandler
 from lxml import etree as ElementTree
+from ConfigParser import SafeConfigParser
 
 class Handler(cgi.DebugHandler):
 
     def __init__(self):
+        conf = SafeConfigParser()
+        conf.readfp(open(self.configpath))
+        self.conf = conf
+        mapfactorymodule = __import__(conf.get('server', 'mapfactorymodule'))
+        self.mapfactory = getattr(mapfactorymodule, conf.get('server', 'mapfactoryclass'))()
         self.requesthandlers = {}
 
     def process(self, req):
@@ -60,8 +63,8 @@
                     mapnikmodule = __import__('mapnik.ogcserver.' + service)
                 except:
                     raise OGCException('Unsupported service "%s".' % service)
-                ServiceFactory = getattr(mapnikmodule.ogcserver, service).ServiceFactory
-                servicehandler, exceptionhandler = ServiceFactory(self.configpath, self.factory, onlineresource, reqparams.get('version', None))
+                ServiceHandlerFactory = getattr(mapnikmodule.ogcserver, service).ServiceHandlerFactory
+                servicehandler, exceptionhandler = ServiceHandlerFactory(self.conf, self.mapfactory, onlineresource, reqparams.get('version', None))
                 if request not in servicehandler.SERVICE_PARAMS.keys():
                     raise OGCException('Operation "%s" not supported.' % request, 'OperationNotSupported')
                 ogcparams = servicehandler.processParameters(request, reqparams)
@@ -73,10 +76,9 @@
                     self.requesthandlers[srkey] = requesthandler
             response = requesthandler(ogcparams)
         except OGCException:
-            exc_type, exc_value, exc_tb = sys.exc_info()
             eh = exceptionhandler()
             req.set_header('Content-Type', eh.mimetype)
-            req.write(ElementTree.tostring(eh.getexcetree(exc_value)))
+            req.write(ElementTree.tostring(eh.getexcetree(sys.exc_info()[1])))
         else:
             req.set_header('Content-Type', response.content_type)
             req.write(response.content)
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-08 21:53:36 UTC (rev 227)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-10 06:19:27 UTC (rev 228)
@@ -200,13 +200,14 @@
         m = Map(params['width'], params['height'])
         if params.has_key('transparent') and params['transparent'] == 'FALSE':
             m.background = params['bgcolor']
-        mo = self.factory()
+        maplayers = self.mapfactory.getlayers()
+        mapstyles = self.mapfactory.getstyles()
         for layername in params['layers']:
-            for layer in mo['layers']:
+            for layer in maplayers:
                 if layer.name() == layername:
                     for stylename in layer.styles:
-                        if stylename in mo['styles'].keys():
-                            m.append_style(stylename, mo['styles'][stylename])
+                        if stylename in mapstyles.keys():
+                            m.append_style(stylename, mapstyles[stylename])
                     m.layers.append(layer)
         m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
         im = Image(params['width'], params['height'])

Modified: trunk/bindings/python/mapnik/ogcserver/wms.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-08 21:53:36 UTC (rev 227)
+++ trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-10 06:19:27 UTC (rev 228)
@@ -26,16 +26,13 @@
 from wms130 import ServiceHandler as ServiceHandler130, \
                    ExceptionHandler as ExceptionHandler130
 
-def ServiceFactory(configpath, factory, onlineresource, version):
+def ServiceHandlerFactory(conf, mapfactory, onlineresource, version):
 
     if not version:
         version = Version('1.3.0')
     else:
-        try:
-            version = Version(version)
-        except:
-            raise OGCException('Parameter "version" is not properly formatted.  Format must be "x.x.x".')
+        version = Version(version)
     if version >= '1.3.0':
-        return (ServiceHandler130(configpath, factory, onlineresource), ExceptionHandler130)
+        return (ServiceHandler130(conf, mapfactory, onlineresource), ExceptionHandler130)
     else:
-        return (ServiceHandler111(configpath, factory, onlineresource), ExceptionHandler111)
\ No newline at end of file
+        return (ServiceHandler111(conf, mapfactory, onlineresource), ExceptionHandler111)
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms111.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-08 21:53:36 UTC (rev 227)
+++ trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-10 06:19:27 UTC (rev 228)
@@ -19,11 +19,9 @@
 #
 # $Id$
 
-from common import ParameterDefinition, BaseServiceHandler, Response, \
-                   PIL_TYPE_MAPPING, Version, ListFactory, ColorFactory, \
-                   CRSFactory, WMSBaseServiceHandler, CRS
+from common import ParameterDefinition, Response, Version, ListFactory, \
+                   ColorFactory, CRSFactory, WMSBaseServiceHandler, CRS
 from exceptions import OGCException, ServerConfigurationError, BaseExceptionHandler
-from ConfigParser import SafeConfigParser
 from lxml import etree as ElementTree
 
 class ServiceHandler(WMSBaseServiceHandler):
@@ -104,10 +102,9 @@
     </WMT_MS_Capabilities>
     """
 
-    def __init__(self, configpath, factory, opsonlineresource):
-        self.factory = factory
-        self.conf = SafeConfigParser()
-        self.conf.readfp(open(configpath))
+    def __init__(self, conf, mapfactory, opsonlineresource):
+        self.conf = conf
+        self.mapfactory = mapfactory
         if self.conf.has_option('service', 'epsg'):
             self.crs = CRS('EPSG', self.conf.get('service', 'epsg'))
         else:
@@ -144,9 +141,7 @@
         rootlayersrs = rootlayerelem.find('SRS')
         rootlayersrs.text = str(self.crs)
 
-        dict = self.factory()
-
-        for layer in dict['layers']:
+        for layer in self.mapfactory.getlayers():
             layername = ElementTree.Element('Name')
             layername.text = layer.name()
             layertitle = ElementTree.Element('Title')

Modified: trunk/bindings/python/mapnik/ogcserver/wms130.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-08 21:53:36 UTC (rev 227)
+++ trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-10 06:19:27 UTC (rev 228)
@@ -19,10 +19,9 @@
 #
 # $Id$
 
-from common import ParameterDefinition, Response, PIL_TYPE_MAPPING, Version, \
-                   ListFactory, ColorFactory, CRSFactory, CRS, WMSBaseServiceHandler
+from common import ParameterDefinition, Response, Version, ListFactory, \
+                   ColorFactory, CRSFactory, CRS, WMSBaseServiceHandler
 from exceptions import OGCException, ServerConfigurationError, BaseExceptionHandler
-from ConfigParser import SafeConfigParser
 from lxml import etree as ElementTree
 
 class ServiceHandler(WMSBaseServiceHandler):
@@ -109,10 +108,9 @@
     </WMS_Capabilities>
     """
 
-    def __init__(self, configpath, factory, opsonlineresource):
-        self.factory = factory
-        self.conf = SafeConfigParser()
-        self.conf.readfp(open(configpath))
+    def __init__(self, conf, mapfactory, opsonlineresource):
+        self.conf = conf
+        self.mapfactory = mapfactory
         if self.conf.has_option('service', 'epsg'):
             self.crs = CRS('EPSG', self.conf.get('service', 'epsg'))
         else:
@@ -150,9 +148,7 @@
         rootlayercrs = rootlayerelem.find('{http://www.opengis.net/wms}CRS')
         rootlayercrs.text = str(self.crs)
         
-        dict = self.factory()
-        
-        for layer in dict['layers']:
+        for layer in self.mapfactory.getlayers():
             layername = ElementTree.Element('Name')
             layername.text = layer.name()
             layertitle = ElementTree.Element('Title')

Added: trunk/utils/ogcserver/ogcserver.cgi
===================================================================
--- trunk/utils/ogcserver/ogcserver.cgi	2006-04-08 21:53:36 UTC (rev 227)
+++ trunk/utils/ogcserver/ogcserver.cgi	2006-04-10 06:19:27 UTC (rev 228)
@@ -0,0 +1,29 @@
+#!/usr/bin/python2.3
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+from mapnik.ogcserver.cgiserver import Handler
+from jon import cgi
+
+class OGCServerHandler(Handler):
+    configpath = '/etc/ogcserver.conf'
+
+cgi.CGIRequest(OGCServerHandler).process()


Property changes on: trunk/utils/ogcserver/ogcserver.cgi
___________________________________________________________________
Name: svn:keywords
   + Id

Added: trunk/utils/ogcserver/ogcserver.conf
===================================================================
--- trunk/utils/ogcserver/ogcserver.conf	2006-04-08 21:53:36 UTC (rev 227)
+++ trunk/utils/ogcserver/ogcserver.conf	2006-04-10 06:19:27 UTC (rev 228)
@@ -0,0 +1,14 @@
+# $Id$
+
+[server]
+mapfactorymodule=rundemo
+mapfactoryclass=MapFactory
+
+[service]
+name=WMS
+title=Test OGC Server
+abstract=Blah Blah Blah
+maxheight=1024
+maxwidth=1024
+epsg=42304
+onlineresource=http://www.mapnik.org/


Property changes on: trunk/utils/ogcserver/ogcserver.conf
___________________________________________________________________
Name: svn:keywords
   + Id



From jdoyon at berlios.de  Tue Apr 11 02:33:35 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Tue, 11 Apr 2006 02:33:35 +0200
Subject: [Mapnik-svn] r229 - trunk/utils/ogcserver
Message-ID: <200604110033.k3B0XZZA029388@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-11 02:33:24 +0200 (Tue, 11 Apr 2006)
New Revision: 229

Added:
   trunk/utils/ogcserver/ogcserver
Removed:
   trunk/utils/ogcserver/ogcserver.cgi
Modified:
   trunk/utils/ogcserver/ogcserver.conf
Log:
A CGI/FastCGI compatible ogcserver executable written in python,
as well as a sample config file.

Copied: trunk/utils/ogcserver/ogcserver (from rev 228, trunk/utils/ogcserver/ogcserver.cgi)
===================================================================
--- trunk/utils/ogcserver/ogcserver.cgi	2006-04-10 06:19:27 UTC (rev 228)
+++ trunk/utils/ogcserver/ogcserver	2006-04-11 00:33:24 UTC (rev 229)
@@ -0,0 +1,29 @@
+#!/usr/bin/python2.3
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+from mapnik.ogcserver.cgiserver import Handler
+from jon import fcgi
+
+class OGCServerHandler(Handler):
+    configpath = '/etc/ogcserver.conf'
+
+fcgi.Server({fcgi.FCGI_RESPONDER: OGCServerHandler}).run()

Deleted: trunk/utils/ogcserver/ogcserver.cgi
===================================================================
--- trunk/utils/ogcserver/ogcserver.cgi	2006-04-10 06:19:27 UTC (rev 228)
+++ trunk/utils/ogcserver/ogcserver.cgi	2006-04-11 00:33:24 UTC (rev 229)
@@ -1,29 +0,0 @@
-#!/usr/bin/python2.3
-#
-# This file is part of Mapnik (c++ mapping toolkit)
-#
-# Copyright (C) 2006 Jean-Francois Doyon
-#
-# Mapnik is free software; you can redistribute it and/or
-# modify it under the terms of the GNU Lesser General Public
-# License as published by the Free Software Foundation; either
-# version 2.1 of the License, or (at your option) any later version.
-#
-# This library is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-# Lesser General Public License for more details.
-#
-# You should have received a copy of the GNU Lesser General Public
-# License along with this library; if not, write to the Free Software
-# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
-# $Id$
-
-from mapnik.ogcserver.cgiserver import Handler
-from jon import cgi
-
-class OGCServerHandler(Handler):
-    configpath = '/etc/ogcserver.conf'
-
-cgi.CGIRequest(OGCServerHandler).process()

Modified: trunk/utils/ogcserver/ogcserver.conf
===================================================================
--- trunk/utils/ogcserver/ogcserver.conf	2006-04-10 06:19:27 UTC (rev 228)
+++ trunk/utils/ogcserver/ogcserver.conf	2006-04-11 00:33:24 UTC (rev 229)
@@ -1,11 +1,9 @@
 # $Id$
 
 [server]
-mapfactorymodule=rundemo
-mapfactoryclass=MapFactory
+module=rundemo
 
 [service]
-name=WMS
 title=Test OGC Server
 abstract=Blah Blah Blah
 maxheight=1024



From jdoyon at berlios.de  Tue Apr 11 02:36:15 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Tue, 11 Apr 2006 02:36:15 +0200
Subject: [Mapnik-svn] r230 - trunk/bindings/python/mapnik/ogcserver
Message-ID: <200604110036.k3B0aFUR029789@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-11 02:36:08 +0200 (Tue, 11 Apr 2006)
New Revision: 230

Modified:
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
Log:
- Add some more error checking
- Simplify configuration

Modified: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-11 00:33:24 UTC (rev 229)
+++ trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-11 00:36:08 UTC (rev 230)
@@ -36,8 +36,8 @@
         conf = SafeConfigParser()
         conf.readfp(open(self.configpath))
         self.conf = conf
-        mapfactorymodule = __import__(conf.get('server', 'mapfactorymodule'))
-        self.mapfactory = getattr(mapfactorymodule, conf.get('server', 'mapfactoryclass'))()
+        mapfactorymodule = __import__(conf.get('server', 'module'))
+        self.mapfactory = getattr(mapfactorymodule, 'MapFactory')()
         self.requesthandlers = {}
 
     def process(self, req):

Modified: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-11 00:33:24 UTC (rev 229)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-11 00:36:08 UTC (rev 230)
@@ -197,6 +197,10 @@
     def getmap(self, params):
         if str(params['crs']) != str(self.crs):
             raise OGCException('Unsupported CRS requested.  Must be "%s" and not "%s".' % (self.crs, params['crs']), 'InvalidCRS')
+        if params['bbox'][0] >= params['bbox'][2]:
+            raise OGCException("BBOX values don't make sense.  minx is greater than maxx.")
+        if params['bbox'][1] >= params['bbox'][3]:
+            raise OGCException("BBOX values don't make sense.  miny is greater than maxy.")
         m = Map(params['width'], params['height'])
         if params.has_key('transparent') and params['transparent'] == 'FALSE':
             m.background = params['bgcolor']
@@ -209,6 +213,9 @@
                         if stylename in mapstyles.keys():
                             m.append_style(stylename, mapstyles[stylename])
                     m.layers.append(layer)
+        if len(m.layers) != len(params['layers']):
+            badnames = [ layername for layername in params['layers'] if layername not in [ layer.name() for layer in m.layers ] ]
+            raise OGCException('The following layers are not defined by this server: %s.' % ','.join(badnames), 'LayerNotDefined')
         m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
         im = Image(params['width'], params['height'])
         render(m, im)



From jdoyon at berlios.de  Tue Apr 11 05:00:42 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Tue, 11 Apr 2006 05:00:42 +0200
Subject: [Mapnik-svn] r231 - in trunk: docs docs/ogcserver utils/ogcserver
Message-ID: <200604110300.k3B30g12000442@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-11 05:00:39 +0200 (Tue, 11 Apr 2006)
New Revision: 231

Added:
   trunk/docs/ogcserver/
   trunk/docs/ogcserver/readme.txt
Modified:
   trunk/utils/ogcserver/ogcserver.conf
Log:
Documentation for the ogcserver.

Added: trunk/docs/ogcserver/readme.txt
===================================================================
--- trunk/docs/ogcserver/readme.txt	2006-04-11 00:36:08 UTC (rev 230)
+++ trunk/docs/ogcserver/readme.txt	2006-04-11 03:00:39 UTC (rev 231)
@@ -0,0 +1,97 @@
+# $Id$
+
+Mapnik OGC Server
+-----------------
+
+Introduction
+------------
+
+	Mapnik provides an OGC server package to allow the publishing of maps
+through open and standard interfaces.  It is in implemented in Python.
+
+
+Features/Caveats
+----------------
+
+- WMS 1.1.1 and 1.3.0
+- CGI/FastCGI
+- GetCapabilities and GetMap support only
+- GIF/JPEG/PNG output
+- XML error handling only
+- No real layer metadata support yet
+
+
+Dependencies
+------------
+
+Please properly install the following before proceeding further:
+
+- jonpy (http://jonpy.sourceforge.net/)
+- lxml (http://codespeak.net/lxml/)
+- PIL (http://www.pythonware.com/products/pil)
+- PROJ.4 (http://proj.maptools.org/)
+
+
+Installation
+------------
+
+- Make sure you compile or re-compile Mapnik after installing PROJ.4, if this
+  was not done already.  Mapnik includes a Python API to the PROJ.4 library
+  used by the ogcserver.  The PROJ_INCLUDES and PROJ_LIBS parameters can
+  be passed to mapnik's scons build script to help with this.
+  
+  You can test the availability of the PROJ.4 bindings by trying:
+  
+  $ python
+  Python 2.3.4 (#1, Feb 22 2005, 04:09:37)
+  [GCC 3.4.3 20041212 (Red Hat 3.4.3-9.EL4)] on linux2
+  Type "help", "copyright", "credits" or "license" for more information.
+  >>> from mapnik import Projection
+  registered datasource : raster
+  registered datasource : shape
+  registered datasource : postgis
+  >>>
+
+- The executable "ogcserver" in utils/ogcserver will work for both CGI and
+  FastCGI operations.  Where to place it will depend on your server's
+  configuration and is beyond this documentation.  For information on FastCGI
+  go to http://www.fastcgi.com/.
+
+
+Configuring the server
+----------------------
+
+- You will need to edit the ogcserver executable for now.  It is a simple
+  Python text script.
+  
+  1) Edit the path to the interpreter in the first line.
+  2) Edit the path to the config file if you don't like the default.
+  
+- Copy the sample configuration "ogcserver.conf" file in utils/ogcserver to
+  the location you specified in the previous step.
+  
+- Edit the file to your liking, the comments within the file will help you
+  further.  Be sure to at the very minimum edit the "module" parameter, the
+  server will not work without you setting it properly first.
+  
+
+Creating a map for use by the ogcserver
+---------------------------------------
+
+	The ogcserver obviously needs a map to publish.  For now, with Mapnik, this
+can only be done by writing code. In this case, a Python script will need to be
+written to describe the map's layers and styles.  For information on the Python
+API, look in demo/python, or in docs/epydocs.
+
+	The server needs a module, and a class that looks like this:
+	
+class MapFactory:
+
+	def __init(self):
+		...
+	
+	def getlayers(self):
+		...
+	
+	def getstyles(self):
+		...
\ No newline at end of file


Property changes on: trunk/docs/ogcserver/readme.txt
___________________________________________________________________
Name: svn:keywords
   + Id

Modified: trunk/utils/ogcserver/ogcserver.conf
===================================================================
--- trunk/utils/ogcserver/ogcserver.conf	2006-04-11 00:36:08 UTC (rev 230)
+++ trunk/utils/ogcserver/ogcserver.conf	2006-04-11 03:00:39 UTC (rev 231)
@@ -1,12 +1,39 @@
 # $Id$
 
+# server: This section contains software related configuration parameters.
+
 [server]
-module=rundemo
 
+# module:  The module containing the MapFactory class.  See the readme for
+#          details.
+
+module=CHANGEME
+
+# service: This section contains service level metadata.
+
 [service]
-title=Test OGC Server
-abstract=Blah Blah Blah
+
+# title: The title of the server.
+
+title=Mapnik OGC Server
+
+# abstract: An abstract describing the server.
+
+abstract=This abstract describes the server and its contents.
+
+# maxwidth, maxheight: The maximum size that a map will be supplied at.
+#                      Exceeding it will raise an error in the client.
+
 maxheight=1024
 maxwidth=1024
-epsg=42304
+
+# epsg:  The epsg code defining the projection of the source data used in the
+#        map.
+
+epsg=4326
+
+# onlineresource:  A service level URL most likely pointing to the web site
+#                  supporting the service for example.  This is NOT the online
+#                  resource pointing to the CGI.
+
 onlineresource=http://www.mapnik.org/



From jdoyon at berlios.de  Thu Apr 13 04:39:55 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Thu, 13 Apr 2006 04:39:55 +0200
Subject: [Mapnik-svn] r232 - in trunk: bindings/python/mapnik/ogcserver docs/ogcserver utils/ogcserver
Message-ID: <200604130239.k3D2dtMV020474@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-13 04:39:49 +0200 (Thu, 13 Apr 2006)
New Revision: 232

Modified:
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/wms.py
   trunk/bindings/python/mapnik/ogcserver/wms111.py
   trunk/bindings/python/mapnik/ogcserver/wms130.py
   trunk/docs/ogcserver/readme.txt
   trunk/utils/ogcserver/ogcserver.conf
Log:
- Improve WMS compliance
- Remove unused code
- Rework layer and style bulding
- minor doc changes

Modified: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-11 03:00:39 UTC (rev 231)
+++ trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-13 02:39:49 UTC (rev 232)
@@ -37,48 +37,44 @@
         conf.readfp(open(self.configpath))
         self.conf = conf
         mapfactorymodule = __import__(conf.get('server', 'module'))
-        self.mapfactory = getattr(mapfactorymodule, 'MapFactory')()
-        self.requesthandlers = {}
+        self.mapfactory = getattr(mapfactorymodule, 'WMSFactory')()
 
     def process(self, req):
         exceptionhandler = ExceptionHandler
         reqparams = {}
         for key, value in req.params.items():
             reqparams[key.lower()] = value
-        onlineresource = 'http://%s:%s%s' % (req.environ['SERVER_NAME'], req.environ['SERVER_PORT'], req.environ['SCRIPT_NAME'])
+        onlineresource = 'http://%s:%s%s?' % (req.environ['SERVER_NAME'], req.environ['SERVER_PORT'], req.environ['SCRIPT_NAME'])
+#        try:
+        if not reqparams.has_key('request'):
+            raise OGCException('Missing request parameter.')
+        if reqparams['request'] == 'GetCapabilities' and not reqparams.has_key('service'):
+            raise OGCException('Missing service parameter.')
+        if reqparams['request'] in ['GetMap', 'GetFeatureInfo']:
+            reqparams['service'] = 'wms'
+        service = reqparams['service'].lower()
         try:
-            if not reqparams.has_key('request'):
-                raise OGCException('Missing request parameter.')
-            request = reqparams['request'].lower()
-            if request == 'getcapabilities' and not reqparams.has_key('service'):
-                raise OGCException('Missing service parameter.')
-            if request in ['getmap', 'getfeatureinfo']:
-                reqparams['service'] = 'wms'
-            service = reqparams['service'].lower()
-            srkey = (service, request)
-            if self.requesthandlers.has_key(srkey):
-                requesthandler = self.requesthandlers[srkey]
-            else:
-                try:
-                    mapnikmodule = __import__('mapnik.ogcserver.' + service)
-                except:
-                    raise OGCException('Unsupported service "%s".' % service)
-                ServiceHandlerFactory = getattr(mapnikmodule.ogcserver, service).ServiceHandlerFactory
-                servicehandler, exceptionhandler = ServiceHandlerFactory(self.conf, self.mapfactory, onlineresource, reqparams.get('version', None))
-                if request not in servicehandler.SERVICE_PARAMS.keys():
-                    raise OGCException('Operation "%s" not supported.' % request, 'OperationNotSupported')
-                ogcparams = servicehandler.processParameters(request, reqparams)
-                try:
-                    requesthandler = getattr(servicehandler, request)
-                except:
-                    raise OGCException('Operation "%s" not supported.' % request, 'OperationNotSupported')
-                else:
-                    self.requesthandlers[srkey] = requesthandler
-            response = requesthandler(ogcparams)
+            mapnikmodule = __import__('mapnik.ogcserver.' + service)
+        except:
+            raise OGCException('Unsupported service "%s".' % service)
+        ServiceHandlerFactory = getattr(mapnikmodule.ogcserver, service).ServiceHandlerFactory
+        servicehandler, exceptionhandler = ServiceHandlerFactory(self.conf, self.mapfactory, onlineresource, reqparams.get('version', None))
+        if reqparams['request'] not in servicehandler.SERVICE_PARAMS.keys():
+            raise OGCException('Operation "%s" not supported.' % reqparams['request'], 'OperationNotSupported')
+        ogcparams = servicehandler.processParameters(reqparams['request'], reqparams)
+        try:
+            requesthandler = getattr(servicehandler, reqparams['request'])
+        except:
+            raise OGCException('Operation "%s" not supported.' % reqparams['request'], 'OperationNotSupported')
+        response = requesthandler(ogcparams)
+#        except:
+#            raise
+#        else:
+        req.set_header('Content-Type', response.content_type)
+        req.write(response.content)
+        """
         except OGCException:
             eh = exceptionhandler()
             req.set_header('Content-Type', eh.mimetype)
             req.write(ElementTree.tostring(eh.getexcetree(sys.exc_info()[1])))
-        else:
-            req.set_header('Content-Type', response.content_type)
-            req.write(response.content)
\ No newline at end of file
+        """
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-11 03:00:39 UTC (rev 231)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-13 02:39:49 UTC (rev 232)
@@ -194,7 +194,7 @@
 
 class WMSBaseServiceHandler(BaseServiceHandler):
     
-    def getmap(self, params):
+    def GetMap(self, params):
         if str(params['crs']) != str(self.crs):
             raise OGCException('Unsupported CRS requested.  Must be "%s" and not "%s".' % (self.crs, params['crs']), 'InvalidCRS')
         if params['bbox'][0] >= params['bbox'][2]:

Modified: trunk/bindings/python/mapnik/ogcserver/wms.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-11 03:00:39 UTC (rev 231)
+++ trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-13 02:39:49 UTC (rev 232)
@@ -35,4 +35,12 @@
     if version >= '1.3.0':
         return (ServiceHandler130(conf, mapfactory, onlineresource), ExceptionHandler130)
     else:
-        return (ServiceHandler111(conf, mapfactory, onlineresource), ExceptionHandler111)
\ No newline at end of file
+        return (ServiceHandler111(conf, mapfactory, onlineresource), ExceptionHandler111)
+
+class BaseWMSFactory:
+    
+    def registerLayer(self, layer):
+        pass
+    
+    def registerStyle(self, name, style):
+        pass
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms111.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-11 03:00:39 UTC (rev 231)
+++ trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-13 02:39:49 UTC (rev 232)
@@ -27,10 +27,10 @@
 class ServiceHandler(WMSBaseServiceHandler):
 
     SERVICE_PARAMS = {
-        'getcapabilities': {
+        'GetCapabilities': {
             'updatesequence': ParameterDefinition(False, str)
         },
-        'getmap': {
+        'GetMap': {
             'version': ParameterDefinition(True, Version, allowedvalues=(Version('1.1.1'),)),
             'layers': ParameterDefinition(True, ListFactory(str)),
             'styles': ParameterDefinition(True, ListFactory(str)),
@@ -109,7 +109,6 @@
             self.crs = CRS('EPSG', self.conf.get('service', 'epsg'))
         else:
             ServerConfigurationError('EPSG code not properly configured.')
-        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
 
         capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
         
@@ -169,7 +168,7 @@
         
         self.capabilities = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' + ElementTree.tostring(capetree)
 
-    def getcapabilities(self, params):
+    def GetCapabilities(self, params):
         response = Response('application/vnd.ogc.wms_xml', self.capabilities)
         return response
 

Modified: trunk/bindings/python/mapnik/ogcserver/wms130.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-11 03:00:39 UTC (rev 231)
+++ trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-13 02:39:49 UTC (rev 232)
@@ -27,11 +27,11 @@
 class ServiceHandler(WMSBaseServiceHandler):
 
     SERVICE_PARAMS = {
-        'getcapabilities': {
+        'GetCapabilities': {
             'format': ParameterDefinition(False, str, 'text/xml', ('text/xml',), True),
             'updatesequence': ParameterDefinition(False, str)
         },
-        'getmap': {
+        'GetMap': {
             'version': ParameterDefinition(True, Version, allowedvalues=(Version('1.3.0'),)),
             'layers': ParameterDefinition(True, ListFactory(str)),
             'styles': ParameterDefinition(True, ListFactory(str)),
@@ -115,7 +115,6 @@
             self.crs = CRS('EPSG', self.conf.get('service', 'epsg'))
         else:
             raise ServerConfigurationError('EPSG code not properly configured.')
-        if not opsonlineresource.endswith('?'): opsonlineresource += '?'
 
         capetree = ElementTree.fromstring(self.capabilitiesxmltemplate)
         
@@ -184,14 +183,14 @@
         
         self.capabilities = '<?xml version="1.0" encoding="UTF-8"?>' + ElementTree.tostring(capetree)
 
-    def getcapabilities(self, params):
+    def GetCapabilities(self, params):
         response = Response('text/xml', self.capabilities)
         return response
         
-    def getmap(self, params):
+    def GetMap(self, params):
         if params['width'] > int(self.conf.get('service', 'maxwidth')) or params['height'] > int(self.conf.get('service', 'maxheight')):
             raise OGCException('Requested map size exceeds limits set by this server.')
-        return WMSBaseServiceHandler.getmap(self, params)
+        return WMSBaseServiceHandler.GetMap(self, params)
 
 class ExceptionHandler(BaseExceptionHandler):
     

Modified: trunk/docs/ogcserver/readme.txt
===================================================================
--- trunk/docs/ogcserver/readme.txt	2006-04-11 03:00:39 UTC (rev 231)
+++ trunk/docs/ogcserver/readme.txt	2006-04-13 02:39:49 UTC (rev 232)
@@ -3,11 +3,14 @@
 Mapnik OGC Server
 -----------------
 
+
 Introduction
 ------------
 
-	Mapnik provides an OGC server package to allow the publishing of maps
-through open and standard interfaces.  It is in implemented in Python.
+	Mapnik provides a server package to allow the publishing of maps
+through the open and standard WMS interface published by the Open Geospatial
+Consortium (OGC).  It is in implemented in Python, around the core C++
+library.
 
 
 Features/Caveats
@@ -19,6 +22,7 @@
 - GIF/JPEG/PNG output
 - XML error handling only
 - No real layer metadata support yet
+- No re-projection support
 
 
 Dependencies
@@ -70,21 +74,23 @@
 - Copy the sample configuration "ogcserver.conf" file in utils/ogcserver to
   the location you specified in the previous step.
   
-- Edit the file to your liking, the comments within the file will help you
-  further.  Be sure to at the very minimum edit the "module" parameter, the
-  server will not work without you setting it properly first.
+- Edit the configuration file to your liking, the comments within the file will
+  help you further.  Be sure to at the very minimum edit the "module"
+  parameter, the server will not work without you setting it properly first.
   
 
-Creating a map for use by the ogcserver
----------------------------------------
+Defining layers and styles for use by the ogcserver
+---------------------------------------------------
 
-	The ogcserver obviously needs a map to publish.  For now, with Mapnik, this
+	The ogcserver obviously needs layers to publish.  For now, with Mapnik, this
 can only be done by writing code. In this case, a Python script will need to be
-written to describe the map's layers and styles.  For information on the Python
+written to describe the layers and respective styles.  For information on the Python
 API, look in demo/python, or in docs/epydocs.
 
-	The server needs a module, and a class that looks like this:
-	
+The server needs a python module, with code that looks like this:
+
+from mapnik.ogcserver.wms import BaseWMSFactory
+
 class MapFactory:
 
 	def __init(self):

Modified: trunk/utils/ogcserver/ogcserver.conf
===================================================================
--- trunk/utils/ogcserver/ogcserver.conf	2006-04-11 03:00:39 UTC (rev 231)
+++ trunk/utils/ogcserver/ogcserver.conf	2006-04-13 02:39:49 UTC (rev 232)
@@ -37,3 +37,7 @@
 #                  resource pointing to the CGI.
 
 onlineresource=http://www.mapnik.org/
+
+[contact]
+name=
+email=



From jdoyon at berlios.de  Fri Apr 14 05:46:10 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Fri, 14 Apr 2006 05:46:10 +0200
Subject: [Mapnik-svn] r233 - in trunk: . bindings/python/mapnik/ogcserver docs/ogcserver utils/ogcserver
Message-ID: <200604140346.k3E3kAUb020609@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-14 05:45:46 +0200 (Fri, 14 Apr 2006)
New Revision: 233

Added:
   trunk/bindings/python/mapnik/ogcserver/WMS.py
Modified:
   trunk/INSTALL
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/exceptions.py
   trunk/bindings/python/mapnik/ogcserver/wms111.py
   trunk/bindings/python/mapnik/ogcserver/wms130.py
   trunk/docs/ogcserver/readme.txt
   trunk/utils/ogcserver/ogcserver.conf
Log:
OK, final fixes to the WMS stuff, cleaned up documentation, and so on.

Things should be good to go for a first try by the wider community!

Modified: trunk/INSTALL
===================================================================
--- trunk/INSTALL	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/INSTALL	2006-04-14 03:45:46 UTC (rev 233)
@@ -22,7 +22,8 @@
 - libtiff
 - libz
 - libfreetype2
-- (Optional) PostgreSQL libraries
+- (Optional) PostgreSQL libraries (For PostGIS support)
+- (Optional) PROJ.4 (More on this below)
 
 - Python 1.5.2 or greater to build Mapnik
 - (Optional) Python 2.2 or greater for the Python language bindings
@@ -33,6 +34,7 @@
 
 Also, a minimum of 256MB of RAM is recommended for the build process.
 
+
 Building
 --------
 
@@ -101,6 +103,14 @@
     default: /usr/lib
     actual: /usr/lib
 
+PROJ_INCLUDES: Search path for PROJ.4 include files ( /path/to/PROJ_INCLUDES )
+    default: /usr/local/include
+    actual: /usr/local/include
+
+PROJ_LIBS: Search path for PROJ.4 include files ( /path/to/PROJ_LIBS )
+    default: /usr/local/lib
+    actual: /usr/local/lib
+
 PYTHON: Python executable ( /path/to/PYTHON )
     default: /usr/bin/python
     actual: /usr/bin/python
@@ -146,6 +156,30 @@
 If you're using the default PREFIX, you will most likely need to be root to perform the install.
 
 
+A note on projection support
+----------------------------
+
+At this time Mapnik's core C++ library and map rendering engine does NOT support on-the-fly cartographic
+reprojections.
+
+Mapnik can however be configured to build the Python API to the PROJ.4 library.  This provides projection
+support through Python, and is used by the WMS ogcserver feature, since that server is written in Python.
+
+Here is an example on how to use it:
+
+>>> from mapnik import Projection
+registered datasource : raster
+registered datasource : shape
+registered datasource : postgis
+>>> p = Projection(['init=epsg:42304'])
+>>> p.Inverse(12345.245,143225.56)
+[-94.825927695613018, 50.290732340975467]
+>>>
+
+The Projection() instance provides Inverse() and Forward() methods.  For details on the possible parameters,
+see the PROJ.4 documentation.
+
+
 Test
 ----
 

Copied: trunk/bindings/python/mapnik/ogcserver/WMS.py (from rev 232, trunk/bindings/python/mapnik/ogcserver/wms.py)
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms.py	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/bindings/python/mapnik/ogcserver/WMS.py	2006-04-14 03:45:46 UTC (rev 233)
@@ -0,0 +1,53 @@
+#
+# This file is part of Mapnik (c++ mapping toolkit)
+#
+# Copyright (C) 2006 Jean-Francois Doyon
+#
+# Mapnik is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2.1 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this library; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# $Id$
+
+from common import Version
+from exceptions import OGCException, ServerConfigurationError
+from wms111 import ServiceHandler as ServiceHandler111
+from wms130 import ServiceHandler as ServiceHandler130
+
+def ServiceHandlerFactory(conf, mapfactory, onlineresource, version):
+
+    if not version:
+        version = Version('1.3.0')
+    else:
+        version = Version(version)
+    if version >= '1.3.0':
+        return ServiceHandler130(conf, mapfactory, onlineresource)
+    else:
+        return ServiceHandler111(conf, mapfactory, onlineresource)
+
+class BaseWMSFactory:
+    
+    def __init__(self):
+        self.layers = {}
+        self.styles = {}
+    
+    def register_layer(self, layer):
+        layername = layer.name()
+        if not layername:
+            raise ServerConfigurationError('There is an un-named layer.')
+        self.layers[layername] = layer
+    
+    def register_style(self, name, style):
+        if not name:
+            raise ServerConfigurationError('There is an un-named style.')
+        self.styles[name] = style
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-14 03:45:46 UTC (rev 233)
@@ -25,10 +25,11 @@
 
 import sys
 from jon import cgi
-from exceptions import OGCException
-from wms130 import ExceptionHandler
-from lxml import etree as ElementTree
+from exceptions import OGCException, ServerConfigurationError
+from wms111 import ExceptionHandler as ExceptionHandler111
+from wms130 import ExceptionHandler as ExceptionHandler130
 from ConfigParser import SafeConfigParser
+from common import Version
 
 class Handler(cgi.DebugHandler):
 
@@ -36,29 +37,36 @@
         conf = SafeConfigParser()
         conf.readfp(open(self.configpath))
         self.conf = conf
-        mapfactorymodule = __import__(conf.get('server', 'module'))
-        self.mapfactory = getattr(mapfactorymodule, 'WMSFactory')()
+        if not conf.has_option('server', 'module'):
+            raise ServerConfigurationError('The factory module is not defined in the configuration file.')
+        try:
+            mapfactorymodule = __import__(conf.get('server', 'module'))
+        except ImportError:
+            raise ServerConfigurationError('The factory module could not be loaded.')
+        if hasattr(mapfactorymodule, 'WMSFactory'):
+            self.mapfactory = getattr(mapfactorymodule, 'WMSFactory')()
+        else:
+            raise ServerConfigurationError('The factory module does not have a WMSFactory class.')
+        if conf.has_option('server', 'debug'):
+            self.debug = int(conf.get('server', 'debug'))
+        else:
+            self.debug = 0
 
     def process(self, req):
-        exceptionhandler = ExceptionHandler
-        reqparams = {}
-        for key, value in req.params.items():
-            reqparams[key.lower()] = value
+        reqparams = lowerparams(req.params)
         onlineresource = 'http://%s:%s%s?' % (req.environ['SERVER_NAME'], req.environ['SERVER_PORT'], req.environ['SCRIPT_NAME'])
-#        try:
         if not reqparams.has_key('request'):
             raise OGCException('Missing request parameter.')
         if reqparams['request'] == 'GetCapabilities' and not reqparams.has_key('service'):
             raise OGCException('Missing service parameter.')
         if reqparams['request'] in ['GetMap', 'GetFeatureInfo']:
-            reqparams['service'] = 'wms'
-        service = reqparams['service'].lower()
+            reqparams['service'] = 'WMS'
         try:
-            mapnikmodule = __import__('mapnik.ogcserver.' + service)
+            mapnikmodule = __import__('mapnik.ogcserver.' + reqparams['service'])
         except:
-            raise OGCException('Unsupported service "%s".' % service)
-        ServiceHandlerFactory = getattr(mapnikmodule.ogcserver, service).ServiceHandlerFactory
-        servicehandler, exceptionhandler = ServiceHandlerFactory(self.conf, self.mapfactory, onlineresource, reqparams.get('version', None))
+            raise OGCException('Unsupported service "%s".' % reqparams['service'])
+        ServiceHandlerFactory = getattr(mapnikmodule.ogcserver, reqparams['service']).ServiceHandlerFactory
+        servicehandler = ServiceHandlerFactory(self.conf, self.mapfactory, onlineresource, reqparams.get('version', None))
         if reqparams['request'] not in servicehandler.SERVICE_PARAMS.keys():
             raise OGCException('Operation "%s" not supported.' % reqparams['request'], 'OperationNotSupported')
         ogcparams = servicehandler.processParameters(reqparams['request'], reqparams)
@@ -67,14 +75,25 @@
         except:
             raise OGCException('Operation "%s" not supported.' % reqparams['request'], 'OperationNotSupported')
         response = requesthandler(ogcparams)
-#        except:
-#            raise
-#        else:
         req.set_header('Content-Type', response.content_type)
         req.write(response.content)
-        """
-        except OGCException:
-            eh = exceptionhandler()
-            req.set_header('Content-Type', eh.mimetype)
-            req.write(ElementTree.tostring(eh.getexcetree(sys.exc_info()[1])))
-        """
\ No newline at end of file
+
+    def traceback(self, req):
+        reqparams = lowerparams(req.params)
+        version = reqparams.get('version', None)
+        if not version:
+            version = Version('1.3.0')
+        else:
+            version = Version(version)
+        if version >= '1.3.0':
+            eh = ExceptionHandler130(self.debug)
+        else:
+            eh = ExceptionHandler111(self.debug)
+        req.set_header('Content-Type', eh.mimetype)
+        req.write(eh.getcontent())
+
+def lowerparams(params):
+    reqparams = {}
+    for key, value in params.items():
+        reqparams[key.lower()] = value
+    return reqparams
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-14 03:45:46 UTC (rev 233)
@@ -195,8 +195,6 @@
 class WMSBaseServiceHandler(BaseServiceHandler):
     
     def GetMap(self, params):
-        if str(params['crs']) != str(self.crs):
-            raise OGCException('Unsupported CRS requested.  Must be "%s" and not "%s".' % (self.crs, params['crs']), 'InvalidCRS')
         if params['bbox'][0] >= params['bbox'][2]:
             raise OGCException("BBOX values don't make sense.  minx is greater than maxx.")
         if params['bbox'][1] >= params['bbox'][3]:
@@ -204,18 +202,19 @@
         m = Map(params['width'], params['height'])
         if params.has_key('transparent') and params['transparent'] == 'FALSE':
             m.background = params['bgcolor']
-        maplayers = self.mapfactory.getlayers()
-        mapstyles = self.mapfactory.getstyles()
+        maplayers = self.mapfactory.layers
+        mapstyles = self.mapfactory.styles
         for layername in params['layers']:
-            for layer in maplayers:
-                if layer.name() == layername:
-                    for stylename in layer.styles:
-                        if stylename in mapstyles.keys():
-                            m.append_style(stylename, mapstyles[stylename])
-                    m.layers.append(layer)
-        if len(m.layers) != len(params['layers']):
-            badnames = [ layername for layername in params['layers'] if layername not in [ layer.name() for layer in m.layers ] ]
-            raise OGCException('The following layers are not defined by this server: %s.' % ','.join(badnames), 'LayerNotDefined')
+            try:
+                layer = maplayers[layername]
+            except KeyError:
+                raise OGCException('Layer not defined: %s.' % layername, 'LayerNotDefined')
+            for stylename in layer.styles:
+                if stylename in mapstyles.keys():
+                    m.append_style(stylename, mapstyles[stylename])
+                else:
+                    raise ServerConfigurationError('Layer "%s" refers to non-existent style "%s".' % (layername, stylename))
+            m.layers.append(layer)
         m.zoom_to_box(Envelope(params['bbox'][0], params['bbox'][1], params['bbox'][2], params['bbox'][3]))
         im = Image(params['width'], params['height'])
         render(m, im)

Modified: trunk/bindings/python/mapnik/ogcserver/exceptions.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-14 03:45:46 UTC (rev 233)
@@ -20,6 +20,10 @@
 # $Id$
 
 from copy import deepcopy
+from lxml import etree as ElementTree
+from StringIO import StringIO
+from traceback import print_tb
+from sys import exc_info
 
 class OGCException(Exception):
     pass
@@ -29,11 +33,20 @@
 
 class BaseExceptionHandler:
     
-    def getexcetree(self, exc):
+    def __init__(self, debug):
+        self.debug = debug
+    
+    def getcontent(self):
+        excinfo = exc_info()
         ogcexcetree = deepcopy(self.xmltemplate)
         e = ogcexcetree.find(self.xpath)
-        if len(exc.args) > 0:
-            e.text = exc.args[0]
-            if len(exc.args) > 1:
-                e.set('code', exc.args[1])
-        return ogcexcetree
\ No newline at end of file
+        if self.debug:
+            fh = StringIO()
+            print_tb(excinfo[2], None, fh)
+            fh.seek(0)
+            e.text = '\n' + fh.read() + '\n' + str(excinfo[0]) + ': ' + ', '.join(excinfo[1].args) + '\n'
+        elif len(excinfo[1].args) > 0:
+            e.text = excinfo[1].args[0]
+        if isinstance(excinfo[1], OGCException) and len(excinfo[1].args) > 1:
+            e.set('code', excinfo[1].args[1])
+        return ElementTree.tostring(ogcexcetree)
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms111.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-14 03:45:46 UTC (rev 233)
@@ -140,7 +140,7 @@
         rootlayersrs = rootlayerelem.find('SRS')
         rootlayersrs.text = str(self.crs)
 
-        for layer in self.mapfactory.getlayers():
+        for layer in self.mapfactory.layers.values():
             layername = ElementTree.Element('Name')
             layername.text = layer.name()
             layertitle = ElementTree.Element('Title')
@@ -172,6 +172,11 @@
         response = Response('application/vnd.ogc.wms_xml', self.capabilities)
         return response
 
+    def GetMap(self, params):
+        if str(params['srs']) != str(self.crs):
+            raise OGCException('Unsupported SRS requested.  Must be "%s" and not "%s".' % (self.crs, params['crs']), 'InvalidCRS')
+        return WMSBaseServiceHandler.GetMap(self, params)
+
 class ExceptionHandler(BaseExceptionHandler):
     
     mimetype = "application/vnd.ogc.se_xml"

Modified: trunk/bindings/python/mapnik/ogcserver/wms130.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-14 03:45:46 UTC (rev 233)
@@ -126,7 +126,7 @@
             servicee = capetree.find('{http://www.opengis.net/wms}Service')
             for item in self.CONF_SERVICE:
                 if self.conf.has_option('service', item[0]):
-                    value = self.conf.get('service', item[0])
+                    value = self.conf.get('service', item[0]).strip()
                     try:
                         item[2](value)
                     except:
@@ -147,7 +147,7 @@
         rootlayercrs = rootlayerelem.find('{http://www.opengis.net/wms}CRS')
         rootlayercrs.text = str(self.crs)
         
-        for layer in self.mapfactory.getlayers():
+        for layer in self.mapfactory.layers.values():
             layername = ElementTree.Element('Name')
             layername.text = layer.name()
             layertitle = ElementTree.Element('Title')
@@ -190,6 +190,8 @@
     def GetMap(self, params):
         if params['width'] > int(self.conf.get('service', 'maxwidth')) or params['height'] > int(self.conf.get('service', 'maxheight')):
             raise OGCException('Requested map size exceeds limits set by this server.')
+        if str(params['crs']) != str(self.crs):
+            raise OGCException('Unsupported CRS requested.  Must be "%s" and not "%s".' % (self.crs, params['crs']), 'InvalidCRS')
         return WMSBaseServiceHandler.GetMap(self, params)
 
 class ExceptionHandler(BaseExceptionHandler):

Modified: trunk/docs/ogcserver/readme.txt
===================================================================
--- trunk/docs/ogcserver/readme.txt	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/docs/ogcserver/readme.txt	2006-04-14 03:45:46 UTC (rev 233)
@@ -89,15 +89,27 @@
 
 The server needs a python module, with code that looks like this:
 
-from mapnik.ogcserver.wms import BaseWMSFactory
+from mapnik.ogcserver.WMS import BaseWMSFactory
 
-class MapFactory:
+class WMSFactory(BaseWMSFactory):
 
 	def __init(self):
+		BaseWMSFactory.__init__(self)
+		sty = Style()
 		...
-	
-	def getlayers(self):
+		self.register_style('stylename', sty)
+		
+		lyr = Layer(name='layername')
 		...
-	
-	def getstyles(self):
-		...
\ No newline at end of file
+		self.register_layer(lyr)
+		
+The rules for writing this class are:
+
+- It MUST be called 'WMSFactory'.
+- It MUST sub-class mapnik.ogcserver.WMS.BaseWMSFactory.
+- The __init__ MUST call the base class'.
+- Layers MUST be named with the 'name' parameter to the constructor.
+- style and layer names are meant for machine readability, not human.  Keep
+  them short and simple, without spaces or special characters.
+- The layers must have at least one style associated with them (a default).
+- No Map() object is used or needed here.
\ No newline at end of file

Modified: trunk/utils/ogcserver/ogcserver.conf
===================================================================
--- trunk/utils/ogcserver/ogcserver.conf	2006-04-13 02:39:49 UTC (rev 232)
+++ trunk/utils/ogcserver/ogcserver.conf	2006-04-14 03:45:46 UTC (rev 233)
@@ -36,8 +36,4 @@
 #                  supporting the service for example.  This is NOT the online
 #                  resource pointing to the CGI.
 
-onlineresource=http://www.mapnik.org/
-
-[contact]
-name=
-email=
+onlineresource=http://www.mapnik.org/
\ No newline at end of file



From jdoyon at berlios.de  Sun Apr 16 06:17:49 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Sun, 16 Apr 2006 06:17:49 +0200
Subject: [Mapnik-svn] r234 - trunk/bindings/python/mapnik/ogcserver
Message-ID: <200604160417.k3G4HnA8029832@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-16 06:17:39 +0200 (Sun, 16 Apr 2006)
New Revision: 234

Modified:
   trunk/bindings/python/mapnik/ogcserver/cgiserver.py
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/exceptions.py
   trunk/bindings/python/mapnik/ogcserver/wms111.py
   trunk/bindings/python/mapnik/ogcserver/wms130.py
Log:
Added support for INIMAGE error handling.

Modified: trunk/bindings/python/mapnik/ogcserver/cgiserver.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-14 03:45:46 UTC (rev 233)
+++ trunk/bindings/python/mapnik/ogcserver/cgiserver.py	2006-04-16 04:17:39 UTC (rev 234)
@@ -89,8 +89,9 @@
             eh = ExceptionHandler130(self.debug)
         else:
             eh = ExceptionHandler111(self.debug)
-        req.set_header('Content-Type', eh.mimetype)
-        req.write(eh.getcontent())
+        response = eh.getresponse(reqparams)
+        req.set_header('Content-Type', response.content_type)
+        req.write(response.content)
 
 def lowerparams(params):
     reqparams = {}

Modified: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-14 03:45:46 UTC (rev 233)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-16 04:17:39 UTC (rev 234)
@@ -21,8 +21,13 @@
 
 from exceptions import OGCException, ServerConfigurationError
 from mapnik import Map, Color, Envelope, render, rawdata, Image, Projection
-from PIL.Image import fromstring
+from PIL.Image import fromstring, new
+from PIL.ImageDraw import Draw
 from StringIO import StringIO
+from copy import deepcopy
+from traceback import print_tb
+from sys import exc_info
+from lxml import etree as ElementTree
 import re
 # from elementtree import ElementTree
 # ElementTree._namespace_map.update({'http://www.opengis.net/wms': 'wms',
@@ -208,7 +213,7 @@
             try:
                 layer = maplayers[layername]
             except KeyError:
-                raise OGCException('Layer not defined: %s.' % layername, 'LayerNotDefined')
+                raise OGCException('Layer "%s" not defined.' % layername, 'LayerNotDefined')
             for stylename in layer.styles:
                 if stylename in mapstyles.keys():
                     m.append_style(stylename, mapstyles[stylename])
@@ -222,5 +227,46 @@
         fh = StringIO()
         im2.save(fh, PIL_TYPE_MAPPING[params['format']])
         fh.seek(0)
-        response = Response(params['format'], fh.read())
-        return response
\ No newline at end of file
+        return Response(params['format'], fh.read())
+
+class BaseExceptionHandler:
+    
+    def __init__(self, debug):
+        self.debug = debug
+    
+    def getresponse(self, params):
+        code = ''
+        message = ''
+        excinfo = exc_info()
+        if self.debug:
+            fh = StringIO()
+            print_tb(excinfo[2], None, fh)
+            fh.seek(0)
+            message = '\n' + fh.read() + '\n' + str(excinfo[0]) + ': ' + ', '.join(excinfo[1].args) + '\n'
+            fh.close()
+        elif len(excinfo[1].args) > 0:
+            message = excinfo[1].args[0]
+        if isinstance(excinfo[1], OGCException) and len(excinfo[1].args) > 1:
+            code = excinfo[1].args[1]
+        exceptions = params.get('exceptions', None)
+        if not exceptions:
+            exceptions = self.defaulthandler
+        return self.handlers[exceptions](self, code, message, params)
+    
+    def xmlhandler(self, code, message, params):
+        ogcexcetree = deepcopy(self.xmltemplate)
+        e = ogcexcetree.find(self.xpath)
+        e.text = message
+        if code:
+            e.set('code', code)
+        return Response(self.xmlmimetype, ElementTree.tostring(ogcexcetree))
+
+    def inimagehandler(self, code, message, params):
+        im = new('L', (int(params['width']), int(params['height'])))
+        draw = Draw(im)
+        for count, line in enumerate(message.strip().split('\n')):
+            draw.text((12,15*(count+1)), line, fill='#FFFFFF')
+        fh = StringIO()
+        im.save(fh, PIL_TYPE_MAPPING[params['format']])
+        fh.seek(0)
+        return Response(params['format'], fh.read())
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/exceptions.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-14 03:45:46 UTC (rev 233)
+++ trunk/bindings/python/mapnik/ogcserver/exceptions.py	2006-04-16 04:17:39 UTC (rev 234)
@@ -19,34 +19,8 @@
 #
 # $Id$
 
-from copy import deepcopy
-from lxml import etree as ElementTree
-from StringIO import StringIO
-from traceback import print_tb
-from sys import exc_info
-
 class OGCException(Exception):
     pass
 
 class ServerConfigurationError(Exception):
-    pass
-
-class BaseExceptionHandler:
-    
-    def __init__(self, debug):
-        self.debug = debug
-    
-    def getcontent(self):
-        excinfo = exc_info()
-        ogcexcetree = deepcopy(self.xmltemplate)
-        e = ogcexcetree.find(self.xpath)
-        if self.debug:
-            fh = StringIO()
-            print_tb(excinfo[2], None, fh)
-            fh.seek(0)
-            e.text = '\n' + fh.read() + '\n' + str(excinfo[0]) + ': ' + ', '.join(excinfo[1].args) + '\n'
-        elif len(excinfo[1].args) > 0:
-            e.text = excinfo[1].args[0]
-        if isinstance(excinfo[1], OGCException) and len(excinfo[1].args) > 1:
-            e.set('code', excinfo[1].args[1])
-        return ElementTree.tostring(ogcexcetree)
\ No newline at end of file
+    pass
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms111.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-14 03:45:46 UTC (rev 233)
+++ trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-16 04:17:39 UTC (rev 234)
@@ -20,8 +20,9 @@
 # $Id$
 
 from common import ParameterDefinition, Response, Version, ListFactory, \
-                   ColorFactory, CRSFactory, WMSBaseServiceHandler, CRS
-from exceptions import OGCException, ServerConfigurationError, BaseExceptionHandler
+                   ColorFactory, CRSFactory, WMSBaseServiceHandler, CRS, \
+                   BaseExceptionHandler
+from exceptions import OGCException, ServerConfigurationError
 from lxml import etree as ElementTree
 
 class ServiceHandler(WMSBaseServiceHandler):
@@ -38,10 +39,10 @@
             'bbox': ParameterDefinition(True, ListFactory(float)),
             'width': ParameterDefinition(True, int),
             'height': ParameterDefinition(True, int),
-            'format': ParameterDefinition(True, str, allowedvalues=('image/png','image/jpeg','image/gif')),
-            'transparent': ParameterDefinition(False, str, 'FALSE', ('TRUE','FALSE')),
+            'format': ParameterDefinition(True, str, allowedvalues=('image/png', 'image/jpeg', 'image/gif')),
+            'transparent': ParameterDefinition(False, str, 'FALSE', ('TRUE', 'FALSE')),
             'bgcolor': ParameterDefinition(False, ColorFactory, ColorFactory('0xFFFFFF')),
-            'exceptions': ParameterDefinition(False, str, 'application/vnd.ogc.se_xml', ('application/vnd.ogc.se_xml',))
+            'exceptions': ParameterDefinition(False, str, 'application/vnd.ogc.se_xml', ('application/vnd.ogc.se_xml', 'application/vnd.ogc.se_inimage'))
         }
     }
 
@@ -92,6 +93,7 @@
         </Request>
         <Exception>
           <Format>application/vnd.ogc.se_xml</Format>
+          <Format>application/vnd.ogc.se_inimage</Format>
         </Exception>
         <Layer>
           <Title>A Mapnik WMS Server</Title>
@@ -179,7 +181,7 @@
 
 class ExceptionHandler(BaseExceptionHandler):
     
-    mimetype = "application/vnd.ogc.se_xml"
+    xmlmimetype = "application/vnd.ogc.se_xml"
     
     xmltemplate = ElementTree.fromstring("""<?xml version='1.0' encoding="UTF-8" standalone="no"?>
     <!DOCTYPE ServiceExceptionReport SYSTEM "http://www.digitalearth.gov/wmt/xml/exception_1_1_1.dtd">
@@ -188,4 +190,9 @@
     </ServiceExceptionReport>
     """)
     
-    xpath = 'ServiceException'
\ No newline at end of file
+    xpath = 'ServiceException'
+
+    handlers = {'application/vnd.ogc.se_xml': BaseExceptionHandler.xmlhandler,
+                'application/vnd.ogc.se_inimage': BaseExceptionHandler.inimagehandler}
+    
+    defaulthandler = 'application/vnd.ogc.se_xml'
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms130.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-14 03:45:46 UTC (rev 233)
+++ trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-16 04:17:39 UTC (rev 234)
@@ -20,8 +20,9 @@
 # $Id$
 
 from common import ParameterDefinition, Response, Version, ListFactory, \
-                   ColorFactory, CRSFactory, CRS, WMSBaseServiceHandler
-from exceptions import OGCException, ServerConfigurationError, BaseExceptionHandler
+                   ColorFactory, CRSFactory, CRS, WMSBaseServiceHandler, \
+                   BaseExceptionHandler
+from exceptions import OGCException, ServerConfigurationError
 from lxml import etree as ElementTree
 
 class ServiceHandler(WMSBaseServiceHandler):
@@ -39,10 +40,10 @@
             'bbox': ParameterDefinition(True, ListFactory(float)),
             'width': ParameterDefinition(True, int),
             'height': ParameterDefinition(True, int),
-            'format': ParameterDefinition(True, str, allowedvalues=('image/gif','image/png','image/jpeg')),
-            'transparent': ParameterDefinition(False, str, 'FALSE', ('TRUE','FALSE')),
+            'format': ParameterDefinition(True, str, allowedvalues=('image/gif','image/png', 'image/jpeg')),
+            'transparent': ParameterDefinition(False, str, 'FALSE', ('TRUE', 'FALSE')),
             'bgcolor': ParameterDefinition(False, ColorFactory, ColorFactory('0xFFFFFF')),
-            'exceptions': ParameterDefinition(False, str, 'XML', ('XML',)),
+            'exceptions': ParameterDefinition(False, str, 'XML', ('XML', 'INIMAGE')),
         }
     }
 
@@ -98,6 +99,7 @@
         </Request>
         <Exception>
           <Format>XML</Format>
+          <Format>INIMAGE</Format>
         </Exception>
         <Layer>
           <Title>A Mapnik WMS Server</Title>
@@ -196,7 +198,7 @@
 
 class ExceptionHandler(BaseExceptionHandler):
     
-    mimetype = "text/xml"
+    xmlmimetype = "text/xml"
     
     xmltemplate = ElementTree.fromstring("""<?xml version='1.0' encoding="UTF-8"?>
     <ServiceExceptionReport version="1.3.0"
@@ -207,4 +209,9 @@
     </ServiceExceptionReport>
     """)
     
-    xpath = '{http://www.opengis.net/ogc}ServiceException'
\ No newline at end of file
+    xpath = '{http://www.opengis.net/ogc}ServiceException'
+    
+    handlers = {'XML': BaseExceptionHandler.xmlhandler,
+                'INIMAGE': BaseExceptionHandler.inimagehandler}
+    
+    defaulthandler = 'XML'
\ No newline at end of file



From jdoyon at berlios.de  Sun Apr 16 21:23:39 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Sun, 16 Apr 2006 21:23:39 +0200
Subject: [Mapnik-svn] r235 - in trunk: bindings/python/mapnik/ogcserver docs/ogcserver
Message-ID: <200604161923.k3GJNdUI015050@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-16 21:23:37 +0200 (Sun, 16 Apr 2006)
New Revision: 235

Modified:
   trunk/bindings/python/mapnik/ogcserver/common.py
   trunk/bindings/python/mapnik/ogcserver/wms111.py
   trunk/bindings/python/mapnik/ogcserver/wms130.py
   trunk/docs/ogcserver/readme.txt
Log:
- INIMAGE text now on transparent background
- BLANK error handling support added

Modified: trunk/bindings/python/mapnik/ogcserver/common.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-16 04:17:39 UTC (rev 234)
+++ trunk/bindings/python/mapnik/ogcserver/common.py	2006-04-16 19:23:37 UTC (rev 235)
@@ -83,7 +83,7 @@
         finalparams = {}
         for paramname, paramdef in self.SERVICE_PARAMS[requestname].items():
             if paramname not in params.keys() and paramdef.mandatory:
-                raise OGCException("Mandatory parameter '%s' missing from request." % paramname)
+                raise OGCException('Mandatory parameter "%s" missing from request.' % paramname)
             elif paramname in params.keys():
                 try:
                     params[paramname] = paramdef.cast(params[paramname])
@@ -93,7 +93,7 @@
                     raise OGCException('Invalid value "%s" for parameter "%s".' % (params[paramname], paramname))
                 if paramdef.allowedvalues and params[paramname] not in paramdef.allowedvalues:
                     if not paramdef.fallback:
-                        raise OGCException("Parameter '%s' has an illegal value." % paramname)
+                        raise OGCException('Parameter "%s" has an illegal value.' % paramname)
                     else:
                         finalparams[paramname] = paramdef.default
                 else:
@@ -262,11 +262,26 @@
         return Response(self.xmlmimetype, ElementTree.tostring(ogcexcetree))
 
     def inimagehandler(self, code, message, params):
-        im = new('L', (int(params['width']), int(params['height'])))
+        im = new('RGBA', (int(params['width']), int(params['height'])))
+        im.putalpha(new('1', (int(params['width']), int(params['height']))))
         draw = Draw(im)
         for count, line in enumerate(message.strip().split('\n')):
-            draw.text((12,15*(count+1)), line, fill='#FFFFFF')
+            draw.text((12,15*(count+1)), line, fill='#000000')
         fh = StringIO()
         im.save(fh, PIL_TYPE_MAPPING[params['format']])
         fh.seek(0)
-        return Response(params['format'], fh.read())
\ No newline at end of file
+        return Response(params['format'], fh.read())
+    
+    def blankhandler(self, code, message, params):
+        bgcolor = params.get('bgcolor', '#FFFFFF')
+        bgcolor.replace('0x', '#')
+        transparent = params.get('transparent', 'FALSE')
+        if transparent == 'TRUE':
+            im = new('RGBA', (int(params['width']), int(params['height'])))
+            im.putalpha(new('1', (int(params['width']), int(params['height']))))
+        else:
+            im = new('RGBA', (int(params['width']), int(params['height'])), bgcolor)
+        fh = StringIO()
+        im.save(fh, PIL_TYPE_MAPPING[params['format']])
+        fh.seek(0)
+        return Response(params['format'], fh.read())

Modified: trunk/bindings/python/mapnik/ogcserver/wms111.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-16 04:17:39 UTC (rev 234)
+++ trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-16 19:23:37 UTC (rev 235)
@@ -94,6 +94,7 @@
         <Exception>
           <Format>application/vnd.ogc.se_xml</Format>
           <Format>application/vnd.ogc.se_inimage</Format>
+          <Format>application/vnd.ogc.se_blank</Format>
         </Exception>
         <Layer>
           <Title>A Mapnik WMS Server</Title>
@@ -193,6 +194,7 @@
     xpath = 'ServiceException'
 
     handlers = {'application/vnd.ogc.se_xml': BaseExceptionHandler.xmlhandler,
-                'application/vnd.ogc.se_inimage': BaseExceptionHandler.inimagehandler}
+                'application/vnd.ogc.se_inimage': BaseExceptionHandler.inimagehandler,
+                'application/vnd.ogc.se_blank': BaseExceptionHandler.blankhandler}
     
     defaulthandler = 'application/vnd.ogc.se_xml'
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms130.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-16 04:17:39 UTC (rev 234)
+++ trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-16 19:23:37 UTC (rev 235)
@@ -100,6 +100,7 @@
         <Exception>
           <Format>XML</Format>
           <Format>INIMAGE</Format>
+          <Format>BLANK</Format>
         </Exception>
         <Layer>
           <Title>A Mapnik WMS Server</Title>
@@ -212,6 +213,7 @@
     xpath = '{http://www.opengis.net/ogc}ServiceException'
     
     handlers = {'XML': BaseExceptionHandler.xmlhandler,
-                'INIMAGE': BaseExceptionHandler.inimagehandler}
+                'INIMAGE': BaseExceptionHandler.inimagehandler,
+                'BLANK': BaseExceptionHandler.blankhandler}
     
     defaulthandler = 'XML'
\ No newline at end of file

Modified: trunk/docs/ogcserver/readme.txt
===================================================================
--- trunk/docs/ogcserver/readme.txt	2006-04-16 04:17:39 UTC (rev 234)
+++ trunk/docs/ogcserver/readme.txt	2006-04-16 19:23:37 UTC (rev 235)
@@ -18,9 +18,9 @@
 
 - WMS 1.1.1 and 1.3.0
 - CGI/FastCGI
-- GetCapabilities and GetMap support only
+- GetCapabilities and GetMap support only (NO GetFeatureInfo)
 - GIF/JPEG/PNG output
-- XML error handling only
+- XML/INIMAGE/BLANK error handling
 - No real layer metadata support yet
 - No re-projection support
 



From jdoyon at berlios.de  Fri Apr 21 02:13:29 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Fri, 21 Apr 2006 02:13:29 +0200
Subject: [Mapnik-svn] r236 - trunk/bindings/python/mapnik/ogcserver
Message-ID: <200604210013.k3L0DT5d010744@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-21 02:13:25 +0200 (Fri, 21 Apr 2006)
New Revision: 236

Modified:
   trunk/bindings/python/mapnik/ogcserver/WMS.py
   trunk/bindings/python/mapnik/ogcserver/wms130.py
Log:
- Add support for named styles in GetCapabilities.  Not yet supported by GetMap however.
- Add finalize() to BaseWMSFactory to run sanity checks.

Modified: trunk/bindings/python/mapnik/ogcserver/WMS.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/WMS.py	2006-04-16 19:23:37 UTC (rev 235)
+++ trunk/bindings/python/mapnik/ogcserver/WMS.py	2006-04-21 00:13:25 UTC (rev 236)
@@ -23,6 +23,7 @@
 from exceptions import OGCException, ServerConfigurationError
 from wms111 import ServiceHandler as ServiceHandler111
 from wms130 import ServiceHandler as ServiceHandler130
+from mapnik import Style, Layer
 
 def ServiceHandlerFactory(conf, mapfactory, onlineresource, version):
 
@@ -41,13 +42,29 @@
         self.layers = {}
         self.styles = {}
     
-    def register_layer(self, layer):
+    def register_layer(self, layer, extrastyles=()):
         layername = layer.name()
         if not layername:
-            raise ServerConfigurationError('There is an un-named layer.')
+            raise ServerConfigurationError('Attempted to register an unnamed layer.')
         self.layers[layername] = layer
+        if isinstance(extrastyles, tuple):
+            layer.wmsextrastyles = extrastyles
+        else:
+            raise ServerConfigurationError('Layer "%s" was passed an invalid list of extra styles.  List must be a tuple of strings.' % layername)
     
     def register_style(self, name, style):
         if not name:
-            raise ServerConfigurationError('There is an un-named style.')
-        self.styles[name] = style
\ No newline at end of file
+            raise ServerConfigurationError('Attempted to register a style without providing a name.')
+        if not isinstance(style, Style):
+            raise ServerConfigurationError('Bad style object passed to register_style() for style "%s".' % name)
+        self.styles[name] = style
+    
+    def finalize(self):
+        if len(self.layers) == 0:
+            raise ServerConfigurationError('No layers defined!')
+        if len(self.styles) == 0:
+            raise ServerConfigurationError('No styles defined!')
+        for layer in self.layers.values():
+            for style in list(layer.styles) + list(layer.wmsextrastyles):
+                if style not in self.styles.keys():
+                    raise ServerConfigurationError('Layer "%s" refers to undefined style "%s".' % (layer.name(), style))
\ No newline at end of file

Modified: trunk/bindings/python/mapnik/ogcserver/wms130.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-16 19:23:37 UTC (rev 235)
+++ trunk/bindings/python/mapnik/ogcserver/wms130.py	2006-04-21 00:13:25 UTC (rev 236)
@@ -182,6 +182,16 @@
             layere.append(layertitle)
             layere.append(layerexgbb)
             layere.append(layerbbox)
+            if len(layer.wmsextrastyles) > 0:
+                for extrastyle in list(layer.wmsextrastyles):
+                    style = ElementTree.Element('Style')
+                    stylename = ElementTree.Element('Name')
+                    stylename.text = extrastyle
+                    styletitle = ElementTree.Element('Title')
+                    styletitle.text = extrastyle
+                    style.append(stylename)
+                    style.append(styletitle)
+                    layere.append(style)
             rootlayerelem.append(layere)
         
         self.capabilities = '<?xml version="1.0" encoding="UTF-8"?>' + ElementTree.tostring(capetree)



From jdoyon at berlios.de  Fri Apr 21 02:18:30 2006
From: jdoyon at berlios.de (jdoyon at BerliOS)
Date: Fri, 21 Apr 2006 02:18:30 +0200
Subject: [Mapnik-svn] r237 - in trunk: bindings/python/mapnik/ogcserver docs/ogcserver
Message-ID: <200604210018.k3L0IURJ012242@sheep.berlios.de>

Author: jdoyon
Date: 2006-04-21 02:18:07 +0200 (Fri, 21 Apr 2006)
New Revision: 237

Modified:
   trunk/bindings/python/mapnik/ogcserver/wms111.py
   trunk/docs/ogcserver/readme.txt
Log:
- Updates docs/ogcserver/readme.txt
- Added GetCapabilities named style support to 1.1.1

Modified: trunk/bindings/python/mapnik/ogcserver/wms111.py
===================================================================
--- trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-21 00:13:25 UTC (rev 236)
+++ trunk/bindings/python/mapnik/ogcserver/wms111.py	2006-04-21 00:18:07 UTC (rev 237)
@@ -167,6 +167,16 @@
             layere.append(layertitle)
             layere.append(latlonbb)
             layere.append(layerbbox)
+            if len(layer.wmsextrastyles) > 0:
+                for extrastyle in list(layer.wmsextrastyles):
+                    style = ElementTree.Element('Style')
+                    stylename = ElementTree.Element('Name')
+                    stylename.text = extrastyle
+                    styletitle = ElementTree.Element('Title')
+                    styletitle.text = extrastyle
+                    style.append(stylename)
+                    style.append(styletitle)
+                    layere.append(style)
             rootlayerelem.append(layere)
         
         self.capabilities = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' + ElementTree.tostring(capetree)

Modified: trunk/docs/ogcserver/readme.txt
===================================================================
--- trunk/docs/ogcserver/readme.txt	2006-04-21 00:13:25 UTC (rev 236)
+++ trunk/docs/ogcserver/readme.txt	2006-04-21 00:18:07 UTC (rev 237)
@@ -101,7 +101,8 @@
 		
 		lyr = Layer(name='layername')
 		...
-		self.register_layer(lyr)
+		self.register_layer(lyr, ('extra', 'style', 'names'))
+		self.finalize()
 		
 The rules for writing this class are:
 
@@ -112,4 +113,6 @@
 - style and layer names are meant for machine readability, not human.  Keep
   them short and simple, without spaces or special characters.
 - The layers must have at least one style associated with them (a default).
-- No Map() object is used or needed here.
\ No newline at end of file
+- No Map() object is used or needed here.
+- Be sure to call self.finalize() once you've registered everything! This will
+  validate everything and let you know if there's problems.
\ No newline at end of file



From pavlenko at berlios.de  Fri Apr 21 21:05:34 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Fri, 21 Apr 2006 21:05:34 +0200
Subject: [Mapnik-svn] r238 - trunk
Message-ID: <200604211905.k3LJ5YcQ032255@sheep.berlios.de>

Author: pavlenko
Date: 2006-04-21 21:05:23 +0200 (Fri, 21 Apr 2006)
New Revision: 238

Modified:
   trunk/SConstruct
Log:
added missing PROJ_*

Modified: trunk/SConstruct
===================================================================
--- trunk/SConstruct	2006-04-21 00:18:07 UTC (rev 237)
+++ trunk/SConstruct	2006-04-21 19:05:23 UTC (rev 238)
@@ -53,12 +53,12 @@
 
 env['CPPPATH'] = ['#agg/include', '#include']
 
-for path in [env['BOOST_INCLUDES'], env['PNG_INCLUDES'], env['JPEG_INCLUDES'], env['TIFF_INCLUDES'], env['PGSQL_INCLUDES']]:
+for path in [env['BOOST_INCLUDES'], env['PNG_INCLUDES'], env['JPEG_INCLUDES'], env['TIFF_INCLUDES'], env['PGSQL_INCLUDES'], env['PROJ_INCLUDES']]:
     if path not in env['CPPPATH']: env['CPPPATH'].append(path)
 
 env['LIBPATH'] = ['#agg', '#src']
 
-for path in [env['BOOST_LIBS'], env['PNG_LIBS'], env['JPEG_LIBS'], env['TIFF_LIBS'], env['PGSQL_LIBS']]:
+for path in [env['BOOST_LIBS'], env['PNG_LIBS'], env['JPEG_LIBS'], env['TIFF_LIBS'], env['PGSQL_LIBS'], env['PROJ_LIBS']]:
     if path not in env['LIBPATH']: env['LIBPATH'].append(path)
 
 env.ParseConfig(env['FREETYPE_CONFIG'] + ' --libs --cflags')



From pavlenko at berlios.de  Sat Apr 22 21:38:21 2006
From: pavlenko at berlios.de (pavlenko at BerliOS)
Date: Sat, 22 Apr 2006 21:38:21 +0200
Subject: [Mapnik-svn] r239 - in trunk: include src utils/ogcserver
Message-ID: <200604221938.k3MJcL7n003773@sheep.berlios.de>

Author: pavlenko
Date: 2006-04-22 21:37:59 +0200 (Sat, 22 Apr 2006)
New Revision: 239

Modified:
   trunk/include/graphics.hpp
   trunk/src/graphics.cpp
   trunk/utils/ogcserver/ogcserver.conf
Log:
small cleanup

Modified: trunk/include/graphics.hpp
===================================================================
--- trunk/include/graphics.hpp	2006-04-21 19:05:23 UTC (rev 238)
+++ trunk/include/graphics.hpp	2006-04-22 19:37:59 UTC (rev 239)
@@ -42,12 +42,10 @@
 	unsigned height_;
 	Color background_;
 	ImageData32 data_;
-	//static gamma gammaTable_;
     public:
 	Image32(int width,int height);
 	Image32(const Image32& rhs);
 	~Image32();
-	//static void setGamma(double gamma);
 	void setBackground(const Color& background);
 	const Color& getBackground() const;     
 	const ImageData32& data() const;
@@ -80,26 +78,6 @@
 		data_(x,y)=rgba;
 	    }
 	}
-    /*
-	inline int blendColor(int c0,int c1,int t)
-	{
-	    int bgRed=(c1>>16)&0xff;
-	    int bgGreen=(c1>>8)&0xff;
-	    int bgBlue=c1&0xff;
-
-	    int red=(c0>>16)&0xff;
-	    int green=(c0>>8)&0xff;
-	    int blue=c0&0xff;
-
-	    int alpha=t;
-
-	    int r=gammaTable_.l2g[(gammaTable_.g2l[red]*alpha+gammaTable_.g2l[bgRed]*(255-alpha))>>8];
-	    int g=gammaTable_.l2g[(gammaTable_.g2l[green]*alpha+gammaTable_.g2l[bgGreen]*(255-alpha))>>8];
-	    int b=gammaTable_.l2g[(gammaTable_.g2l[blue]*alpha+gammaTable_.g2l[bgBlue]*(255-alpha))>>8];
-	    
-	    return 0xff << 24 | r << 16 | g << 8 | b;
-	}
-*/
 	inline void blendPixel(int x,int y,unsigned int rgba1,int t)
 	{
 	    if (checkBounds(x,y))

Modified: trunk/src/graphics.cpp
===================================================================
--- trunk/src/graphics.cpp	2006-04-21 19:05:23 UTC (rev 238)
+++ trunk/src/graphics.cpp	2006-04-22 19:37:59 UTC (rev 239)
@@ -42,8 +42,6 @@
 
     Image32::~Image32() {}
 
-    //gamma MAPNIK_DECL Image32::gammaTable_;
-
     const ImageData32& Image32::data() const
     {
         return data_;

Modified: trunk/utils/ogcserver/ogcserver.conf
===================================================================
--- trunk/utils/ogcserver/ogcserver.conf	2006-04-21 19:05:23 UTC (rev 238)
+++ trunk/utils/ogcserver/ogcserver.conf	2006-04-22 19:37:59 UTC (rev 239)
@@ -36,4 +36,4 @@
 #                  supporting the service for example.  This is NOT the online
 #                  resource pointing to the CGI.
 
-onlineresource=http://www.mapnik.org/
\ No newline at end of file
+onlineresource=http://www.mapnik.org/



